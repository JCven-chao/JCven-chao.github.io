import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as a,d as t,e}from"./app-0ab03366.js";const i="/assets/note-images/java/Java-logo.png",u={},d=e('<h1 id="java-se-基础语法" tabindex="-1"><a class="header-anchor" href="#java-se-基础语法" aria-hidden="true">#</a> Java SE 基础语法</h1><figure><img src="'+i+'" alt="Java-logo" tabindex="0" loading="lazy"><figcaption>Java-logo</figcaption></figure><h3 id="第01章-java简介" tabindex="-1"><a class="header-anchor" href="#第01章-java简介" aria-hidden="true">#</a> 第01章--Java简介</h3><h5 id="_1-jdk结构" tabindex="-1"><a class="header-anchor" href="#_1-jdk结构" aria-hidden="true">#</a> 1. JDK结构</h5><ul><li><p>JDK 是 Java 语言的软件开发工具包（SDK）</p></li><li><p>JRE 指 Java 运行环境，在JRE里面有JVM和lib（类库）</p></li><li><p>JVM 是Java虚拟机</p></li></ul><h5 id="_2-javaapi文档" tabindex="-1"><a class="header-anchor" href="#_2-javaapi文档" aria-hidden="true">#</a> 2. JavaAPI文档</h5>',6),r={href:"https://docs.oracle.com/javase/8/docs/api/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.oracle.com/en/java/javase/17/docs/api/index.html",target:"_blank",rel:"noopener noreferrer"},v=e(`<hr><h3 id="第02章-基础语法" tabindex="-1"><a class="header-anchor" href="#第02章-基础语法" aria-hidden="true">#</a> 第02章--基础语法</h3><h4 id="_1-注释" tabindex="-1"><a class="header-anchor" href="#_1-注释" aria-hidden="true">#</a> 1. 注释</h4><ul><li><p><strong>单行注释</strong>：通常用于解释方法内某单行代码的作用</p></li><li><p><strong>多行注释</strong>：通常用于解释一段代码的作用</p></li><li><p><strong>文档注释</strong>：通常用于生成 Java 开发文档</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/** 
 *  文档注释
 *  <span class="token keyword">@author</span> JCven
 *  <span class="token keyword">@version</span> 1.0
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文档注释可以被 JDK 提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档</p><p>使用 cmd 控制台输入<code>javadoc -d mydoc -author -version HelloWorld.java</code></p><h4 id="_2-运算符" tabindex="-1"><a class="header-anchor" href="#_2-运算符" aria-hidden="true">#</a> 2. 运算符</h4><ul><li><p><strong>自增运算符</strong></p><blockquote><p><code>a = i++</code> 是先赋值再自增</p><p><code>a = ++i</code> 是先自增再赋值</p></blockquote></li><li><p><strong>位运算符</strong></p><blockquote><p><strong>按照二进制，以补码的形式运算</strong></p><p>按位与 <code>&amp;</code>：两位全为1是结果为1，否则为0<br> 按位或 <code>|</code>：两位有1则结果为1，否则为0<br> 按位异或 <code>^</code>：两位不同则结果为1，否则为0<br> 按位取反 <code>~</code>：0与1互换</p></blockquote><div class="language-card line-numbers-mode" data-ext="card"><pre class="language-card"><code>2 的原码 = 补码为 00000000 00000000 00000000 00000010
3 的原码 = 补码为 00000000 00000000 00000000 00000011
2&amp;3 按位与运算为 00000000 00000000 00000000 00000010
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>逻辑运算符</strong></p><blockquote><p>短路与 <code>&amp;&amp;</code>：两边均满足，只要有一个不满足就是false</p><p>短路或 <code>||</code>：有任意一个满足即可，只要有一个满足就返回true</p><p>逻辑与 <code>&amp;</code>：两边均满足，且两边都会执行</p><p>逻辑或 <code>|</code>：有任意一个满足即可，但两边都会执行</p></blockquote></li><li><p>移位运算符</p><blockquote><p><code>&lt;&lt;</code>：左移运算符，高位丢弃，低位补零。<code>x &lt;&lt; 1</code>相当于 x 乘以 2（不溢出的情况下）</p><p><code>&gt;&gt;</code>：带符号右移，高位补符号位，低位丢弃。正数高位补 0，负数高位补 1。<code>x &gt;&gt; 1</code>相当于 x 除以 2</p><p><code>&gt;&gt;&gt;</code>：无符号右移，忽略符号位，空位都以 0 补齐</p></blockquote></li></ul><h4 id="_3-数据类型" tabindex="-1"><a class="header-anchor" href="#_3-数据类型" aria-hidden="true">#</a> 3. 数据类型</h4><table><thead><tr><th>基本数据类型</th><th>占用字节</th><th>默认值</th><th>取值范围</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>0</td><td>-128 ~ 127</td><td>Byte</td></tr><tr><td>short</td><td>2</td><td>0</td><td>-2^15 ~ 2^15 - 1</td><td>Short</td></tr><tr><td>int</td><td>4</td><td>0</td><td>-2^31 ~ 2^31 - 1</td><td>Integer</td></tr><tr><td>long</td><td>8</td><td>0L</td><td>-2^63 ~ 2^63 -1</td><td>Long</td></tr><tr><td>float</td><td>4</td><td>0F</td><td>1.4E-45 ~ 3.4028235E38</td><td>Float</td></tr><tr><td>double</td><td>8</td><td>0D</td><td>4.9E-324 ~ 1.7976931348623157E308</td><td>Double</td></tr><tr><td>char</td><td>2</td><td>&#39;u0000&#39;</td><td>0 ~ 65535</td><td>Character</td></tr><tr><td>boolean</td><td>1</td><td>false</td><td>true、false</td><td>Boolean</td></tr></tbody></table><blockquote><p>整数默认类型是 int，小数默认类型是 double</p><p>long类型需添加 &quot;L&quot; 后缀，float类型必须添加 &quot;F&quot; 后缀</p></blockquote><hr><h3 id="第03章-流程控制" tabindex="-1"><a class="header-anchor" href="#第03章-流程控制" aria-hidden="true">#</a> 第03章--流程控制</h3><h4 id="_1-switch分支控制" tabindex="-1"><a class="header-anchor" href="#_1-switch分支控制" aria-hidden="true">#</a> 1. switch分支控制</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">case</span> 常量<span class="token number">1</span><span class="token operator">:</span>
        语句
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> 常量<span class="token number">2</span><span class="token operator">:</span>
        语句
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        语句
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>表达式类型应与常量类型保持一致，或是可以自动转化为可比较的类型，如字符转int</p><p>switch表达式的类型只能是byte，short， int，char，enum，String</p><p>case子句中的值必须为常量不能是变量</p></blockquote><h4 id="_2-for循环" tabindex="-1"><a class="header-anchor" href="#_2-for循环" aria-hidden="true">#</a> 2. for循环</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>for循环的变量初始化和循环变量迭代可以写到其他地方，但分号不能省略，即for( ; 循环条件 ; ){}</p><p>循环初始值可以有多个，但类型要一样，用逗号隔开</p><p>变量迭代也可以有多个，用逗号隔开</p></blockquote><h4 id="_3-break" tabindex="-1"><a class="header-anchor" href="#_3-break" aria-hidden="true">#</a> 3. break</h4><p><strong>用于终止某个语句块的执行</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>label1<span class="token operator">:</span><span class="token punctuation">{</span>
    label2<span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token keyword">break</span> label2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>break语句出现在多层嵌套循环中，可以通过标签来指明终止哪一层语句块</p><p>没有指定的break默认退出最近的循环体</p></blockquote><h4 id="_4-continue" tabindex="-1"><a class="header-anchor" href="#_4-continue" aria-hidden="true">#</a> 4. continue</h4><p><strong>结束本次循环，继续执行下一次循环</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>label1<span class="token operator">:</span><span class="token punctuation">{</span>
    label2<span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token comment">//continue; = continue label2;</span>
        <span class="token keyword">continue</span> label2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>continue语句出现在多层嵌套循环中，可以通过标签跳过哪一层循环</p><p>没有指定的continue默认跳过最近的循环体</p></blockquote><h4 id="_5-return" tabindex="-1"><a class="header-anchor" href="#_5-return" aria-hidden="true">#</a> 5. return</h4><p><strong>结束方法的执行</strong></p><blockquote><p>return用于方法中，会跳出方法</p><p>return用于main中，表示退出程序</p></blockquote><hr><h3 id="第04章-数组" tabindex="-1"><a class="header-anchor" href="#第04章-数组" aria-hidden="true">#</a> 第04章--数组</h3><h4 id="_1-数组的定义" tabindex="-1"><a class="header-anchor" href="#_1-数组的定义" aria-hidden="true">#</a> 1. 数组的定义</h4><p><strong>一维数组</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1. 动态初始化1</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">//2. 动态初始化2</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">//3. 静态初始化</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>二维数组</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1. 动态初始化1</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//2. 动态初始化2</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//2. 动态初始化3</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c<span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//3. 静态初始化</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>数组中的元素可以是任何数据类型，包括基本类型和引用类型，但不能混用</p><p>数组创建后没有赋值的会自动赋默认值 int 0、double 0.0、char &#39;\\u0000&#39;、boolean false、String null</p><p>数组属于引用类型，数组型数据属于对象(object)</p></blockquote><h4 id="_2-数组的遍历" tabindex="-1"><a class="header-anchor" href="#_2-数组的遍历" aria-hidden="true">#</a> 2. 数组的遍历</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//方法1 普通for循环，通过下标获取，并且可以改变数组的值</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//方法2 增强型for循环，只能遍历数组，不能改变数组的值</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token operator">:</span>arr2<span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//方法3 使用Arrays.toString()方法返回</span>
<span class="token class-name">String</span> str<span class="token operator">=</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,42);function b(m,h){const s=o("ExternalLinkIcon");return c(),l("div",null,[d,n("p",null,[a("JDK8在线文档："),n("a",r,[a("https://docs.oracle.com/javase/8/docs/api/"),t(s)])]),n("p",null,[a("JDK17在线文档："),n("a",k,[a("https://docs.oracle.com/en/java/javase/17/docs/api/index.html"),t(s)])]),v])}const _=p(u,[["render",b],["__file","JavaSE-Basic.html.vue"]]);export{_ as default};
