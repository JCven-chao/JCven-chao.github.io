import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as o,a as n,b as s,d as t,e as l}from"./app-0ab03366.js";const i={},u=n("h1",{id:"java-se-常用类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#java-se-常用类","aria-hidden":"true"},"#"),s(" Java SE 常用类")],-1),r=n("h3",{id:"第08章-常用类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第08章-常用类","aria-hidden":"true"},"#"),s(" 第08章--常用类")],-1),d={href:"https://docs.oracle.com/javase/8/docs/api/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.oracle.com/en/java/javase/17/docs/api/index.html",target:"_blank",rel:"noopener noreferrer"},m=l(`<h4 id="_1-包装类" tabindex="-1"><a class="header-anchor" href="#_1-包装类" aria-hidden="true">#</a> 1. 包装类</h4><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr></tbody></table><p><strong>基本类型与包装类的区别</strong></p><ul><li>用途：除了定义一些常量和局部变量之外，我们在其他地方比如方法参数、对象属性中很少会使用基本类型来定义变量。并且，包装类型可用于泛型，而基本类型不可以</li><li>存储方式：基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 static 修饰）存放在 Java 虚拟机的堆中。包装类型属于对象类型，也存在于堆中</li><li>占用空间：包装类型占用空间较大，基本数据类型占用空间较小</li><li>默认值：成员变量包装类型不赋值就是 null ，而基本类型有默认值且不是 null</li><li>比较方式：对于基本数据类型，<code>==</code> 比较的是值。对于包装数据类型来说，<code>==</code> 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 <code>equals()</code> 方法。</li></ul><h4 id="_2-string类" tabindex="-1"><a class="header-anchor" href="#_2-string类" aria-hidden="true">#</a> 2. String类</h4><p><strong>字符串与其他类型的转换</strong></p><ul><li><p>包装类 -&gt; String</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment">//方式一</span>
<span class="token class-name">String</span> str1 <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//方式二</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//方式三</span>
<span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>String -&gt; 包装类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token string">&quot;12345&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//方式一</span>
<span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自动装箱</span>
<span class="token comment">//方式二</span>
<span class="token class-name">Integer</span> i3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>字符数组 -&gt; 字符串</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//可以标记起始位置和长度</span>
<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>字符串 -&gt; 字符数组</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p><strong>String常用方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 字符串拼接</span>
<span class="token class-name">String</span> <span class="token function">concat</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 比较字符串是否相等，区分大小写</span>
<span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 比较字符串是否相等，不区分大小写</span>
<span class="token keyword">boolean</span> <span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将字符串中大写字母转为小写</span>
<span class="token class-name">String</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将字符串中小写字母转为大写</span>
<span class="token class-name">String</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 去掉字符串前后空白符</span>
<span class="token class-name">String</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 是否包含str</span>
<span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回一个新字符串，从beginIndex开始截取到endIndex(不包含)</span>
<span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回[index]位置的字符</span>
<span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将此字符串转换为一个新的字符数组返回</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>StringBuffer、StringBuilder常用方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 字符串追加</span>
<span class="token class-name">StringBuffer</span> <span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 字符串反转</span>
<span class="token class-name">StringBuffer</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 删除[start,end)之间字符</span>
<span class="token class-name">StringBuffer</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 删除[index]位置字符</span>
<span class="token class-name">StringBuffer</span> <span class="token function">deleteCharAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 替换[start,end)范围的字符序列为str</span>
<span class="token class-name">StringBuffer</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 查找指定index位置上的字符</span>
<span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 在[index]位置插入str</span>
<span class="token class-name">StringBuffer</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>StringBuffer与StringBuilder方法相同</p><p>StringBuffer线程安全，StringBuilder线程不安全</p></blockquote><h4 id="_3-arrays类" tabindex="-1"><a class="header-anchor" href="#_3-arrays类" aria-hidden="true">#</a> 3. Arrays类</h4><p><strong>常用方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 返回数组的字符串形式</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 升序排序</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 降序排序</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//需要重写compare方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>o1<span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>o2<span class="token punctuation">;</span>
        <span class="token comment">//若i2-i1则为降序</span>
        <span class="token comment">//若i1-i2则为升序</span>
        <span class="token keyword">return</span> i2<span class="token operator">-</span>i1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 二分查找指定元素</span>
<span class="token comment">//arr数组必须是排好序的</span>
<span class="token comment">//在arr数组中查找元素若有则返回下标值，若无则返回此元素应该在的位置的-(low+1)</span>
<span class="token class-name">Integer</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回 2</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回 -(0+1) = -1</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回 -(6+1) = -7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 数组复制</span>
<span class="token comment">// 长度比arr小则会省去后面的元素，长度比arr大则会添加null</span>
<span class="token class-name">Integer</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-system类" tabindex="-1"><a class="header-anchor" href="#_4-system类" aria-hidden="true">#</a> 4. System类</h4><p><strong>常用方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 退出当前程序</span>
<span class="token comment">// exit(0)代表正常退出</span>
<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 数组复制</span>
<span class="token comment">// arraycopy(源数组, 从源数组的索引位置开始复制, 需要复制到的数组, 被复制的数组开始复制的位置，复制的长度)</span>
<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 返回从1970-01-01到现在的时间毫秒值</span>
<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Scanner键盘输入</span>
<span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//System.in默认代表键盘输入</span>
<span class="token comment">//调用Scanner的方法，获取不同类型的变量</span>
<span class="token class-name">String</span> name <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> age <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> weight <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> isSingle <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> gender <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 关闭资源</span>
scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-math类" tabindex="-1"><a class="header-anchor" href="#_5-math类" aria-hidden="true">#</a> 5. Math类</h4><p><strong>常用Math方法</strong></p><ul><li>public static double abs(double a) ：返回 double 值的绝对值</li><li>public static double ceil(double a) ：向上取整</li><li>public static double floor(double a) ：向下取整</li><li>public static long round(double a) ：返回四舍五入值</li><li>public static double pow(double a,double b)：返回 a 的 b 次方</li><li>public static double sqrt(double a)：返回 a 的平方根</li><li>public static double random()：返回 [0,1) 的随机值</li><li>public static final double PI：返回圆周率</li><li>acos、asin、atan、cos、sin、tan：三角函数</li></ul><p><strong>BigInteger类</strong></p><p>构造方法</p><ul><li>BigInteger(String val)：根据字符串构建BigInteger对象</li></ul><p>常用方法</p><ul><li>BigInteger abs()：绝对值</li><li>BigInteger add(BigInteger val)：加法运算</li><li>BigInteger subtract(BigInteger val)：减法运算</li><li>BigInteger multiply(BigInteger val)：乘法运算</li><li>BigInteger divide(BigInteger val)：除法运算, 整数相除只保留整数部分</li><li>BigInteger remainder(BigInteger val)：取余运算</li><li>BigInteger[] divideAndRemainder(BigInteger val)：返回包含除法运算后跟取余运算的两个 BigInteger 的数组</li><li>BigInteger pow(int exponent)：幂指运算</li></ul><p><strong>BigDecimal类</strong></p><p>构造方法</p><ul><li>public BigDecimal(String val)：根据字符串构建BigDecimal对象</li></ul><p>常用方法</p><ul><li>BigDecimal add(BigDecimal augend)：加法运算</li><li>BigDecimal subtract(BigDecimal subtrahend)：减法运算</li><li>BigDecimal multiply(BigDecimal multiplicand)：乘法运算</li><li>BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)：divisor是除数，scale指明保留几位小数，roundingMode指明舍入模式（ROUND_UP：向上加1、ROUND_DOWN：直接舍去、ROUND_HALF_UP：四舍五入）</li></ul><p><strong>Random类</strong></p><p>常用方法</p><ul><li>boolean nextBoolean()：返回下一个伪随机布尔值</li><li>void nextBytes(byte[] bytes)：生成随机字节并将其置于用户提供的 byte 数组中</li><li>double nextDouble()：返回下一个伪随机数，在 0.0 和 1.0 之间均匀分布的 double 值</li><li>float nextFloat()：返回下一个伪随机数，在 0.0 和 1.0 之间均匀分布的 float 值</li><li>int nextInt()：返回下一个伪随机数，均匀分布的 int 值</li><li>int nextInt(int n)：返回一个伪随机数，[0,n) 之间均匀分布的 int 值</li><li>long nextLong()：返回下一个伪随机数，均匀分布的 long 值</li></ul><h4 id="_6-日期类" tabindex="-1"><a class="header-anchor" href="#_6-日期类" aria-hidden="true">#</a> 6. 日期类</h4><p><strong>Date类</strong></p><p>构造方法</p><ul><li>Date()：使用无参构造器创建的对象可以获取本地当前时间</li><li>Date(long 毫秒数)：把该毫秒值换算成日期时间对象</li></ul><p>常用方法</p><ul><li>getTime()：返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//获取当前系统时间</span>
<span class="token class-name">Date</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//日期格式化</span>
<span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy年MM月dd日 HH时mm分ss秒 SSS毫秒  E Z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出结果: 2023年07月16日 11时10分53秒 500毫秒  周日 +0800</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Time类</strong></p><p>本地日期时间类 LocalDate、LocalTime、LocalDateTime</p><p>常用方法</p><ul><li>now() / now(ZoneId zone)：根据当前时间创建对象/指定时区的对象</li><li>getDayOfMonth()：获得月份的天数</li><li>getMonth()：获得月份</li><li>plusDays()：向当前对象添加几天</li><li>minusDays()：从当前对象减少几天</li><li>plus(TemporalAmount t)：添加一个Duration 或 Period</li><li>isBefore() / isAfter()：比较两个LocalDate</li><li>isLeapYear()：判断是否闰年</li><li>format(DateTimeFormatter t)：格式化本地日期、时间，返回一个字符串</li><li>parse(Charsequence text)：将指定格式的字符串解析为日期、时间</li><li>ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;)：自定义格式,，返回一个指定字符串格式的DateTimeFormatter</li><li>Period.between(t1, t2)：计算两个日期间隔</li><li>Duration.between(t1, t2)：计算两个时间间隔</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取当前时间并格式化</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">timeTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DateTimeFormatter</span> dateTimeFormatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53);function v(b,g){const a=p("ExternalLinkIcon");return c(),o("div",null,[u,r,n("p",null,[s("JDK8在线文档："),n("a",d,[s("https://docs.oracle.com/javase/8/docs/api/"),t(a)])]),n("p",null,[s("JDK17在线文档："),n("a",k,[s("https://docs.oracle.com/en/java/javase/17/docs/api/index.html"),t(a)])]),m])}const y=e(i,[["render",v],["__file","JavaSE-CommonClass.html.vue"]]);export{y as default};
