import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-0ab03366.js";const t={},p=e(`<h1 id="java-se-面向对象" tabindex="-1"><a class="header-anchor" href="#java-se-面向对象" aria-hidden="true">#</a> Java SE 面向对象</h1><h3 id="第05章-面向对象基础" tabindex="-1"><a class="header-anchor" href="#第05章-面向对象基础" aria-hidden="true">#</a> 第05章--面向对象基础</h3><h4 id="_1-访问修饰符" tabindex="-1"><a class="header-anchor" href="#_1-访问修饰符" aria-hidden="true">#</a> 1. 访问修饰符</h4><table><thead><tr><th style="text-align:center;">访问级别</th><th style="text-align:center;">访问控制修饰符</th><th style="text-align:center;">同类</th><th style="text-align:center;">同包</th><th style="text-align:center;">子类</th><th style="text-align:center;">不同包</th></tr></thead><tbody><tr><td style="text-align:center;">公开</td><td style="text-align:center;">public</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">受保护</td><td style="text-align:center;">protect</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">×</td></tr><tr><td style="text-align:center;">默认</td><td style="text-align:center;">无</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td></tr><tr><td style="text-align:center;">私有</td><td style="text-align:center;">private</td><td style="text-align:center;">√</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td></tr></tbody></table><h4 id="_2-方法" tabindex="-1"><a class="header-anchor" href="#_2-方法" aria-hidden="true">#</a> 2. 方法</h4><p><strong>方法重载</strong></p><p>Java允许同一个类中同名方法的存在，但形参列表不同</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可变参数</strong></p><p>Java允许将同一类的中多个同名同功能但参数个数不同的方法封装成一个方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> numbers<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>int... 表示可变参数，类型是int，参数个数可以是0到多个参数</p><p>使用可变参数时可以当做数组使用，即numbers可以当做数组</p><p>可变参数的实参可以是数组，即可以传入数组</p><p>可变参数和普通参数一起放在形参列表里，要保证可变参数放在最后</p><p>一个形参列表只能放一个可变参数</p></blockquote><p><strong>作用域</strong></p><table><thead><tr><th>变量类型</th><th>作用域</th><th>有无初值</th><th>作用范围</th><th>访问修饰符</th></tr></thead><tbody><tr><td>全局变量</td><td>整个类体</td><td>有默认值</td><td>本类使用，或通过对象调用在其他类使用</td><td>可加</td></tr><tr><td>局部变量</td><td>成员方法内</td><td>无初值，必须赋值后才能使用</td><td>只能在本类对应的方法中使用</td><td>不可加</td></tr></tbody></table><blockquote><p>同一个作用域中的变量不能重名</p><p>不同作用域的全局变量和局部变量可以重名，遵循就近原则</p></blockquote><h4 id="_3-构造方法" tabindex="-1"><a class="header-anchor" href="#_3-构造方法" aria-hidden="true">#</a> 3. 构造方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token comment">// 无参构造</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// 有参构造</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>创建对象时，系统会自动调用该类的构造方法</p><p>如果没有定义构造方法，系统会自动生成一个无参默认构造方法</p><p>用户定义了构造方法后，系统默认的构造方法会被覆盖，若使用则需显式定义，即重新定义一个无参构造方法</p><p>一个类可以有多个构造器，即构造器重载</p></blockquote><h4 id="_4-this关键字" tabindex="-1"><a class="header-anchor" href="#_4-this关键字" aria-hidden="true">#</a> 4. this关键字</h4><p>this可以用来访问本类的属性，并且用于区分当前类的属性和局部变量</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//调用f1的第一种方法</span>
        <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//调用f1的第二种方法</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>this不能在类定义的外部使用，只能在类定义中的方法中使用</p><p>this代表当前对象，即哪个对象被调用，this就代表哪个对象</p><p>this访问本类的属性和方法，若找不到则会在父类中继续查找</p></blockquote><hr><h3 id="第06章-面向对象进阶" tabindex="-1"><a class="header-anchor" href="#第06章-面向对象进阶" aria-hidden="true">#</a> 第06章--面向对象进阶</h3><h4 id="_1-封装" tabindex="-1"><a class="header-anchor" href="#_1-封装" aria-hidden="true">#</a> 1. 封装</h4><p>属性私有化并提供getter和setter</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
	<span class="token comment">// getter和setter</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-继承" tabindex="-1"><a class="header-anchor" href="#_2-继承" aria-hidden="true">#</a> 2. 继承</h4><p>子类只能继承一个父类，单继承机制</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//父类Person</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//子类Student 继承Person类</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>子类继承父类的所有属性和方法</p><p>非私有属性和方法可以在子类直接访问，私有属性和方法不能在子类直接访问，要通过父类公共方法访问</p><p>子类必须调用父类的构造器，完成父类的初始化</p><p>创建子类对象时，任一子类构造器都会先调用父类的无参构造器，若父类没有无参构造器则需要通过super指用特定构造器</p><p>super() 和 this() 都只能放在构造器的第一行，因此两者不能共存在同一个构造器中</p><p>父类构造器的调用不限于直接父类，而是一直追溯到最高父类即Object类</p></blockquote><h4 id="_3-方法重写" tabindex="-1"><a class="header-anchor" href="#_3-方法重写" aria-hidden="true">#</a> 3. 方法重写</h4><p>子类的一个方法与父类的一个方法名称，返回类型，参数一样，即子类覆盖父类方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;A类的f1()被调用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token comment">//子类重写f1()方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;B类的f1()被调用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>子类方法的参数，方法名要和父类完全一致，返回类型一致或者是父类返回类型的子类</p><p>子类不能缩小父类的方法的访问权限</p></blockquote><h4 id="_4-super关键字" tabindex="-1"><a class="header-anchor" href="#_4-super关键字" aria-hidden="true">#</a> 4. super关键字</h4><blockquote><p>访问父类属性和方法用 super.属性 super.方法；</p><p>访问父类的属性和方法，但不能访问私有属性和方法</p><p>当子类有和父类的属性和方法重名时，访问父类需要用super</p><p>super访问不限于直接父类，可以直接追溯到顶级父类，若有重名则遵循就近原则</p></blockquote><h4 id="_5-多态" tabindex="-1"><a class="header-anchor" href="#_5-多态" aria-hidden="true">#</a> 5. 多态</h4><p>一个对象的编译类型和运行类型可以不一致，等号 &#39;=&#39; 左边的是编译类型，等号 &#39;=&#39; 右边的是运行类型</p><p><strong>向上转型</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//父类引用指向子类对象</span>
<span class="token comment">//可以调用父类的所有成员，但不能调用子类的特有成员</span>
<span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">People</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">People</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>向下转型</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//向下转型只能强转父类引用，不能强转父类对象，且父类引用必须指向当前目标对象的类型</span>
<span class="token comment">//可以调用子类的所有成员</span>
<span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span>p1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>动态绑定机制</strong></p><blockquote><p>调用对象方法的时，该对象会和运行类型绑定，即从运行类型出发</p><p>调用对象属性时，没有动态绑定机制，哪里声明哪里使用</p></blockquote><p><strong>instanceof</strong></p><p>判断对象的类型是否是xx类型或xx的子类型，返回值为布尔值</p><h4 id="_6-和-equals的区别" tabindex="-1"><a class="header-anchor" href="#_6-和-equals的区别" aria-hidden="true">#</a> 6. == 和 equals的区别</h4><p><strong>==</strong></p><p>判断基本类型，判断值是否相等，判断引用类型，判断地址是否相等，即是否是同一个对象</p><p><strong>equals()</strong></p><p>Object类的方法，用于判断引用类型，默认判断地址是否相等</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//重写equals方法</span>
<span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token keyword">double</span> b<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">A</span> a1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">return</span> a <span class="token operator">==</span> a1<span class="token punctuation">.</span>a <span class="token operator">&amp;&amp;</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>b<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>String类型的equals()方法重写过，用于比较值是否相等</p></blockquote><p><strong>重写 equals() 时必须重写 hashCode()方法</strong></p><p>两个相等的对象的 <code>hashCode</code> 值必须相等。即如果 <code>equals</code> 方法判断两个对象是相等的，那这两个对象的 <code>hashCode</code> 值也要相等。</p><p>如果重写 <code>equals()</code> 时没有重写 <code>hashCode()</code> 方法的话就可能会导致 <code>equals</code> 方法判断是相等的两个对象，<code>hashCode</code> 值却不相等。</p><ul><li><code>equals</code> 方法判断两个对象是相等的，那这两个对象的 <code>hashCode</code> 值也要相等</li><li>两个对象有相同的 <code>hashCode</code> 值，他们也不一定是相等的（哈希碰撞）</li></ul><hr><h3 id="第07章-面向对象高级" tabindex="-1"><a class="header-anchor" href="#第07章-面向对象高级" aria-hidden="true">#</a> 第07章--面向对象高级</h3><h4 id="_1-static关键字" tabindex="-1"><a class="header-anchor" href="#_1-static关键字" aria-hidden="true">#</a> 1. static关键字</h4><p><code>static</code> 修饰的变量叫静态变量，是该类所有对象共享的变量，任何一个该类的对象对其访问或修改，均作用在这个变量上</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//访问时使用类名.类变量名</span>
<span class="token class-name">A</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>static</code> 修饰的方法叫静态方法也叫类方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token comment">//访问通过类名.方法名或者对象.方法名 调用</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>类方法中无this和super参数</p><p>类方法中只能访问静态变量或静态方法</p><p>普通成员方法可以访问静态和非静态的变量和方法</p></blockquote><h4 id="_2-代码块" tabindex="-1"><a class="header-anchor" href="#_2-代码块" aria-hidden="true">#</a> 2. 代码块</h4><p>代码块又称初始化块，属于类的中成员，类似于方法，将逻辑语句封装到方法体中，用 { } 围起来</p><p>代码块不用通过对象或类的显式调用，而是加载类的时候隐式调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
    <span class="token comment">//静态代码块</span>
    <span class="token keyword">static</span><span class="token punctuation">{</span>
      	<span class="token comment">//语句</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//普通代码块</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//语句</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>static修饰的是静态代码块，作用是对类进行初始化，随着类的加载而执行，且只会执行一次</p></li><li><p>类加载的时机：</p><ul><li><p>创建对象实例（new）</p></li><li><p>创建子类对象实例时，父类也会被加载</p></li><li><p>使用类的静态成员时（静态属性，静态方法）</p></li></ul></li><li><p>普通代码块，在创建对象实例时，会被隐式调用，创建一次调用一次</p></li><li><p>只使用类的静态成员时，普通代码块不会被执行</p></li><li><p>静态代码块只能调用静态成员，普通代码块可以调用任意成员</p></li><li><p>创建对象时，在一个类的调用顺序：</p><ol><li>调用静态代码块和静态属性初始化</li><li>调用普通代码块和普通属性初始化</li><li>调用构造方法（隐含了super() 和调用普通代码块，所以优先级最低）</li></ol></li><li><p>当有父类和子类时，调用顺序：</p><ol><li>父类的静态代码块和静态属性</li><li>子类的静态代码块和静态属性</li><li>父类的普通代码块和普通属性</li><li>父类的构造方法</li><li>子类的普通代码块和普通属性</li><li>子类的构造方法</li></ol></li></ol><h4 id="_4-final关键字" tabindex="-1"><a class="header-anchor" href="#_4-final关键字" aria-hidden="true">#</a> 4. final关键字</h4><p><strong>final的使用</strong></p><blockquote><p>final修饰类，则此类不能被别的类所继承</p><p>final修饰方法，则此方法不可被重写</p><p>final修饰属性，则此属性不可被修改</p><p>final修饰局部变量，则此局部变量不能被修改</p></blockquote><p><strong>final的特点</strong></p><ol><li><p>final 修饰的属性又叫常量，一般用XX_XX_XX命名</p></li><li><p>final 修饰的属性必须在定义的时候赋初值，且之后不能修改</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//三种赋值位置</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token comment">//1. 定义时赋值</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NUM_A</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token comment">//2. 构造器中赋值</span>
	<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NUM_B</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token constant">NUM_B</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//3. 代码块中赋值</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NUM_C</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
        <span class="token constant">NUM_C</span> <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果 final 修饰的属性是静态的，则只能在定义时和静态代码块中赋值，不能在构造器中赋值</p></li><li><p>如果不是 final类，但是含有 final 方法，该方法不能被重写但可以被继承</p></li><li><p>final 修饰的类，该类的方法默认是 final 方法</p></li><li><p>final 不能修饰构造器</p></li><li><p>final 和 static 搭配修饰效率更高，不会导致类加载</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">NUM</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//不会进行类加载就可以直接访问NUM</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span><span class="token constant">NUM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="_5-抽象类" tabindex="-1"><a class="header-anchor" href="#_5-抽象类" aria-hidden="true">#</a> 5. 抽象类</h4><p><code>abstract</code> 修饰的类就是抽象类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//抽象类</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token comment">//构造器</span>
    <span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">//抽象方法(没有方法体)</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>抽象类不能被实例化，即不可以new一个对象</p><p>abstract只能修饰类和方法</p><p>抽象方法不能使用private final和static修饰</p><p>如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己本身也是抽象类</p></blockquote><h4 id="_6-接口" tabindex="-1"><a class="header-anchor" href="#_6-接口" aria-hidden="true">#</a> 6. 接口</h4><p>使用 <code>interface</code> 定义接口，使用 <code>implement</code> 实现接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//接口的定义</span>
<span class="token keyword">interface</span> <span class="token class-name">IA</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">//接口的使用</span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">IA</span><span class="token punctuation">{</span>
	<span class="token comment">//必须实现接口的抽象方法;	</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>接口不能被实例化</p></li><li><p>接口中所有方法都是public方法，接口中的抽象方法可以不用abstract修饰</p></li><li><p>一个普通类实现接口，需要将该接口的所有抽象方法都实现</p></li><li><p>抽象类实现接口，可以不实现接口方法</p></li><li><p>一个类可以同时实现多个接口</p></li><li><p>接口中的属性若是pubic static final的，则属性必须初始化</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">IA</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//必须初始化</span>
    <span class="token comment">//相当于 public static final int a = 1;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接口不能继承类，接口可以继承接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">IA</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">IB</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//IC接口继承IA,IB</span>
<span class="token keyword">interface</span> <span class="token class-name">IC</span> <span class="token keyword">extends</span> <span class="token class-name">IA</span><span class="token punctuation">,</span><span class="token constant">IB</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="_7-内部类" tabindex="-1"><a class="header-anchor" href="#_7-内部类" aria-hidden="true">#</a> 7. 内部类</h4><p><strong>局部内部类</strong></p><p>定义在外部类的局部位置，如方法中，代码块中，有类名</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//外部类</span>
<span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//局部内部类</span>
        <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>
            <span class="token comment">//可以直接访问外部类的所有成员包括私有的</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
        <span class="token comment">//若要访问内部类则需要创建内部类对象，然后调用其方法</span>
        <span class="token class-name">Inner</span> i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        i1<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>局部内部类本质仍是一个类，可以访问外部类的所有成员包括私有的</p><p>局部内部类只能是默认或者是final的（使其不能被继承）</p><p>作用域在其方法内或代码块内</p><p>外部类访问内部类，需要在方法中可以创建内部类对象，然后调用其方法</p><p>外部其他类不能访问局部内部类（局部内部类的地位是局部变量）</p><p>如果外部类和局部内部类的成员重名，默认遵循就近原则</p><p>如果想访问外部类的成员则可以使用（外部类名 . this.成员）去访问</p></blockquote><p><strong>匿名内部类</strong></p><p>定义在外部类的局部位置，如方法中，代码块中，无类名</p><ul><li><p>基于接口的匿名内部类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">IA</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//匿名内部类</span>
        <span class="token class-name">IA</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;匿名内部类实现test方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        dog<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>详解：</p><p>dog的编译类型是接口类型即 IA，运行类型是匿名内部类，底层会创建一个Outer$1的对象实现IA接口<br> 匿名内部类使用一次之后就不能在使用了，使用后类消失但是类所创建的对象存在</p></blockquote></li><li><p>基于类的匿名内部类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> people<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//匿名内部类</span>
        people p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">people</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;匿名内部类重写test方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        p1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以直接访问外部类的成员，包括私有的</p><p>不能添加访问修饰符，他的地位只是一个局部变量</p><p>外部其他类不能访问匿名内部类</p><p>如果外部类和局部内部类的成员重名，默认遵循就近原则</p><p>如果想访问外部类的成员则可以使用(外部类名 . this.成员)去访问</p></blockquote></li></ul><p><strong>成员内部类</strong></p><p>定义在外部类中，相当于一个成员变量，有类名</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Outer01</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
	
    <span class="token comment">//成员内部类</span>
    <span class="token keyword">class</span> <span class="token class-name">Inner01</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//可以访问私有属性</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//创建成员内部类的对象实例</span>
        <span class="token class-name">Inner01</span> inner01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//调用say方法</span>
        inner01<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>成员内部类可以访问外部类的成员包含私有的</p><p>可以添加任意的访问修饰符，他的地位就是一个成员</p><p>作用域为整个类体</p><p>访问外部类的成员则可以使用(外部类名 . this.成员)去访问</p><p>外部类和局部内部类的成员重名，默认遵循就近原则</p><p>外部类使用成员内部类需要先创建成员内部类对象再调用其方法或属性</p></blockquote><p><strong>静态内部类</strong></p><p>定义在外部类的成员位置用static修饰的成员内部类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Outer01</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span><span class="token comment">//属性</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token comment">//成员内部类</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner01</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//可以访问私有属性</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;say方法&quot;</span> <span class="token operator">+</span> name<span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//f1方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//创建成员内部类的对象实例</span>
        <span class="token class-name">Inner01</span> inner01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//调用say方法</span>
        inner01<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>静态内部类与成员内部类只有static的区别，其他特点都相同</p><p>可以直接访问外部类的所有成员，包含私有的，不能直接访问非静态成员</p><p>外部类访问静态内部类需要创建对象后再访问</p></blockquote><hr><h4 id="_8-枚举" tabindex="-1"><a class="header-anchor" href="#_8-枚举" aria-hidden="true">#</a> 8. 枚举</h4><p>enum枚举类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Season</span><span class="token punctuation">{</span>
    <span class="token comment">//将对象写在最前面，中间用逗号隔开，最后一个用分号结束</span>
    <span class="token comment">//对象名(&quot;构造器属性&quot;)</span>
    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">&quot;春天&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;温暖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">&quot;夏天&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;炎热&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">&quot;秋天&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;凉爽&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">&quot;冬天&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;寒冷&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//属性</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>
    <span class="token comment">//构造器私有化</span>
    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//可以保留get方法，需要去掉set方法</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用enum后不能继承其他类，因为enum会隐式继承</p><p>enum和普通类一样可以实现接口</p></blockquote><p><strong>常用方法</strong></p><p><code>ordinal()</code> 输出当前枚举对象的次序</p><p><code>values()</code> 返回一个含所有枚举对象的数组</p><p><code>valueOf()</code> 将字符串转化成枚举对象</p><p><code>compareTo()</code> 比较两个枚举变量，比较编号，返回值是前者编号减去后者编号</p><h4 id="_9-注解" tabindex="-1"><a class="header-anchor" href="#_9-注解" aria-hidden="true">#</a> 9. 注解</h4><p><code>@Override</code> 用于检测被标记的方法为有效的重写方法，如果不是，则报编译错误！</p><p><code>@Deprecated</code> 用于表示被标记的数据已经过时，不推荐使用。</p><p><code>@SuppressWarnings</code> 抑制编译警告。</p><h4 id="_10-异常" tabindex="-1"><a class="header-anchor" href="#_10-异常" aria-hidden="true">#</a> 10. 异常</h4><p>所有的异常都有一个共同的祖先 <code>java.lang</code> 包中的 <code>Throwable</code> 类。<code>Throwable</code> 类有两个重要的子类：</p><ul><li><code>Exception</code>：程序本身可以处理的异常，可以通过 <code>catch</code> 来进行捕获</li><li><code>Error</code>：程序无法处理的错误 ，不能通过 <code>catch</code> 来进行捕获。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止</li></ul><p><strong>五大运行异常</strong></p><ul><li><p><code>NullPointerException</code> 空指针异常</p></li><li><p><code>ArithmeticException</code> 数学运算异常</p></li><li><p><code>ArrayIndexOutOfBoundsException</code> 数组越界异常</p></li><li><p><code>ClassCastException</code> 对象强转为不是子类对象实例抛出的异常</p></li><li><p><code>NumberFormatException</code> 数字格式不正常异常</p></li></ul><p><strong>异常处理方式</strong></p><ul><li><p>throws</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//使用throws 将异常抛出，让调用f1方法的调用者处理</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
    <span class="token comment">//此为编译异常</span>
    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;d://aa.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>子类重写父类方法时，子类抛出的异常要和父类的一致或者是父类异常类型的子类型</p><p>throws后面也可以是异常列表，即可以抛出多个异常 用逗号分割</p></blockquote></li><li><p>try - catch - finally</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
    <span class="token comment">//可能会出现异常</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//当出现异常时进行捕获，封装成Exception对象e传递给catch</span>
<span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">//无论有没有异常finally 始终要运行</span>
    <span class="token comment">//通常用于释放资源代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>finally 不是必须的</p><p>如果异常发生了则异常后面的代码不会执行，直接进入 catch 块</p><p>如果异常没有发生则顺序执行 try，不会进入 catch 块</p><p>如果 try 中可能有多个异常，可以使用多个 catch 分别捕获不同的异常（子类异常写在前，父类异常写在后）</p><p>finally 语句块中不要使用 return，当 try 语句和 finally 语句中都有 return 语句时，try 语句块中的 return 语句会被忽略</p></blockquote></li></ul>`,121),c=[p];function o(l,i){return s(),a("div",null,c)}const k=n(t,[["render",o],["__file","JavaSE-OOP.html.vue"]]);export{k as default};
