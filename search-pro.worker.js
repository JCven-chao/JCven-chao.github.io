const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const l of e.keys())if(l===F){const a=o[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=u;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=o[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=o[f+y]+ +b,A=o[f+y+1]+1,w=o[p+y]+1,L=o[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}W(e.get(l),t,s,n,o,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const l=new Map;l.set(u.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(u),e=l}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const l of Object.keys(u)){const a=u[l],h=e._fieldIds[l],m=o.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:N(n.boost,g)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,o,u,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f==null||f.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,o,u,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,o,u,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(u),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=k(u),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(u,d)),u=l,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),l=u.includes("#"),[a,h]=u.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>o.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(o.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in o)for(const c of o.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":182,\"nextId\":182,\"documentIds\":{\"0\":\"v-184f4da6\",\"1\":\"v-7c80db8b\",\"2\":\"v-15054f24\",\"3\":\"v-15054f24#目录\",\"4\":\"v-c9bbfba2\",\"5\":\"v-c9bbfba2#暂无项目-哈哈哈\",\"6\":\"v-d440f426\",\"7\":\"v-d440f426#暂无链接-哈哈哈\",\"8\":\"v-3df49b4a\",\"9\":\"v-3df49b4a#第01章-java简介\",\"10\":\"v-3df49b4a#_1-jdk结构\",\"11\":\"v-3df49b4a#_2-javaapi文档\",\"12\":\"v-3df49b4a#第02章-基础语法\",\"13\":\"v-3df49b4a#_1-注释\",\"14\":\"v-3df49b4a#_2-运算符\",\"15\":\"v-3df49b4a#_3-数据类型\",\"16\":\"v-3df49b4a#第03章-流程控制\",\"17\":\"v-3df49b4a#_1-switch分支控制\",\"18\":\"v-3df49b4a#_2-for循环\",\"19\":\"v-3df49b4a#_3-break\",\"20\":\"v-3df49b4a#_4-continue\",\"21\":\"v-3df49b4a#_5-return\",\"22\":\"v-3df49b4a#第04章-数组\",\"23\":\"v-3df49b4a#_1-数组的定义\",\"24\":\"v-3df49b4a#_2-数组的遍历\",\"25\":\"v-662e039c\",\"26\":\"v-662e039c#第08章-常用类\",\"27\":\"v-662e039c#_1-包装类\",\"28\":\"v-662e039c#_2-string类\",\"29\":\"v-662e039c#_3-arrays类\",\"30\":\"v-662e039c#_4-system类\",\"31\":\"v-662e039c#_5-math类\",\"32\":\"v-662e039c#_6-日期类\",\"33\":\"v-49a90539\",\"34\":\"v-49a90539#第05章-面向对象基础\",\"35\":\"v-49a90539#_1-访问修饰符\",\"36\":\"v-49a90539#_2-方法\",\"37\":\"v-49a90539#_3-构造方法\",\"38\":\"v-49a90539#_4-this关键字\",\"39\":\"v-49a90539#第06章-面向对象进阶\",\"40\":\"v-49a90539#_1-封装\",\"41\":\"v-49a90539#_2-继承\",\"42\":\"v-49a90539#_3-方法重写\",\"43\":\"v-49a90539#_4-super关键字\",\"44\":\"v-49a90539#_5-多态\",\"45\":\"v-49a90539#_6-和-equals的区别\",\"46\":\"v-49a90539#第07章-面向对象高级\",\"47\":\"v-49a90539#_1-static关键字\",\"48\":\"v-49a90539#_2-代码块\",\"49\":\"v-49a90539#_4-final关键字\",\"50\":\"v-49a90539#_5-抽象类\",\"51\":\"v-49a90539#_6-接口\",\"52\":\"v-49a90539#_7-内部类\",\"53\":\"v-49a90539#_8-枚举\",\"54\":\"v-49a90539#_9-注解\",\"55\":\"v-49a90539#_10-异常\",\"56\":\"v-40770c77\",\"57\":\"v-40770c77#_1-简介\",\"58\":\"v-40770c77#_2-快速入门\",\"59\":\"v-40770c77#_3-sqlsessionfactory工具类\",\"60\":\"v-40770c77#_4-sql传参-输入\",\"61\":\"v-40770c77#_1-与-的区别\",\"62\":\"v-40770c77#_2-单个简单类型参数\",\"63\":\"v-40770c77#_3-多个简单类型参数\",\"64\":\"v-40770c77#_4-map类型参数\",\"65\":\"v-40770c77#_5-实体类型参数\",\"66\":\"v-40770c77#_5-sql传参-输出\",\"67\":\"v-40770c77#_1-返回值说明\",\"68\":\"v-40770c77#_2-单个简单类型\",\"69\":\"v-40770c77#_3-返回map类型\",\"70\":\"v-40770c77#_4-返回实体类对象\",\"71\":\"v-40770c77#_5-返回list类型\",\"72\":\"v-40770c77#_6-返回主键值\",\"73\":\"v-40770c77#_6-动态sql\",\"74\":\"v-40770c77#_1-if-where标签\",\"75\":\"v-40770c77#_2-set标签\",\"76\":\"v-40770c77#_3-trim标签\",\"77\":\"v-40770c77#_4-choose-when-otherwise标签\",\"78\":\"v-40770c77#_5-foreach标签\",\"79\":\"v-40770c77#_6-sql-include标签\",\"80\":\"v-40770c77#_7-多表映射\",\"81\":\"v-40770c77#_1-多对一\",\"82\":\"v-40770c77#_2-一对多\",\"83\":\"v-40770c77#_8-mybatis缓存\",\"84\":\"v-40770c77#_1-一级缓存\",\"85\":\"v-40770c77#_2-二级缓存\",\"86\":\"v-40770c77#_9-逆向工程\",\"87\":\"v-40770c77#_10-pagehelper分页插件\",\"88\":\"v-40770c77#_11-注解开发\",\"89\":\"v-ef2f5c72\",\"90\":\"v-ef2f5c72#_1-简介\",\"91\":\"v-ef2f5c72#_2-常见命令\",\"92\":\"v-ef2f5c72#_3-语法规则及分类\",\"93\":\"v-ef2f5c72#_4-数据类型\",\"94\":\"v-ef2f5c72#_1-数值类型\",\"95\":\"v-ef2f5c72#_2-字符串类型\",\"96\":\"v-ef2f5c72#_3-日期类型\",\"97\":\"v-ef2f5c72#_5-ddl数据定义语言\",\"98\":\"v-ef2f5c72#_1-ddl数据库操作\",\"99\":\"v-ef2f5c72#_2-ddl表操作\",\"100\":\"v-ef2f5c72#_6-dml数据操作语言\",\"101\":\"v-ef2f5c72#_1-dml数据操作\",\"102\":\"v-ef2f5c72#_7-dql数据查询语言\",\"103\":\"v-ef2f5c72#_1-基本查询\",\"104\":\"v-ef2f5c72#_2-条件查询\",\"105\":\"v-ef2f5c72#_3-聚合函数\",\"106\":\"v-ef2f5c72#_4-分组查询\",\"107\":\"v-ef2f5c72#_5-排序查询\",\"108\":\"v-ef2f5c72#_6-分页查询\",\"109\":\"v-ef2f5c72#_7-执行顺序\",\"110\":\"v-ef2f5c72#_8-dcl数据控制语言\",\"111\":\"v-ef2f5c72#_1-用户管理\",\"112\":\"v-ef2f5c72#_2-权限控制\",\"113\":\"v-ef2f5c72#_9-函数\",\"114\":\"v-ef2f5c72#_1-字符串函数\",\"115\":\"v-ef2f5c72#_2-数值函数\",\"116\":\"v-ef2f5c72#_3-日期函数\",\"117\":\"v-ef2f5c72#_4-流程函数\",\"118\":\"v-ef2f5c72#_10-约束\",\"119\":\"v-ef2f5c72#_1-常用约束\",\"120\":\"v-ef2f5c72#_2-外键约束\",\"121\":\"v-ef2f5c72#_11-多表查询\",\"122\":\"v-ef2f5c72#_1-内连接\",\"123\":\"v-ef2f5c72#_2-外连接\",\"124\":\"v-ef2f5c72#_3-自连接\",\"125\":\"v-ef2f5c72#_4-联合查询\",\"126\":\"v-ef2f5c72#_5-子查询\",\"127\":\"v-ef2f5c72#_12-事务\",\"128\":\"v-ef2f5c72#_1-事务特性\",\"129\":\"v-ef2f5c72#_2-事务操作\",\"130\":\"v-ef2f5c72#_3-并发事务问题\",\"131\":\"v-ef2f5c72#_4-事务隔离级别\",\"132\":\"v-724bb024\",\"133\":\"v-724bb024#_1-spring简介\",\"134\":\"v-724bb024#_2-快速入门\",\"135\":\"v-724bb024#_3-基于xml管理bean\",\"136\":\"v-724bb024#_1-bean的获取\",\"137\":\"v-724bb024#_2-依赖注入\",\"138\":\"v-724bb024#_3-bean的作用域\",\"139\":\"v-724bb024#_4-bean的生命周期\",\"140\":\"v-724bb024#_5-factorybean\",\"141\":\"v-724bb024#_6-基于xml的自动装配\",\"142\":\"v-724bb024#_4-基于注解管理bean\",\"143\":\"v-724bb024#_1-基于注解管理\",\"144\":\"v-724bb024#_2-常用注解\",\"145\":\"v-724bb024#_3-注解详解\",\"146\":\"v-724bb024#_5-aop面向切面编程\",\"147\":\"v-724bb024#_1-步骤\",\"148\":\"v-724bb024#_2-切入点表达式\",\"149\":\"v-724bb024#_3-通知类型\",\"150\":\"v-724bb024#_6-事务\",\"151\":\"v-724bb024#_1-事务概述\",\"152\":\"v-724bb024#_2-基于注解的声明式事务\",\"153\":\"v-724bb024#_3-事务的隔离级别\",\"154\":\"v-425d5d5c\",\"155\":\"v-425d5d5c#_1-介绍\",\"156\":\"v-425d5d5c#_2-快速入门\",\"157\":\"v-425d5d5c#_3-接受数据\",\"158\":\"v-425d5d5c#_1-设置访问路径\",\"159\":\"v-425d5d5c#_2-http请求方式\",\"160\":\"v-425d5d5c#_3-param和json的比较\",\"161\":\"v-425d5d5c#_4-param参数接收\",\"162\":\"v-425d5d5c#_5-路径参数接收\",\"163\":\"v-425d5d5c#_6-json参数接收\",\"164\":\"v-425d5d5c#_7-cookie数据接收\",\"165\":\"v-425d5d5c#_8-请求头数据接收\",\"166\":\"v-425d5d5c#_9-原生api对象获取\",\"167\":\"v-425d5d5c#_4-响应数据\",\"168\":\"v-425d5d5c#_1-返回数据\",\"169\":\"v-425d5d5c#_2-转发与重定向\",\"170\":\"v-425d5d5c#_3-返回json数据\",\"171\":\"v-425d5d5c#_5-restful风格\",\"172\":\"v-425d5d5c#_1-设计规范\",\"173\":\"v-425d5d5c#_2-restful示例\",\"174\":\"v-425d5d5c#_6-全局异常处理\",\"175\":\"v-425d5d5c#_7-拦截器\",\"176\":\"v-425d5d5c#_8-参数校验\",\"177\":\"v-586621a9\",\"178\":\"v-20602fe0\",\"179\":\"v-8a64901e\",\"180\":\"v-663d3fc4\",\"181\":\"v-274e3946\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,1],\"1\":[1,2],\"2\":[1],\"3\":[1,3],\"4\":[1],\"5\":[2],\"6\":[1],\"7\":[2],\"8\":[3,2],\"9\":[2],\"10\":[2,12],\"11\":[2,14],\"12\":[2],\"13\":[2,26],\"14\":[2,65],\"15\":[2,53],\"16\":[2],\"17\":[2,18],\"18\":[2,24],\"19\":[2,7],\"20\":[2,9],\"21\":[2,5],\"22\":[2],\"23\":[2,34],\"24\":[2,30],\"25\":[3],\"26\":[2,14],\"27\":[2,54],\"28\":[2,93],\"29\":[2,51],\"30\":[2,47],\"31\":[2,102],\"32\":[2,101],\"33\":[3],\"34\":[2],\"35\":[2,16],\"36\":[2,47],\"37\":[2,21],\"38\":[2,18],\"39\":[2],\"40\":[2,19],\"41\":[2,25],\"42\":[2,23],\"43\":[2,11],\"44\":[2,31],\"45\":[4,59],\"46\":[2],\"47\":[2,22],\"48\":[2,49],\"49\":[2,60],\"50\":[2,23],\"51\":[2,41],\"52\":[2,106],\"53\":[2,48],\"54\":[2,10],\"55\":[2,81],\"56\":[2,2],\"57\":[2,43],\"58\":[2,161],\"59\":[2,65],\"60\":[3],\"61\":[4,18],\"62\":[2,35],\"63\":[2,24],\"64\":[2,31],\"65\":[2,29],\"66\":[3,13],\"67\":[2,87],\"68\":[2,30],\"69\":[2,28],\"70\":[2,42],\"71\":[2,47],\"72\":[2,98],\"73\":[2],\"74\":[3,49],\"75\":[2,38],\"76\":[2,63],\"77\":[4,46],\"78\":[2,59],\"79\":[3,22],\"80\":[2],\"81\":[2,85],\"82\":[2,75],\"83\":[2,12],\"84\":[2,6],\"85\":[2,10],\"86\":[2,144],\"87\":[2,70],\"88\":[2,37],\"89\":[2,2],\"90\":[2,20],\"91\":[2,13],\"92\":[2,29],\"93\":[2],\"94\":[2,32],\"95\":[2,29],\"96\":[2,41],\"97\":[2],\"98\":[2,31],\"99\":[2,64],\"100\":[2],\"101\":[2,46],\"102\":[2],\"103\":[2,26],\"104\":[2,54],\"105\":[2,24],\"106\":[2,31],\"107\":[2,23],\"108\":[2,23],\"109\":[2,25],\"110\":[2],\"111\":[2,27],\"112\":[2,40],\"113\":[2],\"114\":[2,39],\"115\":[2,16],\"116\":[2,27],\"117\":[2,26],\"118\":[2],\"119\":[2,69],\"120\":[2,50],\"121\":[2,7],\"122\":[2,25],\"123\":[2,23],\"124\":[2,26],\"125\":[2,21],\"126\":[2,87],\"127\":[2],\"128\":[2,16],\"129\":[2,19],\"130\":[2,11],\"131\":[2,21],\"132\":[2],\"133\":[2,47],\"134\":[2,69],\"135\":[2],\"136\":[2,35],\"137\":[2,212],\"138\":[2,41],\"139\":[2,83],\"140\":[2,45],\"141\":[2,33],\"142\":[2],\"143\":[2,83],\"144\":[2,54],\"145\":[2,90],\"146\":[2,29],\"147\":[2,54],\"148\":[2,54],\"149\":[2,107],\"150\":[2],\"151\":[2,52],\"152\":[2,65],\"153\":[2,52],\"154\":[2],\"155\":[2,56],\"156\":[2,105],\"157\":[2],\"158\":[2,62],\"159\":[2,44],\"160\":[2,58],\"161\":[2,82],\"162\":[2,25],\"163\":[2,51],\"164\":[2,20],\"165\":[2,46],\"166\":[2,100],\"167\":[2],\"168\":[2,16],\"169\":[2,29],\"170\":[2,36],\"171\":[2,25],\"172\":[2,39],\"173\":[2,112],\"174\":[2,69],\"175\":[2,88],\"176\":[2,189],\"177\":[1],\"178\":[1],\"179\":[1],\"180\":[1],\"181\":[1]},\"averageFieldLength\":[2.0109890109890096,41.004556462607255],\"storedFields\":{\"0\":{\"h\":\"关于作者\",\"t\":[\"一个零零后\"]},\"1\":{\"h\":\"我的随笔\",\"t\":[\"这是我的随笔，暂时还未添加内容\"]},\"2\":{\"h\":\"个人笔记目录\"},\"3\":{\"h\":\"目录\",\"t\":[\"JavaSE 笔记\",\"MySQL 笔记\"]},\"4\":{\"h\":\"\"},\"5\":{\"h\":\"暂无项目 哈哈哈\"},\"6\":{\"h\":\"\"},\"7\":{\"h\":\"暂无链接 哈哈哈\"},\"8\":{\"h\":\"Java SE 基础语法\",\"t\":[\"Java-logo\"]},\"9\":{\"h\":\"第01章--Java简介\"},\"10\":{\"h\":\"1. JDK结构\",\"t\":[\"JDK 是 Java 语言的软件开发工具包（SDK）\",\"JRE 指 Java 运行环境，在JRE里面有JVM和lib（类库）\",\"JVM 是Java虚拟机\"]},\"11\":{\"h\":\"2. JavaAPI文档\",\"t\":[\"JDK8在线文档：https://docs.oracle.com/javase/8/docs/api/\",\"JDK17在线文档：https://docs.oracle.com/en/java/javase/17/docs/api/index.html\"]},\"12\":{\"h\":\"第02章--基础语法\"},\"13\":{\"h\":\"1. 注释\",\"t\":[\"单行注释：通常用于解释方法内某单行代码的作用\",\"多行注释：通常用于解释一段代码的作用\",\"文档注释：通常用于生成 Java 开发文档\",\"/** * 文档注释 * @author JCven * @version 1.0 */ \",\"文档注释可以被 JDK 提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档\",\"使用 cmd 控制台输入javadoc -d mydoc -author -version HelloWorld.java\"]},\"14\":{\"h\":\"2. 运算符\",\"t\":[\"自增运算符\",\"a = i++ 是先赋值再自增\",\"a = ++i 是先自增再赋值\",\"位运算符\",\"按照二进制，以补码的形式运算\",\"按位与 &：两位全为1是结果为1，否则为0 按位或 |：两位有1则结果为1，否则为0 按位异或 ^：两位不同则结果为1，否则为0 按位取反 ~：0与1互换\",\"2 的原码 = 补码为 00000000 00000000 00000000 00000010 3 的原码 = 补码为 00000000 00000000 00000000 00000011 2&3 按位与运算为 00000000 00000000 00000000 00000010 \",\"逻辑运算符\",\"短路与 &&：两边均满足，只要有一个不满足就是false\",\"短路或 ||：有任意一个满足即可，只要有一个满足就返回true\",\"逻辑与 &：两边均满足，且两边都会执行\",\"逻辑或 |：有任意一个满足即可，但两边都会执行\",\"移位运算符\",\"<<：左移运算符，高位丢弃，低位补零。x << 1相当于 x 乘以 2（不溢出的情况下）\",\">>：带符号右移，高位补符号位，低位丢弃。正数高位补 0，负数高位补 1。x >> 1相当于 x 除以 2\",\">>>：无符号右移，忽略符号位，空位都以 0 补齐\"]},\"15\":{\"h\":\"3. 数据类型\",\"t\":[\"基本数据类型\",\"占用字节\",\"默认值\",\"取值范围\",\"包装类\",\"byte\",\"1\",\"0\",\"-128 ~ 127\",\"Byte\",\"short\",\"2\",\"0\",\"-2^15 ~ 2^15 - 1\",\"Short\",\"int\",\"4\",\"0\",\"-2^31 ~ 2^31 - 1\",\"Integer\",\"long\",\"8\",\"0L\",\"-2^63 ~ 2^63 -1\",\"Long\",\"float\",\"4\",\"0F\",\"1.4E-45 ~ 3.4028235E38\",\"Float\",\"double\",\"8\",\"0D\",\"4.9E-324 ~ 1.7976931348623157E308\",\"Double\",\"char\",\"2\",\"'u0000'\",\"0 ~ 65535\",\"Character\",\"boolean\",\"1\",\"false\",\"true、false\",\"Boolean\",\"整数默认类型是 int，小数默认类型是 double\",\"long类型需添加 \\\"L\\\" 后缀，float类型必须添加 \\\"F\\\" 后缀\"]},\"16\":{\"h\":\"第03章--流程控制\"},\"17\":{\"h\":\"1. switch分支控制\",\"t\":[\"switch(表达式){ case 常量1: 语句 break; case 常量2: 语句 break; default: 语句 break; } \",\"表达式类型应与常量类型保持一致，或是可以自动转化为可比较的类型，如字符转int\",\"switch表达式的类型只能是byte，short， int，char，enum，String\",\"case子句中的值必须为常量不能是变量\"]},\"18\":{\"h\":\"2. for循环\",\"t\":[\"for (int i = 1, k = 2; i < 3 && k < 4; i++, k++) { System.out.println(i + k); } \",\"for循环的变量初始化和循环变量迭代可以写到其他地方，但分号不能省略，即for( ; 循环条件 ; ){}\",\"循环初始值可以有多个，但类型要一样，用逗号隔开\",\"变量迭代也可以有多个，用逗号隔开\"]},\"19\":{\"h\":\"3. break\",\"t\":[\"用于终止某个语句块的执行\",\"label1:{ label2:{ break label2; } } \",\"break语句出现在多层嵌套循环中，可以通过标签来指明终止哪一层语句块\",\"没有指定的break默认退出最近的循环体\"]},\"20\":{\"h\":\"4. continue\",\"t\":[\"结束本次循环，继续执行下一次循环\",\"label1:{ label2:{ //continue; = continue label2; continue label2; } } \",\"continue语句出现在多层嵌套循环中，可以通过标签跳过哪一层循环\",\"没有指定的continue默认跳过最近的循环体\"]},\"21\":{\"h\":\"5. return\",\"t\":[\"结束方法的执行\",\"return用于方法中，会跳出方法\",\"return用于main中，表示退出程序\"]},\"22\":{\"h\":\"第04章--数组\"},\"23\":{\"h\":\"1. 数组的定义\",\"t\":[\"一维数组\",\"//1. 动态初始化1 int [] a = new int[5]; //2. 动态初始化2 int [] b; b = new int[5]; //3. 静态初始化 int [] c = []{1,2,3,4,5}; int [] c = {1,2,3,4,5}; \",\"二维数组\",\"//1. 动态初始化1 int [][] a = new int[5][5]; //2. 动态初始化2 int [][] b = new int[5][]; //2. 动态初始化3 int [][] c; b = new int[5][5]; //3. 静态初始化 int [][] d = {{1,2},{1,2}}; \",\"数组中的元素可以是任何数据类型，包括基本类型和引用类型，但不能混用\",\"数组创建后没有赋值的会自动赋默认值 int 0、double 0.0、char '\\\\u0000'、boolean false、String null\",\"数组属于引用类型，数组型数据属于对象(object)\"]},\"24\":{\"h\":\"2. 数组的遍历\",\"t\":[\"//方法1 普通for循环，通过下标获取，并且可以改变数组的值 for(int i=0;i<arr1.length;i++){ System.out.println(arr1[i]); } //方法2 增强型for循环，只能遍历数组，不能改变数组的值 for(int number:arr2){ System.out.println(number); } //方法3 使用Arrays.toString()方法返回 String str=Arrays.toString(arr3); System.out.println(str); \"]},\"25\":{\"h\":\"Java SE 常用类\"},\"26\":{\"h\":\"第08章--常用类\",\"t\":[\"JDK8在线文档：https://docs.oracle.com/javase/8/docs/api/\",\"JDK17在线文档：https://docs.oracle.com/en/java/javase/17/docs/api/index.html\"]},\"27\":{\"h\":\"1. 包装类\",\"t\":[\"基本数据类型\",\"包装类\",\"boolean\",\"Boolean\",\"char\",\"Character\",\"byte\",\"Byte\",\"short\",\"Short\",\"int\",\"Integer\",\"long\",\"Long\",\"float\",\"Float\",\"基本类型与包装类的区别\",\"用途：除了定义一些常量和局部变量之外，我们在其他地方比如方法参数、对象属性中很少会使用基本类型来定义变量。并且，包装类型可用于泛型，而基本类型不可以\",\"存储方式：基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 static 修饰）存放在 Java 虚拟机的堆中。包装类型属于对象类型，也存在于堆中\",\"占用空间：包装类型占用空间较大，基本数据类型占用空间较小\",\"默认值：成员变量包装类型不赋值就是 null ，而基本类型有默认值且不是 null\",\"比较方式：对于基本数据类型，== 比较的是值。对于包装数据类型来说，== 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 equals() 方法。\"]},\"28\":{\"h\":\"2. String类\",\"t\":[\"字符串与其他类型的转换\",\"包装类 -> String\",\"Integer i = 100; //方式一 String str1 = i + \\\"\\\"; //方式二 String str2 = i.toString(); //方式三 String str3 = String.valueOf(i); \",\"String -> 包装类\",\"String str4 = \\\"12345\\\"; //方式一 Integer i2 = Integer.parseInt(str4);//自动装箱 //方式二 Integer i3 = new Integer(str4);//构造器 \",\"字符数组 -> 字符串\",\"char[] chars = {'a','b','c'}; String s1 = new String(chars); //可以标记起始位置和长度 String s1 = new String(chars, 0, 3); \",\"字符串 -> 字符数组\",\"char[] charArray = s1.toCharArray(); \",\"String常用方法\",\"// 字符串拼接 String concat(str); // 比较字符串是否相等，区分大小写 boolean equals(Object obj); // 比较字符串是否相等，不区分大小写 boolean equalsIgnoreCase(Object obj); // 将字符串中大写字母转为小写 String toLowerCase(); // 将字符串中小写字母转为大写 String toUpperCase(); // 去掉字符串前后空白符 String trim(); // 是否包含str boolean contains(str); // 返回一个新字符串，从beginIndex开始截取到endIndex(不包含) String substring(int beginIndex, int endIndex); // 返回[index]位置的字符 char charAt(index); // 将此字符串转换为一个新的字符数组返回 char[] toCharArray(); \",\"StringBuffer、StringBuilder常用方法\",\"// 字符串追加 StringBuffer append(str); // 字符串反转 StringBuffer reverse(); // 删除[start,end)之间字符 StringBuffer delete(int start, int end); // 删除[index]位置字符 StringBuffer deleteCharAt(int index); // 替换[start,end)范围的字符序列为str StringBuffer replace(int start, int end, String str); // 查找指定index位置上的字符 char charAt(int index); // 在[index]位置插入str StringBuffer insert(int index, str); \",\"StringBuffer与StringBuilder方法相同\",\"StringBuffer线程安全，StringBuilder线程不安全\"]},\"29\":{\"h\":\"3. Arrays类\",\"t\":[\"常用方法\",\"// 返回数组的字符串形式 Arrays.toString(arr); \",\"// 升序排序 Arrays.sort(arr); \",\"// 降序排序 Arrays.sort(arr, new Comparator() { //需要重写compare方法 @Override public int compare(Object o1, Object o2) { Integer i1 = (Integer)o1; Integer i2 = (Integer)o2; //若i2-i1则为降序 //若i1-i2则为升序 return i2-i1; } }); \",\"// 二分查找指定元素 //arr数组必须是排好序的 //在arr数组中查找元素若有则返回下标值，若无则返回此元素应该在的位置的-(low+1) Integer []arr = {1,2,3,4,5,6}; Arrays.binarySearch(arr,3);//返回 2 Arrays.binarySearch(arr,0);//返回 -(0+1) = -1 Arrays.binarySearch(arr,7);//返回 -(6+1) = -7 \",\"// 数组复制 // 长度比arr小则会省去后面的元素，长度比arr大则会添加null Integer []arr2 = Arrays.copyOf(arr,arr.length); \"]},\"30\":{\"h\":\"4. System类\",\"t\":[\"常用方法\",\"// 退出当前程序 // exit(0)代表正常退出 System.exit(0); \",\"// 数组复制 // arraycopy(源数组, 从源数组的索引位置开始复制, 需要复制到的数组, 被复制的数组开始复制的位置，复制的长度) System.arraycopy(arr,0,arr2,0,arr2.length); \",\"// 返回从1970-01-01到现在的时间毫秒值 System.currentTimeMillis(); \",\"// Scanner键盘输入 Scanner scanner = new Scanner(System.in);//System.in默认代表键盘输入 //调用Scanner的方法，获取不同类型的变量 String name = scanner.next(); int age = scanner.nextInt(); double weight = scanner.nextDouble(); boolean isSingle = scanner.nextBoolean(); char gender = scanner.next().charAt(0); // 关闭资源 scanner.close(); \"]},\"31\":{\"h\":\"5. Math类\",\"t\":[\"常用Math方法\",\"public static double abs(double a) ：返回 double 值的绝对值\",\"public static double ceil(double a) ：向上取整\",\"public static double floor(double a) ：向下取整\",\"public static long round(double a) ：返回四舍五入值\",\"public static double pow(double a,double b)：返回 a 的 b 次方\",\"public static double sqrt(double a)：返回 a 的平方根\",\"public static double random()：返回 [0,1) 的随机值\",\"public static final double PI：返回圆周率\",\"acos、asin、atan、cos、sin、tan：三角函数\",\"BigInteger类\",\"构造方法\",\"BigInteger(String val)：根据字符串构建BigInteger对象\",\"常用方法\",\"BigInteger abs()：绝对值\",\"BigInteger add(BigInteger val)：加法运算\",\"BigInteger subtract(BigInteger val)：减法运算\",\"BigInteger multiply(BigInteger val)：乘法运算\",\"BigInteger divide(BigInteger val)：除法运算, 整数相除只保留整数部分\",\"BigInteger remainder(BigInteger val)：取余运算\",\"BigInteger[] divideAndRemainder(BigInteger val)：返回包含除法运算后跟取余运算的两个 BigInteger 的数组\",\"BigInteger pow(int exponent)：幂指运算\",\"BigDecimal类\",\"构造方法\",\"public BigDecimal(String val)：根据字符串构建BigDecimal对象\",\"常用方法\",\"BigDecimal add(BigDecimal augend)：加法运算\",\"BigDecimal subtract(BigDecimal subtrahend)：减法运算\",\"BigDecimal multiply(BigDecimal multiplicand)：乘法运算\",\"BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)：divisor是除数，scale指明保留几位小数，roundingMode指明舍入模式（ROUND_UP：向上加1、ROUND_DOWN：直接舍去、ROUND_HALF_UP：四舍五入）\",\"Random类\",\"常用方法\",\"boolean nextBoolean()：返回下一个伪随机布尔值\",\"void nextBytes(byte[] bytes)：生成随机字节并将其置于用户提供的 byte 数组中\",\"double nextDouble()：返回下一个伪随机数，在 0.0 和 1.0 之间均匀分布的 double 值\",\"float nextFloat()：返回下一个伪随机数，在 0.0 和 1.0 之间均匀分布的 float 值\",\"int nextInt()：返回下一个伪随机数，均匀分布的 int 值\",\"int nextInt(int n)：返回一个伪随机数，[0,n) 之间均匀分布的 int 值\",\"long nextLong()：返回下一个伪随机数，均匀分布的 long 值\"]},\"32\":{\"h\":\"6. 日期类\",\"t\":[\"Date类\",\"构造方法\",\"Date()：使用无参构造器创建的对象可以获取本地当前时间\",\"Date(long 毫秒数)：把该毫秒值换算成日期时间对象\",\"常用方法\",\"getTime()：返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数\",\"//获取当前系统时间 Date d1 = new Date(); //日期格式化 SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy年MM月dd日 HH时mm分ss秒 SSS毫秒 E Z\\\"); String format = sdf.format(d1); //输出结果: 2023年07月16日 11时10分53秒 500毫秒 周日 +0800 \",\"Time类\",\"本地日期时间类 LocalDate、LocalTime、LocalDateTime\",\"常用方法\",\"now() / now(ZoneId zone)：根据当前时间创建对象/指定时区的对象\",\"getDayOfMonth()：获得月份的天数\",\"getMonth()：获得月份\",\"plusDays()：向当前对象添加几天\",\"minusDays()：从当前对象减少几天\",\"plus(TemporalAmount t)：添加一个Duration 或 Period\",\"isBefore() / isAfter()：比较两个LocalDate\",\"isLeapYear()：判断是否闰年\",\"format(DateTimeFormatter t)：格式化本地日期、时间，返回一个字符串\",\"parse(Charsequence text)：将指定格式的字符串解析为日期、时间\",\"ofPattern(\\\"yyyy-MM-dd HH:mm:ss\\\")：自定义格式,，返回一个指定字符串格式的DateTimeFormatter\",\"Period.between(t1, t2)：计算两个日期间隔\",\"Duration.between(t1, t2)：计算两个时间间隔\",\"// 获取当前时间并格式化 public void timeTest(){ LocalDateTime now = LocalDateTime.now(); DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd hh:mm:ss\\\"); System.out.println(dateTimeFormatter.format(now)); } \"]},\"33\":{\"h\":\"Java SE 面向对象\"},\"34\":{\"h\":\"第05章--面向对象基础\"},\"35\":{\"h\":\"1. 访问修饰符\",\"t\":[\"访问级别\",\"访问控制修饰符\",\"同类\",\"同包\",\"子类\",\"不同包\",\"公开\",\"public\",\"√\",\"√\",\"√\",\"√\",\"受保护\",\"protect\",\"√\",\"√\",\"√\",\"×\",\"默认\",\"无\",\"√\",\"√\",\"×\",\"×\",\"私有\",\"private\",\"√\",\"×\",\"×\",\"×\"]},\"36\":{\"h\":\"2. 方法\",\"t\":[\"方法重载\",\"Java允许同一个类中同名方法的存在，但形参列表不同\",\"void fun(int a,int b){} void fun(String s1){} void fun(double d){} \",\"可变参数\",\"Java允许将同一类的中多个同名同功能但参数个数不同的方法封装成一个方法\",\"public int sum(int a, int... numbers){} \",\"int... 表示可变参数，类型是int，参数个数可以是0到多个参数\",\"使用可变参数时可以当做数组使用，即numbers可以当做数组\",\"可变参数的实参可以是数组，即可以传入数组\",\"可变参数和普通参数一起放在形参列表里，要保证可变参数放在最后\",\"一个形参列表只能放一个可变参数\",\"作用域\",\"变量类型\",\"作用域\",\"有无初值\",\"作用范围\",\"访问修饰符\",\"全局变量\",\"整个类体\",\"有默认值\",\"本类使用，或通过对象调用在其他类使用\",\"可加\",\"局部变量\",\"成员方法内\",\"无初值，必须赋值后才能使用\",\"只能在本类对应的方法中使用\",\"不可加\",\"同一个作用域中的变量不能重名\",\"不同作用域的全局变量和局部变量可以重名，遵循就近原则\"]},\"37\":{\"h\":\"3. 构造方法\",\"t\":[\"class Person{ String name; int age; // 无参构造 public class Person(){} // 有参构造 public class Person(String name, int age){ this.name = name; this.age = age; } } \",\"创建对象时，系统会自动调用该类的构造方法\",\"如果没有定义构造方法，系统会自动生成一个无参默认构造方法\",\"用户定义了构造方法后，系统默认的构造方法会被覆盖，若使用则需显式定义，即重新定义一个无参构造方法\",\"一个类可以有多个构造器，即构造器重载\"]},\"38\":{\"h\":\"4. this关键字\",\"t\":[\"this可以用来访问本类的属性，并且用于区分当前类的属性和局部变量\",\"class Test{ public void f1(){} public void f2(){ //调用f1的第一种方法 f1(); //调用f1的第二种方法 this.f1(); } } \",\"this不能在类定义的外部使用，只能在类定义中的方法中使用\",\"this代表当前对象，即哪个对象被调用，this就代表哪个对象\",\"this访问本类的属性和方法，若找不到则会在父类中继续查找\"]},\"39\":{\"h\":\"第06章--面向对象进阶\"},\"40\":{\"h\":\"1. 封装\",\"t\":[\"属性私有化并提供getter和setter\",\"class Test{ private String name; private int age; // getter和setter public String getName() {return name;} public void setName(String name) {this.name = name;} public int getAge() {return age;} public void setAge(int age) {this.age = age;} } \"]},\"41\":{\"h\":\"2. 继承\",\"t\":[\"子类只能继承一个父类，单继承机制\",\"//父类Person class Person{} //子类Student 继承Person类 class Student extends Person{} \",\"子类继承父类的所有属性和方法\",\"非私有属性和方法可以在子类直接访问，私有属性和方法不能在子类直接访问，要通过父类公共方法访问\",\"子类必须调用父类的构造器，完成父类的初始化\",\"创建子类对象时，任一子类构造器都会先调用父类的无参构造器，若父类没有无参构造器则需要通过super指用特定构造器\",\"super() 和 this() 都只能放在构造器的第一行，因此两者不能共存在同一个构造器中\",\"父类构造器的调用不限于直接父类，而是一直追溯到最高父类即Object类\"]},\"42\":{\"h\":\"3. 方法重写\",\"t\":[\"子类的一个方法与父类的一个方法名称，返回类型，参数一样，即子类覆盖父类方法\",\"class A{ void f1(){ System.out.println(\\\"A类的f1()被调用\\\"); } } class B extends A{ //子类重写f1()方法 @Override void f1() { System.out.println(\\\"B类的f1()被调用\\\"); } } \",\"子类方法的参数，方法名要和父类完全一致，返回类型一致或者是父类返回类型的子类\",\"子类不能缩小父类的方法的访问权限\"]},\"43\":{\"h\":\"4. super关键字\",\"t\":[\"访问父类属性和方法用 super.属性 super.方法；\",\"访问父类的属性和方法，但不能访问私有属性和方法\",\"当子类有和父类的属性和方法重名时，访问父类需要用super\",\"super访问不限于直接父类，可以直接追溯到顶级父类，若有重名则遵循就近原则\"]},\"44\":{\"h\":\"5. 多态\",\"t\":[\"一个对象的编译类型和运行类型可以不一致，等号 '=' 左边的是编译类型，等号 '=' 右边的是运行类型\",\"向上转型\",\"//父类引用指向子类对象 //可以调用父类的所有成员，但不能调用子类的特有成员 class People{} class Student extends People{} People p1 = new Student(); \",\"向下转型\",\"//向下转型只能强转父类引用，不能强转父类对象，且父类引用必须指向当前目标对象的类型 //可以调用子类的所有成员 Student s1 = (Student)p1; \",\"动态绑定机制\",\"调用对象方法的时，该对象会和运行类型绑定，即从运行类型出发\",\"调用对象属性时，没有动态绑定机制，哪里声明哪里使用\",\"instanceof\",\"判断对象的类型是否是xx类型或xx的子类型，返回值为布尔值\"]},\"45\":{\"h\":\"6. == 和 equals的区别\",\"t\":[\"==\",\"判断基本类型，判断值是否相等，判断引用类型，判断地址是否相等，即是否是同一个对象\",\"equals()\",\"Object类的方法，用于判断引用类型，默认判断地址是否相等\",\"//重写equals方法 class Test{ int a; double b; @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof A)) return false; A a1 = (A) o; return a == a1.a && Double.compare(a1.b, b) == 0; } @Override public int hashCode() { return Objects.hash(a, b); } } \",\"String类型的equals()方法重写过，用于比较值是否相等\",\"重写 equals() 时必须重写 hashCode()方法\",\"两个相等的对象的 hashCode 值必须相等。即如果 equals 方法判断两个对象是相等的，那这两个对象的 hashCode 值也要相等。\",\"如果重写 equals() 时没有重写 hashCode() 方法的话就可能会导致 equals 方法判断是相等的两个对象，hashCode 值却不相等。\",\"equals 方法判断两个对象是相等的，那这两个对象的 hashCode 值也要相等\",\"两个对象有相同的 hashCode 值，他们也不一定是相等的（哈希碰撞）\"]},\"46\":{\"h\":\"第07章--面向对象高级\"},\"47\":{\"h\":\"1. static关键字\",\"t\":[\"static 修饰的变量叫静态变量，是该类所有对象共享的变量，任何一个该类的对象对其访问或修改，均作用在这个变量上\",\"class A{ public static int a; } //访问时使用类名.类变量名 A.a; \",\"static 修饰的方法叫静态方法也叫类方法\",\"class A{ //访问通过类名.方法名或者对象.方法名 调用 public static void f(){} } \",\"类方法中无this和super参数\",\"类方法中只能访问静态变量或静态方法\",\"普通成员方法可以访问静态和非静态的变量和方法\"]},\"48\":{\"h\":\"2. 代码块\",\"t\":[\"代码块又称初始化块，属于类的中成员，类似于方法，将逻辑语句封装到方法体中，用 { } 围起来\",\"代码块不用通过对象或类的显式调用，而是加载类的时候隐式调用\",\"class Test{ //静态代码块 static{ //语句 } //普通代码块 { //语句 } } \",\"static修饰的是静态代码块，作用是对类进行初始化，随着类的加载而执行，且只会执行一次\",\"类加载的时机：\",\"创建对象实例（new）\",\"创建子类对象实例时，父类也会被加载\",\"使用类的静态成员时（静态属性，静态方法）\",\"普通代码块，在创建对象实例时，会被隐式调用，创建一次调用一次\",\"只使用类的静态成员时，普通代码块不会被执行\",\"静态代码块只能调用静态成员，普通代码块可以调用任意成员\",\"创建对象时，在一个类的调用顺序：\",\"调用静态代码块和静态属性初始化\",\"调用普通代码块和普通属性初始化\",\"调用构造方法（隐含了super() 和调用普通代码块，所以优先级最低）\",\"当有父类和子类时，调用顺序：\",\"父类的静态代码块和静态属性\",\"子类的静态代码块和静态属性\",\"父类的普通代码块和普通属性\",\"父类的构造方法\",\"子类的普通代码块和普通属性\",\"子类的构造方法\"]},\"49\":{\"h\":\"4. final关键字\",\"t\":[\"final的使用\",\"final修饰类，则此类不能被别的类所继承\",\"final修饰方法，则此方法不可被重写\",\"final修饰属性，则此属性不可被修改\",\"final修饰局部变量，则此局部变量不能被修改\",\"final的特点\",\"final 修饰的属性又叫常量，一般用XX_XX_XX命名\",\"final 修饰的属性必须在定义的时候赋初值，且之后不能修改\",\"//三种赋值位置 class A{ //1. 定义时赋值 public final int NUM_A = 100; //2. 构造器中赋值 public final int NUM_B; public A(){ NUM_B = 200; } //3. 代码块中赋值 public final int NUM_C; { NUM_C = 300; } } \",\"如果 final 修饰的属性是静态的，则只能在定义时和静态代码块中赋值，不能在构造器中赋值\",\"如果不是 final类，但是含有 final 方法，该方法不能被重写但可以被继承\",\"final 修饰的类，该类的方法默认是 final 方法\",\"final 不能修饰构造器\",\"final 和 static 搭配修饰效率更高，不会导致类加载\",\"class A{ public final static int NUM = 100; } public static void main(String[] args) { //不会进行类加载就可以直接访问NUM System.out.println(A.NUM); } \"]},\"50\":{\"h\":\"5. 抽象类\",\"t\":[\"abstract 修饰的类就是抽象类\",\"//抽象类 abstract class Animal{ public String name; //构造器 public Animal(String name) { this.name = name; } //抽象方法(没有方法体) public abstract void eat(); } \",\"抽象类不能被实例化，即不可以new一个对象\",\"abstract只能修饰类和方法\",\"抽象方法不能使用private final和static修饰\",\"如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己本身也是抽象类\"]},\"51\":{\"h\":\"6. 接口\",\"t\":[\"使用 interface 定义接口，使用 implement 实现接口\",\"//接口的定义 interface IA{} //接口的使用 class A implements IA{ //必须实现接口的抽象方法; } \",\"接口不能被实例化\",\"接口中所有方法都是public方法，接口中的抽象方法可以不用abstract修饰\",\"一个普通类实现接口，需要将该接口的所有抽象方法都实现\",\"抽象类实现接口，可以不实现接口方法\",\"一个类可以同时实现多个接口\",\"接口中的属性若是pubic static final的，则属性必须初始化\",\"interface IA{ int a = 1;//必须初始化 //相当于 public static final int a = 1; } \",\"接口不能继承类，接口可以继承接口\",\"interface IA{ void a(); } interface IB{ void b(); } //IC接口继承IA,IB interface IC extends IA,IB{} \"]},\"52\":{\"h\":\"7. 内部类\",\"t\":[\"局部内部类\",\"定义在外部类的局部位置，如方法中，代码块中，有类名\",\"//外部类 class Outer{ private int n1 = 100; public void m1(){ //局部内部类 final class Inner{ //可以直接访问外部类的所有成员包括私有的 public void f1(){ System.out.println(n1); } } //若要访问内部类则需要创建内部类对象，然后调用其方法 Inner i1 = new Inner(); i1.f1(); } } \",\"局部内部类本质仍是一个类，可以访问外部类的所有成员包括私有的\",\"局部内部类只能是默认或者是final的（使其不能被继承）\",\"作用域在其方法内或代码块内\",\"外部类访问内部类，需要在方法中可以创建内部类对象，然后调用其方法\",\"外部其他类不能访问局部内部类（局部内部类的地位是局部变量）\",\"如果外部类和局部内部类的成员重名，默认遵循就近原则\",\"如果想访问外部类的成员则可以使用（外部类名 . this.成员）去访问\",\"匿名内部类\",\"定义在外部类的局部位置，如方法中，代码块中，无类名\",\"基于接口的匿名内部类\",\"interface IA{ public void test(); } class Outer { private int a1 = 100; private void method(){ //匿名内部类 IA dog = new IA(){ @Override public void test() { System.out.println(\\\"匿名内部类实现test方法\\\"); } }; dog.cry(); } } \",\"详解：\",\"dog的编译类型是接口类型即 IA，运行类型是匿名内部类，底层会创建一个Outer$1的对象实现IA接口 匿名内部类使用一次之后就不能在使用了，使用后类消失但是类所创建的对象存在\",\"基于类的匿名内部类\",\"class people{ public void test(){} } class Outer { private int a1 = 100; public void method(){ //匿名内部类 people p1 = new people(){ @Override public void test() { System.out.println(\\\"匿名内部类重写test方法\\\"); } }; p1.test(); } } \",\"可以直接访问外部类的成员，包括私有的\",\"不能添加访问修饰符，他的地位只是一个局部变量\",\"外部其他类不能访问匿名内部类\",\"如果外部类和局部内部类的成员重名，默认遵循就近原则\",\"如果想访问外部类的成员则可以使用(外部类名 . this.成员)去访问\",\"成员内部类\",\"定义在外部类中，相当于一个成员变量，有类名\",\"class Outer01{ private String name = \\\"abc\\\"; //成员内部类 class Inner01{ public void say(){ //可以访问私有属性 System.out.println(name); } } public void f1(){ //创建成员内部类的对象实例 Inner01 inner01 = new Inner01(); //调用say方法 inner01.say(); } } \",\"成员内部类可以访问外部类的成员包含私有的\",\"可以添加任意的访问修饰符，他的地位就是一个成员\",\"作用域为整个类体\",\"访问外部类的成员则可以使用(外部类名 . this.成员)去访问\",\"外部类和局部内部类的成员重名，默认遵循就近原则\",\"外部类使用成员内部类需要先创建成员内部类对象再调用其方法或属性\",\"静态内部类\",\"定义在外部类的成员位置用static修饰的成员内部类\",\"class Outer01{ private static String name = \\\"abc\\\";//属性 private static int age = 100; //成员内部类 static class Inner01{ public void say(){ //可以访问私有属性 System.out.println(\\\"say方法\\\" + name+ \\\" \\\" +age); } } //f1方法 public void f1(){ //创建成员内部类的对象实例 Inner01 inner01 = new Inner01(); //调用say方法 inner01.say(); } } \",\"静态内部类与成员内部类只有static的区别，其他特点都相同\",\"可以直接访问外部类的所有成员，包含私有的，不能直接访问非静态成员\",\"外部类访问静态内部类需要创建对象后再访问\"]},\"53\":{\"h\":\"8. 枚举\",\"t\":[\"enum枚举类\",\"enum Season{ //将对象写在最前面，中间用逗号隔开，最后一个用分号结束 //对象名(\\\"构造器属性\\\") SPRING(\\\"春天\\\",\\\"温暖\\\"), SUMMER(\\\"夏天\\\",\\\"炎热\\\"), AUTUMN(\\\"秋天\\\",\\\"凉爽\\\"), WINTER(\\\"冬天\\\",\\\"寒冷\\\"); //属性 private String name; private String desc; //构造器私有化 private Season(String name, String desc) { this.name = name; this.desc = desc; } //可以保留get方法，需要去掉set方法 public String getName() { return name; } public String getDesc() { return desc; } } \",\"使用enum后不能继承其他类，因为enum会隐式继承\",\"enum和普通类一样可以实现接口\",\"常用方法\",\"ordinal() 输出当前枚举对象的次序\",\"values() 返回一个含所有枚举对象的数组\",\"valueOf() 将字符串转化成枚举对象\",\"compareTo() 比较两个枚举变量，比较编号，返回值是前者编号减去后者编号\"]},\"54\":{\"h\":\"9. 注解\",\"t\":[\"@Override 用于检测被标记的方法为有效的重写方法，如果不是，则报编译错误！\",\"@Deprecated 用于表示被标记的数据已经过时，不推荐使用。\",\"@SuppressWarnings 抑制编译警告。\"]},\"55\":{\"h\":\"10. 异常\",\"t\":[\"所有的异常都有一个共同的祖先 java.lang 包中的 Throwable 类。Throwable 类有两个重要的子类：\",\"Exception：程序本身可以处理的异常，可以通过 catch 来进行捕获\",\"Error：程序无法处理的错误 ，不能通过 catch 来进行捕获。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止\",\"五大运行异常\",\"NullPointerException 空指针异常\",\"ArithmeticException 数学运算异常\",\"ArrayIndexOutOfBoundsException 数组越界异常\",\"ClassCastException 对象强转为不是子类对象实例抛出的异常\",\"NumberFormatException 数字格式不正常异常\",\"异常处理方式\",\"throws\",\"//使用throws 将异常抛出，让调用f1方法的调用者处理 public void f1() throws Exception{ //此为编译异常 FileInputStream fis = new FileInputStream(\\\"d://aa.txt\\\"); } \",\"子类重写父类方法时，子类抛出的异常要和父类的一致或者是父类异常类型的子类型\",\"throws后面也可以是异常列表，即可以抛出多个异常 用逗号分割\",\"try - catch - finally\",\"try{ //可能会出现异常 }catch (Exception e){ //当出现异常时进行捕获，封装成Exception对象e传递给catch }finally { //无论有没有异常finally 始终要运行 //通常用于释放资源代码 } \",\"finally 不是必须的\",\"如果异常发生了则异常后面的代码不会执行，直接进入 catch 块\",\"如果异常没有发生则顺序执行 try，不会进入 catch 块\",\"如果 try 中可能有多个异常，可以使用多个 catch 分别捕获不同的异常（子类异常写在前，父类异常写在后）\",\"finally 语句块中不要使用 return，当 try 语句和 finally 语句中都有 return 语句时，try 语句块中的 return 语句会被忽略\"]},\"56\":{\"h\":\"MyBatis 笔记\",\"t\":[\"MyBatis-logo\"]},\"57\":{\"h\":\"1. 简介\",\"t\":[\"MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。\",\"对象关系映射ORM（Object Relational Mapping）简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。MyBatis属于半⾃动化的ORM框架。\",\"ORM：对象关系映射 O（Object）：Java虚拟机中的 Java 对象 R（Relational）：关系型数据库 M（Mapping）：将Java虚拟机中的 Java 对象映射到数据库表中⼀⾏记录，或是将数据库表中⼀⾏记录映射成⼀个 Java 对象\",\"中文网站：mybatis – MyBatis 3 | 简介\"]},\"58\":{\"h\":\"2. 快速入门\",\"t\":[\"创建项目导入相应坐标\",\"<!--mybatis依赖--> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.10</version> </dependency> <!--mysql依赖--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.33</version> </dependency> \",\"编写MyBatis核心配置文件mybatis-config.xml放在resources根目录下\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <settings> <!-- 驼峰命名转换--> <setting name=\\\"mapUnderscoreToCamelCase\\\" value=\\\"true\\\"/> <!-- 延迟加载--> <setting name=\\\"lazyloadingEnabled\\\" value=\\\"true\\\"/> </settings> <!-- 设置默认指向的数据库--> <environments default=\\\"development\\\"> <environment id=\\\"development\\\"> <!-- 采用jdbc方式对数据库事务进行commit/rollback--> <transactionManager type=\\\"JDBC\\\"/> <!-- 采用连接池方式管理数据库连接--> <dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"com.mysql.cj.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql:///mybatis?useSSL=false\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"123456\\\"/> </dataSource> </environment> </environments <mappers> <!-- 加载sql映射文件--> <mapper resource=\\\"com/jcven/mapper/UserMapper.xml\\\"/> </mappers> </configuration> \",\"编写相应的实体类\",\"编写mapper接口\",\"public interface UserMapper { List<User> selectAll(); } \",\"编写相应的mapper.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- namespace等于mapper接口类的全限定名,这样实现对应 --> <mapper namespace=\\\"com.learn.mapper.UserMapper\\\"> <!-- id = 方法名 resultType = 返回值类型 --> <select id=\\\"selectAll\\\" resultType=\\\"com.learn.pojo.User\\\"> select * from user; </select> </mapper> \",\"方法名和SQL的id一致\",\"方法返回值和resultType一致\",\"方法的参数和SQL的参数一致\",\"接口的全类名和映射配置文件的名称空间一致\",\"使用\",\"public class MybatisDemo { public static void main(String[] args) throws IOException { //1. 加载mybatis的核心配置文件,获取SqlSessionFactory String resource = \\\"mybatis-config.xml\\\"; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); //2. 获取SqlSession对象 SqlSession sqlSession = sqlSessionFactory.openSession(); //3. 获取UserMapper接口的代理对象 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); List<User> users = userMapper.selectAll(); System.out.println(users); //4. 释放资源 sqlSession.close(); } } \"]},\"59\":{\"h\":\"3. SqlSessionFactory工具类\",\"t\":[\"编写工具类以便于快速构建SqlSession，并且避免重复创建影响性能\",\"创建\",\"package com.jcven.utils; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import java.io.IOException; import java.io.Reader; public class MyBatisUtils { private static final SqlSessionFactory sqlSessionFactory; static { Reader reader; try { reader = Resources.getResourceAsReader(\\\"mybatis-config.xml\\\"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); } catch (IOException e) { e.printStackTrace(); throw new ExceptionInInitializerError(e); } } //创建一个新的SqlSession对象 public static SqlSession openSession() { return sqlSessionFactory.openSession(); } //释放一个有效的SqlSession对象 public static void closeSession(SqlSession sqlSession) { if (sqlSession != null) { sqlSession.close(); } } } \",\"使用\",\"public static void main(String[] args) throws IOException { SqlSession sqlSession = null; try { sqlSession = MyBatisUtils.openSession(); Connection connection = sqlSession.getConnection(); System.out.println(connection); }catch (Exception e){ throw e; }finally { MyBatisUtils.closeSession(sqlSession); } } \"]},\"60\":{\"h\":\"4. SQL传参--输入\"},\"61\":{\"h\":\"1. #{} 与 ${} 的区别\",\"t\":[\"#{} 形式传参是转换为问号占位符，可以防止SQL注入\",\"${} 形式传参是字符串拼接操作，不能防止SQL注入\",\"通常不会采用${}的方式传值。一个特定的适用场景是：通过Java程序动态生成数据库表，表名部分需要Java程序通过参数传入；而JDBC对于表名部分是不能使用问号占位符的，此时只能使用${}\",\"结论：实际开发中，能用#{}实现的，肯定不用${}\"]},\"62\":{\"h\":\"2. 单个简单类型参数\",\"t\":[\"Mapper接口中抽象方法的声明\",\"Employee selectEmployee(Integer empId); \",\"SQL语句\",\"<select id=\\\"selectEmployee\\\" resultType=\\\"com.jcven.mybatis.entity.Employee\\\"> select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#{empId} </select> \",\"单个简单类型参数，在#{}中可以随意命名，但是没有必要。通常还是使用和接口方法参数同名。\",\"可以使用parameterType=\\\"\\\"来指定类型（可省略） 与mapper接口保持对应\"]},\"63\":{\"h\":\"3. 多个简单类型参数\",\"t\":[\"多个简单类型参数，需要使用@Param参数\",\"Mapper接口中抽象方法的声明\",\"int updateEmployee(@Param(\\\"empId\\\") Integer empId,@Param(\\\"empSalary\\\") Double empSalary); \",\"SQL语句\",\"<update id=\\\"updateEmployee\\\"> update t_emp set emp_salary=#{empSalary} where emp_id=#{empId} </update> \"]},\"64\":{\"h\":\"4. Map类型参数\",\"t\":[\"有多个参数需要传递，但是没有对应的实体类类型可以使用。使用@Param注解一个一个传入又太麻烦了，所以封装到Map中\",\"Mapper接口中抽象方法的声明\",\"int updateEmployeeByMap(Map<String, Object> paramMap); \",\"SQL语句\",\"<update id=\\\"updateEmployeeByMap\\\"> update t_emp set emp_salary=#{empSalaryKey} where emp_id=#{empIdKey} </update> \",\"#{} 中写Map中的key\",\"可以使用parameterType=\\\"Map\\\"来指定类型（可省略） 与mapper接口保持对应\"]},\"65\":{\"h\":\"5. 实体类型参数\",\"t\":[\"Mapper接口中抽象方法的声明\",\"int insertEmployee(Employee employee); \",\"SQL语句\",\"<insert id=\\\"insertEmployee\\\"> insert into t_emp(emp_name,emp_salary) values(#{empName},#{empSalary}) </insert> \",\"Mybatis会根据#{}中传入的数据，加工成getXxx()方法，通过反射在实体类对象中调用这个方法，从而获取到对应的数据，填充到#{}解析后的问号占位符这个位置。\"]},\"66\":{\"h\":\"5. SQL传参--输出\",\"t\":[\"数据输出总体上有两种形式：\",\"增删改操作返回的受影响行数：直接使用 int 或 long 类型接收即可\",\"查询操作的查询结果\",\"我们需要做的是，指定查询的输出数据类型即可！并且插入场景下，实现主键数据回显示！\"]},\"67\":{\"h\":\"1. 返回值说明\",\"t\":[\"resultType\",\"resultType = \\\"全限定符 ｜ 别名 ｜ 如果是返回集合类型，写范型类型即可\\\"\",\"类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：\",\"<typeAliases> <typeAlias alias=\\\"Author\\\" type=\\\"domain.blog.Author\\\"/> <typeAlias alias=\\\"Blog\\\" type=\\\"domain.blog.Blog\\\"/> </typeAliases> \",\"当这样配置时，Blog 可以用在任何使用 domain.blog.Blog 的地方。\",\"也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：\",\"<typeAliases> <package name=\\\"domain.blog\\\"/> </typeAliases> \",\"每一个在包 domain.blog 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 domain.blog.Author 的别名为 author；若有注解，则别名为其注解值。见下面的例子：\",\"@Alias(\\\"author\\\") public class Author { ... } \",\"resultMap\",\"使用resultMap标签定义对应关系，再在后面的SQL语句中引用这个对应关系\",\"<!-- 专门声明一个resultMap设定column到property之间的对应关系 --> <resultMap id=\\\"selectEmployeeByRMResultMap\\\" type=\\\"com.jcven.mybatis.entity.Employee\\\"> <!-- 使用id标签设置主键列和主键属性之间的对应关系 --> <!-- column属性用于指定字段名；property属性用于指定Java实体类属性名 --> <id column=\\\"emp_id\\\" property=\\\"empId\\\"/> <!-- 使用result标签设置普通字段和Java实体类属性之间的关系 --> <result column=\\\"emp_name\\\" property=\\\"empName\\\"/> <result column=\\\"emp_salary\\\" property=\\\"empSalary\\\"/> </resultMap> <!-- Employee selectEmployeeByRM(Integer empId); --> <select id=\\\"selectEmployeeByRM\\\" resultMap=\\\"selectEmployeeByRMResultMap\\\"> select emp_id,emp_name,emp_salary from t_emp where emp_id=#{empId} </select> \"]},\"68\":{\"h\":\"2. 单个简单类型\",\"t\":[\"Mapper接口中的抽象方法\",\"int selectEmpCount(); \",\"SQL语句\",\"<select id=\\\"selectEmpCount\\\" resultType=\\\"int\\\"> select count(*) from t_emp </select> \",\"通过resultType来指定返回值类型\",\"Mybatis 内部给常用的数据类型设定了很多别名。 以 int 类型为例，可以写的名称有：int、integer、Integer、java.lang.Integer、Int、INT、INTEGER 等等。\"]},\"69\":{\"h\":\"3. 返回Map类型\",\"t\":[\"适用于SQL查询返回的各个字段综合起来并不和任何一个现有的实体类对应，没法封装到实体类对象中\",\"Mapper接口的抽象方法\",\"Map<String,Object> selectEmpNameAndMaxSalary(); \",\"SQL语句\",\"<select id=\\\"selectEmpNameAndMaxSalary\\\" resultType=\\\"map\\\"> SELECT emp_name 员工姓名, emp_salary 员工工资, (SELECT AVG(emp_salary) FROM t_emp) 部门平均工资 FROM t_emp WHERE emp_salary=( SELECT MAX(emp_salary) FROM t_emp ) </select> \",\"resultType=\\\"map\\\" 返回map集合\"]},\"70\":{\"h\":\"4. 返回实体类对象\",\"t\":[\"Mapper接口的抽象方法\",\"Employee selectEmployee(Integer empId); \",\"SQL语句\",\"<select id=\\\"selectEmployee\\\" resultType=\\\"com.jcven.mybatis.entity.Employee\\\"> <!-- 通过给数据库表字段加别名，让查询结果的每一列都和Java实体类中属性对应起来 --> select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#{empId} </select> \",\"在 Mybatis 全局配置文件中，加入设置后可以不给字段设置别名\",\"<!-- 在全局范围内对Mybatis进行配置 --> <settings> <!-- 开启驼峰命名转换 --> <setting name=\\\"mapUnderscoreToCamelCase\\\" value=\\\"true\\\"/> </settings> \"]},\"71\":{\"h\":\"5. 返回List类型\",\"t\":[\"查询结果返回多个实体类对象，希望把多个实体类对象放在List集合中返回。此时不需要任何特殊处理，在resultType属性中还是设置实体类类型即可。\",\"Mapper接口中抽象方法\",\"List<Employee> selectAll(); \",\"SQL语句\",\"<!-- List<Employee> selectAll(); --> <select id=\\\"selectAll\\\" resultType=\\\"com.jcven.mybatis.entity.Employee\\\"> select emp_id empId,emp_name empName,emp_salary empSalary from t_emp </select> \",\"测试\",\"@Test public void testSelectAll() { EmployeeMapper employeeMapper = session.getMapper(EmployeeMapper.class); List<Employee> employeeList = employeeMapper.selectAll(); for (Employee employee : employeeList) { log.info(\\\"employee = \\\" + employee); } } \"]},\"72\":{\"h\":\"6. 返回主键值\",\"t\":[\"自增长类型主键\",\"Mapper接口中的抽象方法\",\"int insertEmployee(Employee employee); \",\"SQL语句\",\"<!-- useGeneratedKeys属性字面意思就是“使用生成的主键” --> <!-- keyProperty属性可以指定主键在实体类对象中对应的属性名，Mybatis会将拿到的主键值存入这个属性 --> <insert id=\\\"insertEmployee\\\" useGeneratedKeys=\\\"true\\\" keyProperty=\\\"empId\\\"> insert into t_emp(emp_name,emp_salary) values(#{empName},#{empSalary}) </insert> \",\"Mybatis是将自增主键的值设置到实体类对象中，而不是以Mapper接口方法返回值的形式返回。\",\"非自增长类型主键\",\"使用 selectKey 子元素：selectKey 元素将会首先运行，id 会被设置，然后插入语句会被调用！\",\"使用 selectKey 帮助插入UUID作为字符串类型主键示例：\",\"<insert id=\\\"insertUser\\\" parameterType=\\\"User\\\"> <selectKey keyProperty=\\\"id\\\" resultType=\\\"java.lang.String\\\" order=\\\"BEFORE\\\"> SELECT UUID() as id </selectKey> INSERT INTO user (id, username, password) VALUES ( #{id}, #{username}, #{password} ) </insert> \",\"我们使用 selectKey 来查询 UUID 并设置到 id 字段中。\",\"通过 keyProperty 属性来指定查询到的 UUID 赋值给对象中的 id 属性，而 resultType 属性指定了 UUID 的类型为 java.lang.String。\",\"我们将 selectKey 放在了插入语句的前面，这是因为 MySQL 在 insert 语句中只支持一个 select 子句，而 selectKey 中查询 UUID 的语句就是一个 select 子句，因此我们需要将其放在前面。\",\"最后，在将 User 对象插入到 user 表中时，我们直接使用对象中的 id 属性来插入主键值。\",\"使用这种方式，我们可以方便地插入 UUID 作为字符串类型主键。当然，还有其他插入方式可以使用，如使用Java代码生成UUID并在类中显式设置值等。需要根据具体应用场景和需求选择合适的插入方式。\"]},\"73\":{\"h\":\"6. 动态SQL\"},\"74\":{\"h\":\"1. if/where标签\",\"t\":[\"List<Employee> selectEmployeeByCondition(Employee employee); \",\"<select id=\\\"selectEmployeeByCondition\\\" resultType=\\\"employee\\\"> select emp_id,emp_name,emp_salary from t_emp <where> <if test=\\\"empName != null\\\"> <!-- 在if标签内部，需要访问接口的参数时还是正常写#{} --> or emp_name=#{empName} </if> <if test=\\\"empSalary &gt; 2000\\\"> or emp_salary>#{empSalary} </if> </where> </select> \",\"where 标签会自动去掉\\\"标签体内前面多余的 and / or \\\"\",\"if 标签的 test 属性是必须的，且可以访问实体类的属性，不可以访问数据库表的字段\",\"if 标签的 test 为 true 则添加到 SQL，false 则不添加\"]},\"75\":{\"h\":\"2. set标签\",\"t\":[\"void updateEmployeeDynamic(Employee employee); \",\"<update id=\\\"updateEmployeeDynamic\\\"> update t_emp <!-- set emp_name=#{empName},emp_salary=#{empSalary} --> <set> <if test=\\\"empName != null\\\"> emp_name=#{empName}, </if> <if test=\\\"empSalary &lt; 3000\\\"> emp_salary=#{empSalary}, </if> </set> where emp_id=#{empId} <!-- 第一种情况：所有条件都满足 SET emp_name=?, emp_salary=? 第二种情况：部分条件满足 SET emp_salary=? 第三种情况：所有条件都不满足 update t_emp where emp_id=? 没有set子句的update语句会导致SQL语法错误 --> </update> \",\"set标签动态管理set子句，可以动态去掉两端多余的逗号\"]},\"76\":{\"h\":\"3. trim标签\",\"t\":[\"使用trim标签控制条件部分两端是否包含某些字符\",\"prefix属性：指定要动态添加的前缀\",\"suffix属性：指定要动态添加的后缀\",\"prefixOverrides属性：指定要动态去掉的前缀，使用“|”分隔有可能的多个值\",\"suffixOverrides属性：指定要动态去掉的后缀，使用“|”分隔有可能的多个值\",\"<!-- List<Employee> selectEmployeeByConditionByTrim(Employee employee) --> <select id=\\\"selectEmployeeByConditionByTrim\\\" resultType=\\\"com.jcven.mybatis.entity.Employee\\\"> select emp_id,emp_name,emp_age,emp_salary,emp_gender from t_emp <trim prefix=\\\"where\\\" suffixOverrides=\\\"and|or\\\"> <if test=\\\"empName != null\\\"> emp_name=#{empName} and </if> <if test=\\\"empSalary &gt; 3000\\\"> emp_salary>#{empSalary} and </if> <if test=\\\"empAge &lt;= 20\\\"> emp_age=#{empAge} or </if> <if test=\\\"empGender=='male'\\\"> emp_gender=#{empGender} </if> </trim> </select> \"]},\"77\":{\"h\":\"4. choose/when/otherwise标签\",\"t\":[\"在多个分支条件中，仅执行一个。\",\"从上到下依次执行条件判断\",\"遇到的第一个满足条件的分支会被采纳\",\"被采纳分支后面的分支都将不被考虑\",\"如果所有的when分支都不满足，那么就执行otherwise分支\",\"List<Employee> selectEmployeeByConditionByChoose(Employee employee); \",\"<select id=\\\"selectEmployeeByConditionByChoose\\\" resultType=\\\"com.jcven.mybatis.entity.Employee\\\"> select emp_id,emp_name,emp_salary from t_emp where <choose> <when test=\\\"empName != null\\\">emp_name=#{empName}</when> <when test=\\\"empSalary &lt; 3000\\\">emp_salary &lt; 3000</when> <otherwise>1=1</otherwise> </choose> </select> \"]},\"78\":{\"h\":\"5. foreach标签\",\"t\":[\"foreach标签的属性\",\"collection：要遍历的集合\",\"item：遍历集合的过程中能得到每一个具体对象，在item属性中设置一个名字，将来通过这个名字引用遍历出来的对象\",\"separator：指定当foreach标签的标签体重复拼接字符串时，各个标签体字符串之间的分隔符\",\"open：指定整个循环把字符串拼好后，字符串整体的前面要添加的字符串\",\"close：指定整个循环把字符串拼好后，字符串整体的后面要添加的字符串\",\"index：起一个名字，便于后面引用遍历List集合能够得到List集合的索引值，遍历Map集合能够得到Map集合的key\",\"批量删除\",\"Integer deleteByIds(@Param(\\\"ids\\\") Long[] ids); \",\"<delete id=\\\"deleteByIds\\\"> delete form t_car where id in <foreach collection=\\\"ids\\\" item=\\\"id\\\" separator=\\\",\\\" open=\\\"(\\\", close=\\\")\\\"> #{id} </foreach> </delete> \",\"传入数组需要使用@Param注解\",\"批量插入\",\"Integer insertBatch(List<Car> cars); \",\"<insert id=\\\"insertBatch\\\"> insert into t_car values <foreach collection=\\\"cars\\\" item=\\\"car\\\" separator=\\\",\\\"> (null,#{car.Name},#{car.Num}) </foreach> </insert> \",\"传入list集合不需要@Param注解\"]},\"79\":{\"h\":\"6. sql/include标签\",\"t\":[\"抽取重复的SQL片段\",\"<!-- 使用sql标签抽取重复出现的SQL片段 --> <sql id=\\\"mySelectSql\\\"> select emp_id,emp_name,emp_age,emp_salary,emp_gender from t_emp </sql> \",\"引用已抽取的SQL片段\",\"<!-- 使用include标签引用声明的SQL片段 --> <include refid=\\\"mySelectSql\\\"/> \"]},\"80\":{\"h\":\"7. 多表映射\"},\"81\":{\"h\":\"1. 多对一\",\"t\":[\"需求：根据学生id查询相关信息包括个人信息和班级信息\",\"主表：t_stu\",\"副表：t_clazz\",\"实体类\",\"// 学生类 (省略getter和setter) public class Student{ private Integer sid;//id private String sname;//姓名 private Clazz clazz;//班级 } \",\"// 班级类 (省略getter和setter) public class Clazz{ private Integer cid;//id private String cname;//班级名 } \",\"第一种方法：级联属性映射\",\"Student selectById(Integer id); \",\"<mapper namespace=\\\"com.jcven.mapper.StudentMapper\\\"> <resultMap id=\\\"studentResultMap\\\" type=\\\"Student\\\"> <id property=\\\"sid\\\" column=\\\"sid\\\"/> <result property=\\\"sname\\\" column=\\\"sname\\\"/> <result property=\\\"clazz.cid\\\" column=\\\"cid\\\"/> <result property=\\\"clazz.cname\\\" column=\\\"cname\\\"/> </resultMap> <select id=\\\"selectById\\\" resultMap=\\\"studentResultMap\\\"> select s.sid, s.sname, c.cid, c.cname from t_stu s left join t_clazz c on s.cid = c.cid where s.sid = #{sid} </select> </mapper> \",\"第二种方法：association\",\"Student selectById(Integer id); \",\"<mapper namespace=\\\"com.jcven.mapper.StudentMapper\\\"> <resultMap id=\\\"studentResultMap\\\" type=\\\"Student\\\"> <id property=\\\"sid\\\" column=\\\"sid\\\"/> <result property=\\\"sname\\\" column=\\\"sname\\\"/> <association property=\\\"clazz\\\" javaType=\\\"Clazz\\\"> <id property=\\\"cid\\\" column=\\\"cid\\\"/> <id property=\\\"cname\\\" column=\\\"cname\\\"/> </association> </resultMap> <select id=\\\"selectById\\\" resultMap=\\\"studentResultMap\\\"> select s.sid, s.sname, c.cid, c.cname from t_stu s left join t_clazz c on s.cid = c.cid where s.sid = #{sid} </select> </mapper> \",\"第三种方式：分步查询（可复用，懒加载）\",\"Student selectByIdStep1(Integer id); Clazz selectByIdStep2(Integer id); \",\"<mapper namespace=\\\"com.jcven.mapper.StudentMapper\\\"> <resultMap id=\\\"studentResultMapStep1\\\" type=\\\"Student\\\"> <id property=\\\"sid\\\" column=\\\"sid\\\"/> <result property=\\\"sname\\\" column=\\\"sname\\\"/> <association property=\\\"clazz\\\" select=\\\"com.jcven.mapper.ClazzMapper.selectByIdStep2\\\" column=\\\"cid\\\"/> </resultMap> <select id=\\\"selectByIdStep1\\\" resultMap=\\\"studentResultMapStep1\\\"> select sid, sname, cid from t_stu where sid = #{sid} </select> </mapper> \",\"<mapper namespace=\\\"com.jcven.mapper.ClazzMapper\\\"> <select id=\\\"selectByIdStep2\\\" resultType=\\\"Clazz\\\"> select cid, cname from t_clazz where cid = #{cid} </select> </mapper> \",\"association标签下的fetchType可以指定懒加载（使用到再加载，可以提高性能）\",\"一般设置全局懒加载，在config.xml文件中的setting标签里设置 <setting name=\\\"lazyloadingEnabled\\\" value=\\\"true\\\"/>\"]},\"82\":{\"h\":\"2. 一对多\",\"t\":[\"需求：根据学生id查询相关信息包括个人信息和班级信息\",\"主表：t_clazz\",\"副表：t_stu\",\"实体类\",\"// 班级类 (省略getter和setter) public class Clazz{ private Integer cid;//id private String cname;//班级名 private List<Student> students;//学生集合 } \",\"// 学生类 (省略getter和setter) public class Student{ private Integer sid;//id private String sname;//姓名 } \",\"第一种方式：collection\",\"Calzz selectById(Integer id); \",\"<mapper namespace=\\\"com.jcven.mapper.ClazzMapper\\\"> <resultMap id=\\\"clazzResultMap\\\" type=\\\"Clazz\\\"> <id property=\\\"cid\\\" column=\\\"cid\\\"/> <result property=\\\"cname\\\" column=\\\"cname\\\"/> <collection property=\\\"students\\\" ofType=\\\"Student\\\"> <id property=\\\"sid\\\" column=\\\"sid\\\"/> <result property=\\\"sname\\\" column=\\\"sname\\\"/> </collection> </resultMap> <select id=\\\"selectById\\\" resultMap=\\\"clazzResultMap\\\"> select c.cid, c.cname, s.sid, s.sname from t_clazz c left join t_stu s where c.cid = #{cid} </select> </mapper> \",\"第二种方式：分步查询（可复用，懒加载）\",\"Calzz selectByIdStep1(Integer id); List<Student> selectByIdStep2(Integer id) \",\"<mapper namespace=\\\"com.jcven.mapper.ClazzMapper\\\"> <resultMap id=\\\"clazzResultMapStep1\\\" type=\\\"Clazz\\\"> <id property=\\\"cid\\\" column=\\\"cid\\\"/> <result property=\\\"cname\\\" column=\\\"cname\\\"/> <collection property=\\\"students\\\" select=\\\"com.jcven.mapper.StudentMapper.selectByIdStep2\\\" column=\\\"cid\\\"/> </resultMap> <select id=\\\"selectByIdStep1\\\" resultMap=\\\"clazzResultMapStep1\\\"> select cid, cname from t_clazz where cid = #{cid} </select> </mapper> \",\"<mapper namespace=\\\"com.jcven.mapper.StudentMapper\\\"> <select id=\\\"selectByIdStep2\\\" resultType=\\\"Student\\\"> select sid, sname from t_stu where cid = #{cid} </select> </mapper> \"]},\"83\":{\"h\":\"8. MyBatis缓存\",\"t\":[\"执行DQL语句时，将查询结果放到缓存中（内存），如果下一次还执行相同的语句，直接从缓存中拿数据，不再查询数据库，减少IO，提高性能，若执行其他语句，不管是对哪张表的操作都会清空缓存（一级缓存和二级缓存都清空）\"]},\"84\":{\"h\":\"1. 一级缓存\",\"t\":[\"将查询到的数据存储到SqlSession，对一次会话中的重复DQL语句会使用缓存\",\"MyBatis默认开启一级缓存\",\"可以使用sqlsession.clearCache()方法手动清空缓存\"]},\"85\":{\"h\":\"2. 二级缓存\",\"t\":[\"将查询到的数据存储到SqlSessionFactory\",\"MyBatis默认开启二级缓存，只需要在对于的mapper.xml文件中添加标签<cache/>代表使用二级缓存\",\"使用二级缓存的实体类对象必须是可序列话的，即实现Serializable接口\",\"SqlSession对象关闭或提交后，一级缓存的数据才会被写到二级缓存中，此时二级缓存才可用\"]},\"86\":{\"h\":\"9. 逆向工程\",\"t\":[\"使用mybatis插件快速生成\",\"添加插件依赖\",\"<!--定制构建过程--> <build> <!--可配置多个插件--> <plugins> <!--其中的⼀个插件：mybatis逆向⼯程插件--> <plugin> <!--插件的GAV坐标--> <groupId>org.mybatis.generator</groupId> <artifactId>mybatis-generator-maven-plugin</artifactId> <version>1.4.1</version> <!--允许覆盖--> <configuration> <overwrite>true</overwrite> </configuration> <!--插件的依赖--> <dependencies> <!--mysql驱动依赖--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.33</version> </dependency> </dependencies> </plugin> </plugins> </build> \",\"创建配置文件generatorConfig.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <!DOCTYPE generatorConfiguration PUBLIC \\\"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\\\"> <generatorConfiguration> <!-- targetRuntime有两个值： MyBatis3Simple：⽣成的是基础版，只有基本的增删改查。 MyBatis3：⽣成的是增强版，除了基本的增删改查之外还有复杂的增删改查。 --> <context id=\\\"DB2Tables\\\" targetRuntime=\\\"MyBatis3Simple\\\"> <!--防⽌⽣成重复代码--> <plugin type=\\\"org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\\\"/> <commentGenerator> <!--是否去掉⽣成⽇期--> <property name=\\\"suppressDate\\\" value=\\\"true\\\"/> <!--是否去除注释--> <property name=\\\"suppressAllComments\\\" value=\\\"true\\\"/> </commentGenerator> <!--连接数据库信息--> <jdbcConnection driverClass=\\\"com.mysql.cj.jdbc.Driver\\\" connectionURL=\\\"jdbc:mysql://localhost:3306/mybatis\\\" userId=\\\"root\\\" password=\\\"123456\\\"> </jdbcConnection> <!-- ⽣成pojo包名和位置 --> <javaModelGenerator targetPackage=\\\"com.jcven.mybatis.pojo\\\" targetProject=\\\"src/main/java\\\"> <!--是否开启⼦包--> <property name=\\\"enableSubPackages\\\" value=\\\"true\\\"/> <!--是否去除字段名的前后空⽩--> <property name=\\\"trimStrings\\\" value=\\\"true\\\"/> </javaModelGenerator> <!-- ⽣成SQL映射⽂件的包名和位置 --> <sqlMapGenerator targetPackage=\\\"com.jcven.mybatis.mapper\\\" targetProject=\\\"src/main/resources\\\"> <!--是否开启⼦包--> <property name=\\\"enableSubPackages\\\" value=\\\"true\\\"/> </sqlMapGenerator> <!-- ⽣成Mapper接⼝的包名和位置 --> <javaClientGenerator type=\\\"xmlMapper\\\" targetPackage=\\\"com.jcven.mybatis.mapper\\\" targetProject=\\\"src/main/java\\\"> <property name=\\\"enableSubPackages\\\" value=\\\"true\\\"/> </javaClientGenerator> <!-- 表名和对应的实体类名--> <table tableName=\\\"t_emp\\\" domainObjectName=\\\"Employee\\\"/> </context> </generatorConfiguration> \",\"在maven插件双击mybatis-generator:generate生成对应的实体类，mapper接口，mapperxml文件\"]},\"87\":{\"h\":\"10. PageHelper分页插件\",\"t\":[\"引入依赖\",\"<dependency> <groupId>com.github.pagehelper</groupId> <artifactId>pagehelper</artifactId> <version>5.3.1</version> </dependency> \",\"在mybatis-config.xml中添加配置\",\"<plugins> <plugin interceptor=\\\"com.github.pagehelper.PageInterceptor\\\"></plugin> </plugins> \",\"使用\",\"List<Car> selectAll(); \",\"<select id=\\\"selectAll\\\" resultType=\\\"Car\\\"> select * from t_car </select> \",\"// 使用 // 在执行查询DQL之前开启分页功能即可 @Test public void testPageHelper() throws Exception{ int pageNum = 2; int pageSize = 3; // 开启分⻚ PageHelper.startPage(pageNum, pageSize); // 执⾏查询语句 List<Car> cars = mapper.selectAll(); // 获取分⻚信息对象 // 将cars集合放入PageInfo，选择导航页数navigatePages int navigatePages = 5; PageInfo<Car> pageInfo = new PageInfo<>(cars, navigatePages); System.out.println(pageInfo); } \"]},\"88\":{\"h\":\"11. 注解开发\",\"t\":[\"注解开发适用于简单的sql编写\",\"// 查询 @Select(\\\"select *from tb_user\\\") User selectAll(Integer id); // 新增 @Insert(\\\"insert into t_car values(null,#{carNum},#{brand})\\\") int insert(Car car); // 删除 @Delete(\\\"delete from t_car where id = #{id}\\\") int deleteById(Long id); //修改 @Update(\\\"update t_car set car_num=#{carNum},brand=#{brand}\\\") int update(Car car); \"]},\"89\":{\"h\":\"MySQL 基础笔记\",\"t\":[\"MySQL-logo\"]},\"90\":{\"h\":\"1. 简介\",\"t\":[\"MySQL是一种关系型数据库管理系统，由瑞典MySQL AB公司开发，属于Oracle旗下产品。MySQL将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。\",\"MySQL所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型和大型网站的开发都选择 MySQL 作为网站数据库。\"]},\"91\":{\"h\":\"2. 常见命令\",\"t\":[\"Windows版本\",\"# 查看版本 mysql --version # 登录 mysql -h localhost -P 3306 -u root -p123456 \",\"Linux版本\"]},\"92\":{\"h\":\"3. 语法规则及分类\",\"t\":[\"语法规则\",\"SQL语句可以单行或多行书写，以分号结尾\",\"SQL语句可以使用空格/缩进来增强语句的可读性。\",\"MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。\",\"注释： 单行注释：-- 或 # 多行注释：/* 注释内容 */\",\"分类\",\"DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）\",\"DML: 数据操作语言，用来对数据库表中的数据进行增删改\",\"DQL: 数据查询语言，用来查询数据库中表的记录\",\"DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限\"]},\"93\":{\"h\":\"4. 数据类型\"},\"94\":{\"h\":\"1. 数值类型\",\"t\":[\"数值类型\",\"大小\",\"描述\",\"TINEINT\",\"1 byte\",\"小整数值\",\"SMALLINT\",\"2 byte\",\"大整数值\",\"MEDIUMINT\",\"3 byte\",\"大整数值\",\"INT或INTEGER\",\"4 byte\",\"大整数值\",\"BIGINT\",\"8 byte\",\"极大整数值\",\"FLOAT\",\"4 byte\",\"单精度浮点值\",\"DOUBLE\",\"8 byte\",\"双精度浮点值\",\"DECIMAL\",\"依赖M精度和D标度\",\"小数值(精确定点数)\",\"无符号范围 需要在后面加 UNSIGNED\",\"DOUBLE(M，D) m代表精度即总长度，d代表标度即小数点后面有几位\"]},\"95\":{\"h\":\"2. 字符串类型\",\"t\":[\"字符串类型\",\"大小 (bytes)\",\"描述\",\"CHAR\",\"0-255\",\"定长字符串\",\"VARCHAR\",\"0-65535\",\"变长字符串\",\"TINYBLOB\",\"0-255\",\"不超过255字符的二进制数据\",\"TINYTEXT\",\"0-255\",\"短文本字符串\",\"BLOB\",\"0-65535\",\"二进制形式的长文本数据\",\"TEXT\",\"0-65535\",\"长文本数据\",\"MEDIUMBLOB\",\"0-16777215\",\"二进制形式中等文本数据\",\"MEDIUMTEXT\",\"0-16777215\",\"中等文本数据\",\"LONGBLOB\",\"0-4294967295\",\"二进制形式极大文本数据\",\"LONGTEXT\",\"0-4294967295\",\"极大文本数据\"]},\"96\":{\"h\":\"3. 日期类型\",\"t\":[\"日期类型\",\"大小\",\"范围\",\"格式\",\"描述\",\"DATE\",\"3\",\"1000-01-01 至 9999-12-31\",\"YYYY-MM-DD\",\"日期值\",\"TIME\",\"3\",\"-838:59:59 至 838:59:59\",\"HH:MM:SS\",\"时间值或持续时间\",\"YEAR\",\"1\",\"1901 至 2155\",\"YYYY\",\"年份值\",\"DATETIME\",\"8\",\"1000-01-01 00:00:00 至 9999-12-31 23:59:59\",\"YYYY-MM-DD HH:MM:SS\",\"混合日期时间值\",\"TIMESTAMP\",\"4\",\"1970-01-01 00:00:01 至 2038-01-19 03:14:07\",\"YYYY-MM-DD HH:MM:SS\",\"混合日期时间值\"]},\"97\":{\"h\":\"5. DDL数据定义语言\"},\"98\":{\"h\":\"1. DDL数据库操作\",\"t\":[\"#1. 查询所有数据库 SHOW DATABASES; #2. 创建数据库 CREATE DATABASE 数据库名称; CREATE DATABASE [IF NOT EXISTS] 数据库名称 [DEFAULT CHARSET 字符集] [COLLATE 排序规则]; #3. 删除数据库 DROP DATABASE [IF EXISTS] 数据库名称; #4. 使用数据库 USE 数据库名; #5. 查询当前数据库 SELECT DATABASE(); \",\"方括号[]里的内容可根据情况选填\",\"字符集通常使用UTF8mb4\"]},\"99\":{\"h\":\"2. DDL表操作\",\"t\":[\"#1. 查询当前数据库所有表 SHOW TABLES; #2. 查询表结构 DESC 表名; #3. 查询表的详细信息 SHOW CREATE TABLE 表名; #4. 创建表 CREATE TABLE 表名( 字段 类型 [COMMENT 注释], ... 字段 类型 [COMMENT 注释] )[COMMENT 注释]; #5. 添加字段 ALTER TABLE 表名 ADD 字段名 类型(长度) [comment 注释]; #6. 修改数据类型 ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度) [comment 注释]; #7. 修改字段名和类型 ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [comment 注释]; #8. 删除字段 ALTER TABLE 表名 DROP 字段名; #9. 修改表名 ALTER TABLE 表名 RENAME TO 新表名; #10. 删除表 DROP TABLE [IF EXISTS] 表名; #11. 删除指定表并重新创建该表 TRUNCATE TABLE 表名; \",\"-- 创建一个表 create table user( id int comment '编号', name varchar(50) comment '姓名', age int comment '年龄' )comment '用户表'; \"]},\"100\":{\"h\":\"6. DML数据操作语言\"},\"101\":{\"h\":\"1. DML数据操作\",\"t\":[\"#1. 给指定字段添加数据 INSERT INTO 表名(字段名1, 字段名2,...) VALUES(值1, 值2,...); #2. 给全部字段添加数据 INSERT INTO 表名 VALUES(值1, 值2,...); #3. 批量添加数据 INSERT INTO 表名(字段名1, 字段名2,...) VALUES(值1, 值2,...),(值1, 值2,...),(值1, 值2,...); INSERT INTO 表名 VALUES(值1, 值2,...),(值1, 值2,...),(值1, 值2,...); #4. 修改数据 UPDATE 表名 SET 字段名1=值1, 字段名2=值2,...[WHERE 条件]; #5. 删除数据 DELETE FROM 表名 [WHERE 条件]; \",\"-- 修改id为1的数据将name修改为JCven UPDATE user set name = 'JCven' WHERE id = 1; -- 修改所有age为18 UPDATE user set age = 18; -- 删除id为1的数据 DELETE FROM user WHERE id = 1; -- 删除所有 DELETE FORM user; \",\"添加数据时需要一一对应\",\"修改语句的条件如果没有则会修改整张表的所有数据\",\"删除语句不能删除某一个字段的值，要删除某字段的值用UPDATE 置为null\",\"删除语句的条件如果没有则会删除整张表的所有数据\"]},\"102\":{\"h\":\"7. DQL数据查询语言\"},\"103\":{\"h\":\"1. 基本查询\",\"t\":[\"#1. 查询多个字段 SELECT 字段1, 字段2,... FROM 表名; SELECT * FROM 表名; #2. 设置别名 SELECT 字段1[AS 别名1], 字段2[AS 别名2]... FROM 表名; #3. 去除重复记录 SELECT DISTINCT 字段列表 FROM 表名; \",\"-- 查询所有date 起别名为生日(as 可省) SELECT date AS '生日' FROM user; -- 查询所有年龄(去除重复) SELECT DISTINCT date AS '生日' FROM user; \"]},\"104\":{\"h\":\"2. 条件查询\",\"t\":[\"#1. 条件查询 SELECT 字段列表 FROM 表名 WHERE 条件列表; \",\"条件运算符\",\"<> 或 !=\",\"不等于\",\"BETWEEN...AND...\",\"在某个范围内(含最大最小值)\",\"IN(...)\",\"在in之后的列表中的值，多选一\",\"LIKE 占位符\",\"模糊匹配( _匹配单个字符，%匹配任意字符)\",\"IS NULL\",\"是NULL\",\"AND 或 &&\",\"且运算 同时成立\",\"OR 或 ||\",\"或运算 任意成立\",\"NOT 或 ！\",\"非运算 否定\",\"-- 查询年龄在15-20的人员 SELECT *FROM user WHERE age>=15 && age<= 20; SELECT *FROM user WHERE age>=15 AND age<= 20; SELECT *FROM user WHERE age BETWEEN 15 AND 20; -- 查询年龄是15或20或25的人员 SELECT *FROM user WHERE age in(15,20,25); -- 查询姓名为三个字的人员(三个下划线) SELECT *FROM user WHERE name LIKE '___'; -- 查询年龄最后一位是8的人员 SELECT *FROM user WHERE age LIKE '%8'; \"]},\"105\":{\"h\":\"3. 聚合函数\",\"t\":[\"函数\",\"功能\",\"count\",\"统计数量\",\"max\",\"最大值\",\"min\",\"最小值\",\"avg\",\"平均值\",\"sum\",\"求和\",\"SELECT 聚合函数(字段列表) FROM 表名; \",\"-- 查询年龄的总和 SELECT SUM(age) FROM user; -- 查询员工的平均年龄 SELECT AVG(age) FROM user; \",\"null值不参加所有聚合函数运算\"]},\"106\":{\"h\":\"4. 分组查询\",\"t\":[\"# 分组查询 SELECT 字段列表 FROM 表名 [WHERE 条件] GROUP BY 分组字段名 [HAVING 分组后过滤条件]; \",\"-- 根据性别分组,统计男性员工和女性员工的数量 SELECT gender, COUNT(*) FROM user GROUP BY gender; -- 查询年龄小于25的员工,并根据工作地址分组，获取员工数量大于等于3的工作地址 SELECT workaddress, COUNT(*) FROM user WHERE age<25 GROUP BY workaddress HAVING COUNT(*)>=3; \",\"where是分组之前过滤，不满足where条件的不参与分组 having是对分组之后的结果进行过滤\",\"where不能对聚合函数进行判断，having可以\",\"执行顺序 where>聚合函数>having\"]},\"107\":{\"h\":\"5. 排序查询\",\"t\":[\"#升序 asc (可省略) 降序 desc SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2; \",\"-- 根据年龄对员工进行升序排序 SELECT *FROM user ORDER BY age ASC; # ASC可省略 -- 根据年龄对员工进行升序排序,年龄相同的按照生日进行降序排序 SELECT *FROM user ORDER BY age ASC, date desc; \"]},\"108\":{\"h\":\"6. 分页查询\",\"t\":[\"#分页查询 SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数 \",\"-- 查询第一页员工数据,每页展示10条 SELECT *FROM user LIMIT 0,10; SELECT *FROM user LIMIT 10; -- 查询第二页员工数据,每页展示10条 SELECT *FROM user LIMIT 10,10; \",\"起始索引从0开始 起始索引=(查询页码-1)*每页显示记录数\",\"如果查询的是第一页数据, 起始索引可以省略, 直接写limit10\"]},\"109\":{\"h\":\"7. 执行顺序\",\"t\":[\"执行顺序\",\"关键字\",\"释义\",\"1\",\"FROM\",\"表名列表\",\"2\",\"WHERE\",\"条件列表\",\"3\",\"GROUP BY\",\"分组字段列表\",\"4\",\"HAVING\",\"分组后条件列表\",\"5\",\"SELECT\",\"字段列表\",\"6\",\"ORDER BY\",\"排序字段列表\",\"7\",\"LIMIT\",\"分页参数\"]},\"110\":{\"h\":\"8. DCL数据控制语言\"},\"111\":{\"h\":\"1. 用户管理\",\"t\":[\"#1. 查询用户 USE mysql; SELECT *FROM user; #2. 创建用户 CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码'; CREATE USER '用户名'@'%' IDENTIFIED BY '密码'; #3. 修改用户密码 ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码'; #4. 删除用户 DROP USER '用户名'@'主机名'; \"]},\"112\":{\"h\":\"2. 权限控制\",\"t\":[\"权限\",\"说明\",\"ALL\",\"所有权限\",\"SELECT\",\"查询数据\",\"INSERT\",\"插入数据\",\"UPDATA\",\"修改数据\",\"DELETE\",\"删除数据\",\"ALTER\",\"修改表\",\"DROP\",\"删除数据库/表/视图\",\"CREATE\",\"创就数据库/表\",\"#1. 查询权限 SHOW GRANTS FOR '用户名'@'主机名' #2. 授予权限 GRANT 权限列表 ON 数据库.表名 TO '用户名'@'主机名'; #3. 撤销权限 REVOKE 权限列表 ON 数据库.表名 FROM '用户名'@'主机名'; \"]},\"113\":{\"h\":\"9. 函数\"},\"114\":{\"h\":\"1. 字符串函数\",\"t\":[\"函数\",\"功能\",\"CONCAT(S1, S2, ...Sn)\",\"字符串拼接，将S1,S2...Sn拼接成一个字符串\",\"LOWER(str)\",\"将字符串str全部转化为小写\",\"UPPER(str)\",\"将字符串str全部转化为大写\",\"LPAD(str,n,pad)\",\"左填充，用字符串pad对str左边进行填充，达到n个字符串长度\",\"RPAD(str,n,pad)\",\"右填充，用字符串pad对str左边进行填充，达到n个字符串长度\",\"TRIM(str)\",\"去掉字符串头部和尾部的空格\",\"SUBSTRING(str,start,len)\",\"返回从字符串str从start位置起的len个长度的字符串\",\"-- 更新员工工号为5位数, 不足的前面补0 UPDATE emp set worknumber = lpad(worknumber, 5, '0'); \"]},\"115\":{\"h\":\"2. 数值函数\",\"t\":[\"函数\",\"功能\",\"CELT(x)\",\"向上取整\",\"FLOOR(x)\",\"向下取整\",\"MOD(x,y)\",\"返回x/y的模\",\"RAND()\",\"返回0~1内的随机数\",\"ROUND(x,y)\",\"求x的四舍五入值，保留y位小数\"]},\"116\":{\"h\":\"3. 日期函数\",\"t\":[\"函数\",\"功能\",\"CURDATE()\",\"返回当前日期\",\"CURTIME()\",\"返回当前时间\",\"NOW()\",\"返回当前日期和时间\",\"YEAR(date)\",\"获取指定date的年份\",\"MONTH(date)\",\"获取指定date的月份\",\"DAY(date)\",\"获取指定date的日期\",\"DATE_ADD(date,INTERVAL expr type)\",\"返回一个日期/时间值 加上一个时间间隔expr后的时间值\",\"DATEDIFF(date1,date2)\",\"返回起始时间date1和结束时间date2之间的天数\"]},\"117\":{\"h\":\"4. 流程函数\",\"t\":[\"函数\",\"功能\",\"IF(value,t,f)\",\"如果value为true则返回t，否则返回f\",\"IFNULL(value1,value2)\",\"如果value不为空则返回value1，否则返回value2\",\"CASE WHEN [val1] THEN [res1]...ELSE [default] END\",\"如果val1为true，返回res1,...否则返回default默认值\",\"CASE [expr] WHEN [val1] THEN [res1]...ELSE [default] END\",\"如果expr的值等于val1，返回res1,...否则返回default默认值\"]},\"118\":{\"h\":\"10. 约束\"},\"119\":{\"h\":\"1. 常用约束\",\"t\":[\"关键字\",\"约束\",\"描述\",\"NOT NULL\",\"非空约束\",\"限制该字段的数据不能为null\",\"UNIQUE\",\"唯一约束\",\"保证该字段的所有数据唯一且不重复\",\"PRIMARY\",\"主键约束\",\"主键是一行数据的唯一标识，要求非空且唯一\",\"DEFAULT\",\"默认约束\",\"保存数据时，如果未指定该字段的值则采用默认值\",\"CHECK\",\"检查约束\",\"保证字段值满足某一个条件\",\"FOREIGN KEY\",\"外键约束\",\"用来让两张表的数据之间建立连接，保证数据一致性和完整性\",\"约束作用于表中字段上的，在创建表或修改表的时候添加约束\",\"-- 创建表要求 -- 1. id为主键 且自动增长 -- 2. name不为空 且唯一 -- 3. age大于0且小于等于120 -- 4. status默认为1 create table emp( id int primary key auto_increment comment '主键', name varchar(10) not null unique comment '姓名', age int check ( age>0&&age<120 )comment '年龄', status char(1) default '1' comment '状态', gender char(1) comment '性别' ); \"]},\"120\":{\"h\":\"2. 外键约束\",\"t\":[\"#添加外键 CREATE TABLE 表名( ... [CONSTRAINT][外键名称] FOREIGN KEY (外键字段名) REFERENCES 主表(主列表名) ); #或者 ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主列表名); #删除外键 ALTER TABLE 表名 DROP FOREIGN KEY 外键名称; \",\"-- 对user表添加外键emp_dept_id ALTER TABLE user ADD CONSTRAINT dept_id FOREIGN KEY (dept_id) REFERENCES dept(id); -- 删除emp_dept_id外键 ALTER TABLE user DROP FOREIGN KEY emp_dept_id; \",\"行为\",\"说明\",\"NO ACTION\",\"当在父表中删除/更新对应记录时，先检查该记录是否有外键，若有则不允许删除/更新\",\"RESTRICT\",\"当在父表中删除/更新对应记录时，先检查该记录是否有外键，若有则不允许删除/更新\",\"CASCADE\",\"当在父表中删除/更新对应记录时，先检查该记录是否有外键，若有则也删除/更新子表中的记录\",\"SET NULL\",\"当在父表中删除对应记录时，先检查该记录是否有外键，若有则设置子表外键值为null\",\"SET DEFAULT\",\"父表变更时，子表将外键列设置成一个默认的值\",\"-- 外键删除更新行为CASCADE ALTER TABLE user ADD CONSTRAINT dept_id FOREIGN KEY (dept_id) REFERENCES dept(id) ON UPDATE CASCADE ON DELETE CASCADE; -- 外键删除更新行为SET NULL ALTER TABLE user ADD CONSTRAINT dept_id FOREIGN KEY (dept_id) REFERENCES dept(id) ON UPDATE SET NULL ON DELETE SET NULL; \"]},\"121\":{\"h\":\"11. 多表查询\",\"t\":[\"一对多(多对一)通过外键来关联\",\"多对多 建立中间表来维护两方\",\"一对一 多用于单表拆分\"]},\"122\":{\"h\":\"1. 内连接\",\"t\":[\"内连接查询的是两张表交集的部分\",\"#1. 隐式内连接 SELECT 字段列表 FROM 表1,表2 WHERE 条件...; #2. 显示内连接 SELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON 连接条件; \",\"-- 查询每个员工的姓名及关联的部门的名称隐式内连接 SELECT emp.name, dept.name FROM emp,dept where emp.dept_id = dept.id; -- 显示内连接 SELECT emp.name, dept.name FROM emp JOIN dept ON emp.dept_id = dept.id; \",\"如果给表起了别名就不能通过表名.字段来限定\"]},\"123\":{\"h\":\"2. 外连接\",\"t\":[\"#左外连接(左表+交集) SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件; #右外连接(右表+交集) SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON 条件; \",\"-- 查询emp表的所有数据和对应的部门信息(左外连接) SELECT emp.*, dept.name FROM emp LEFT JOIN dept ON emp.dept_id = dept.id; -- 查询dept表的所有数据和对应的员工信息(右外连接) SELECT emp.*, dept.* FROM emp RIGHT JOIN dept ON emp.dept_id = dept.id; \"]},\"124\":{\"h\":\"3. 自连接\",\"t\":[\"# 自连接 SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件; \",\"-- 查询员工及其所属领导的名字(自内连接) SELECT a.name, b.name FROM emp a, emp b where a.managerid = b.id; -- 查询员工及其所属领导的名字,没有领导也要查询出来(自外连接) SELECT a.name, b.name FROM emp a LEFT JOIN emp b ON a.managerid = b.id; \",\"自连接查询可以是内连接查询也可以是外连接查询\",\"自连接必须起别名\"]},\"125\":{\"h\":\"4. 联合查询\",\"t\":[\"#联合查询 SELECT 字段列表 FROM 表A ... UNION[ALL] SELECT 字段列表 FROM 表B ...; \",\"-- 查询薪资低于5000的员工和年龄大于50岁的员工 SELECT *FROM emp WHERE salary <5000 UNION ALL SELECT *FROM emp WHERE age > 50; -- 合并后去重(去掉ALL即可) SELECT *FROM emp WHERE salary <5000 UNION SELECT *FROM emp WHERE age > 50; \",\"联合查询到多张表的列数必须保持一致,字段类型也需要保持一致\"]},\"126\":{\"h\":\"5. 子查询\",\"t\":[\"#子查询(嵌套查询) SELECT *FORM t1 WHERE conlumn1 = (SELECT conlumn1 FROM t2); \",\"标量子查询\",\"#1. 标量子查询(返回单个值) #常用操作符 > < >= <= = != -- 查询\\\"销售部\\\"的所有员工信息 SELECT *FROM emp WHERE dept_id = (SELECT id FROM dept where name = '销售部'); -- 查询在\\\"Tom\\\"之后入职的员工信息 SELECT *FROM emp WHERE entrydate > (SELECT entrydate FROM emp where name = 'Tom'); \",\"列子查询\",\"操作符\",\"描述\",\"IN\",\"在指定的集合范围内,多选一\",\"NOT IN\",\"不在指定的集合范围之内\",\"ANY\",\"子查询返回列表中有任意一个满足即可\",\"SOME\",\"与ANY相同,使用SOME的地方都可以使用ANY\",\"ALL\",\"子查询返回列表的所有值都必须满足\",\"#2. 列子查询(返回一列,可以是多行) #常用操作符 IN,NOT IN,ANY,SOME,ALL -- 查询销售部和市场部的所有员工信息 SELECT *FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE name = '销售部' OR name = '市场部'); -- 查询比财务部所有人工工资都高的员工信息 SELECT *FROM emp WHERE salary > ALL (SELECT salary FROM emp WHERE dept_id = (SELECT id FROM dept WHERE name = '财务部')); -- 查询比研发部中任意一人工资高的员工信息 SELECT *FROM emp WHERE salary > ANY (SELECT salary FROM emp WHERE dept_id = (SELECT id FROM dept WHERE name = '研发部')); \",\"行子查询\",\"#3. 行子查询(返回一行,可以是多列) #常用操作符 =,<,>,IN,NOT IN -- 查询与Tom的薪资及直属领导相同的员工信息 SELECT *FROM emp WHERE (salary, managerid) = (SELECT salary, managerid FROM emp WHERE name = 'Tom'); \",\"表子查询\",\"#4. 表子查询 #常用操作符 IN -- 查询与 Tom, Jack 的职位和薪资相同的员工信息 SELECT *FROM emp WHERE (job, salary) IN (SELECT salary, managerid FROM emp WHERE name = 'Tom' OR name = 'Jack'); -- 查询入职日期在2006-01-01之后的员工信息 SELECT e.*, d.* FROM (SELECT *FROM emp WHERE entrydate > '2006-01-01') e LEFT JOIN dept d ON e.dept_id = d.id; \",\"子查询外部也可以是 INSERT / UPDATE / DELETE / SELECT 任意一个\",\"子查询位置 WHERE之后 / FROM之后 / SELECT之后\"]},\"127\":{\"h\":\"12. 事务\"},\"128\":{\"h\":\"1. 事务特性\",\"t\":[\"事务的四大特性ACID\",\"特性\",\"描述\",\"原子性\",\"事务是不可分割的最小操作单元,要么全部成功,要么全部失败\",\"一致性\",\"事务完成时,必须是所有的数据都保持一致状态\",\"隔离性\",\"数据库系统提供的隔离机制,保证事务不收外部并发影响操作\",\"持久性\",\"事务一旦提交或者回滚,它对数据库的数据改变是永久的\"]},\"129\":{\"h\":\"2. 事务操作\",\"t\":[\"# 查看事务提交方式(1代表自动,0代表手动) SELECT @@autocommit; # 设置事务提交方式 SET @@autocommit = 0; # 提交事务 COMMIT; # 回滚事务 ROLLBACK; # 开启事务 START TRANSACTION 或 BEGIN # 提交事务 COMMIT; # 回滚事务 ROLLBACK; \"]},\"130\":{\"h\":\"3. 并发事务问题\",\"t\":[\"问题\",\"描述\",\"脏读\",\"一个事务读到另外一个事务还没有提交的数据\",\"不可重复读\",\"一个事务先后读取同一条数据,但两次读取的数据不同\",\"幻读\",\"一个事务查询数据时没有数据,但插入数据时,数据已经存在\"]},\"131\":{\"h\":\"4. 事务隔离级别\",\"t\":[\"隔离级别\",\"脏读\",\"不可重复读\",\"幻读\",\"Read uncommitted\",\"√\",\"√\",\"√\",\"Read committed\",\"×\",\"√\",\"√\",\"Repeatable Read(默认)\",\"×\",\"×\",\"√\",\"Serializable\",\"×\",\"×\",\"×\",\"# 查看事务的隔离级别 SELECT @@TRANSACTION_ISOLATION; # 设置事务的隔离级别 SET[SESSION|GLOBAL] TRANSACTION_ISOLATION LEVEL {隔离级别} \"]},\"132\":{\"h\":\"Spring 笔记\"},\"133\":{\"h\":\"1. Spring简介\",\"t\":[\"Spring\",\"Spring 是一款主流的 Java EE 轻量级开源框架，Spring 由\\\"Spring 之父\\\" Rod Johnson 提出并创立，其目的是用于简化 Java 企业级应用的开发难度和开发周期。Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring 框架除了自己提供功能外，还提供整合其他技术和框架的能力。\",\"IoC\",\"IoC 是 Inversion of Control 的简写，译为\\\"控制反转\\\"，它是一种设计思想，是一个重要的面向对象编程法则，能够指导我们如何设计出松耦合、更优良的程序。Spring 通过 IoC 容器来管理所有 Java 对象的实例化和初始化，控制对象与对象之间的依赖关系。我们将由 IoC 容器管理的 Java 对象称为 Spring Bean，它与使用关键字 new 创建的 Java 对象没有任何区别。IoC 容器是 Spring 框架中最重要的核心组件之一，它贯穿了 Spring 从诞生到成长的整个过程。\"]},\"134\":{\"h\":\"2. 快速入门\",\"t\":[\"创建工程引入依赖\",\"<!-- 引入spring-context基础依赖--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>6.0.2</version> </dependency> \",\"编写xml配置文件\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <!-- 配置一个名为user的bean--> <bean id=\\\"user\\\" class=\\\"com.jcven.spring.User\\\"></bean> </beans> \",\"执行测试\",\"public void test() { // 加载spring配置文件 ApplicationContext context = new ClassPathXmlApplicationContext(\\\"bean.xml\\\"); // 获取bean对象 User user = (User) context.getBean(\\\"user\\\"); // 调用对象方法 user.add(); } \"]},\"135\":{\"h\":\"3. 基于xml管理bean\"},\"136\":{\"h\":\"1. bean的获取\",\"t\":[\"获取bean\",\"public static void main(String[] args) { ApplicationContext context = new ClassPathXmlApplicationContext(\\\"bean.xml\\\"); // 1. 根据id获取 context.getBean(\\\"user\\\"); // 2. 根据类型获取 context.getBean(User.class); // 3. 根据id和类型获取 context.getBean(\\\"user\\\", User.class); } \",\"根据类型获取bean的时候, 容器中只能有一个此类型的bean\",\"如果一个接口只有一个实现类对象可以通过接口获得对象实例\",\"public static void main(String[] args) { ApplicationContext context = new ClassPathXmlApplicationContext(\\\"bean.xml\\\"); UserService userService = context.getBean(UserService.class); System.out.println(userService); // 输出UserServiceImpl对象 } \",\"接口如果有两个实现类对象, 不能通过接口类型获取对象实例\"]},\"137\":{\"h\":\"2. 依赖注入\",\"t\":[\"setter注入\",\"<!-- 配置bean --> <bean id=\\\"user\\\" class=\\\"com.jcven.spring.User\\\"> <property name=\\\"name\\\" value=\\\"张三\\\"></property> <property name=\\\"age\\\" value=\\\"18\\\"></property> </bean> \",\"//测试 public static void main(String[] args) { ApplicationContext context = new ClassPathXmlApplicationContext(\\\"bean.xml\\\"); User user = (User) context.getBean(\\\"user\\\"); System.out.println(user); //输出 user对象包含对应的属性值 } \",\"构造器注入\",\"<!-- 配置bean --> <bean id=\\\"user\\\" class=\\\"com.jcven.spring.User\\\"> <constructor-arg name=\\\"age\\\" value=\\\"18\\\"></constructor-arg> <constructor-arg name=\\\"name\\\" value=\\\"张三\\\"></constructor-arg> </bean> \",\"//测试 public static void main(String[] args) { ApplicationContext context = new ClassPathXmlApplicationContext(\\\"bean.xml\\\"); User user = (User) context.getBean(\\\"user\\\"); System.out.println(user); //输出 user对象包含对应的属性值 } \",\"特殊值处理\",\"<!-- 1. null值处理用null标签 --> <property name=\\\"age\\\"><null/></property> <!-- 2. <>尖括号处理需要转义 --> <property name=\\\"name\\\" value=\\\"&lt;&gt;>\\\"></property> <!-- 3. 使用CDATE区显示特殊符号 --> <property name=\\\"name\\\"><value><![CDATA[特殊字符]]></value></property> \",\"对象类型注入\",\"<!-- 1. 引入外部bean --> <bean id=\\\"employee\\\" class=\\\"com.jcven.spring.Employee\\\"> <!-- 将dept作为对象注入到emp的属性中 --> <property name=\\\"dept\\\" ref=\\\"dept\\\"></property> </bean> <bean id=\\\"dept\\\" class=\\\"com.jcven.spring.Dept\\\"> <property name=\\\"name\\\" value=\\\"研发部\\\"></property> </bean> <!-- 2. 内部bean --> <bean id=\\\"employee\\\" class=\\\"com.jcven.spring.Employee\\\"> <property name=\\\"dept\\\"> <bean id=\\\"dept\\\" class=\\\"com.jcven.spring.Dept\\\"> <property name=\\\"name\\\" value=\\\"研发部\\\"></property> </bean> </property> </bean> <!-- 3. 级联属性 --> <bean id=\\\"employee\\\" class=\\\"com.jcven.spring.Employee\\\"> <property name=\\\"dept\\\" ref=\\\"dept\\\"></property> <property name=\\\"dept.name\\\" value=\\\"测试部\\\"></property> </bean> <bean id=\\\"dept\\\" class=\\\"com.jcven.spring.Dept\\\"> <property name=\\\"name\\\" value=\\\"研发部\\\"></property> </bean> \",\"集合类型注入\",\"<!-- 1. 数组类型注入 --> <bean id=\\\"user\\\" class=\\\"com.jcven.spring.User\\\"> <property name=\\\"likes\\\"> <array> <value>吃</value> <value>睡</value> </array> </property> </bean> <!-- 2. 集合类型注入 --> <bean id=\\\"user\\\" class=\\\"com.jcven.spring.User\\\"> <property name=\\\"students\\\"> <!-- list或set --> <list> <ref bean=\\\"studentOne\\\"></ref> <ref bean=\\\"studentTwo\\\"></ref> <ref bean=\\\"studentThree\\\"></ref> </list> </property> </bean> <!-- 3. Map类型注入 --> <bean id=\\\"user\\\" class=\\\"com.jcven.spring.User\\\"> <property name=\\\"map\\\"> <map> <entry> <key> <value>10010</value> </key> <ref bean=\\\"Employee\\\"></ref> </entry> <entry> <key> <value>10086</value> </key> <ref bean=\\\"Employee\\\"></ref> </entry> </map> </property> </bean> \",\"集合类型bean注入\",\"<!-- 引入相应的命名空间 --> <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:util=\\\"http://www.springframework.org/schema/util\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> \",\"<!-- list集合类型的bean --> <util:list id=\\\"students\\\"> <ref bean=\\\"studentOne\\\"></ref> <ref bean=\\\"studentTwo\\\"></ref> <ref bean=\\\"studentThree\\\"></ref> </util:list> <!-- map集合类型的bean --> <util:map id=\\\"teacherMap\\\"> <entry> <key> <value>10010</value> </key> <ref bean=\\\"teacherOne\\\"></ref> </entry> <entry> <key> <value>10086</value> </key> <ref bean=\\\"teacherTwo\\\"></ref> </entry> </util:map> <!-- 引用使用ref --> <property name=\\\"teacherMap\\\" ref=\\\"teacherMap\\\"></property> \",\"p命名空间注入\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:util=\\\"http://www.springframework.org/schema/util\\\" xmlns:p=\\\"http://www.springframework.org/schema/p\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <bean id=\\\"studentSix\\\" class=\\\"com.jcven.spring.bean.Student\\\" p:id=\\\"10086\\\" p:name=\\\"小明\\\" p:clazz-ref=\\\"clazzOne\\\" p:teacherMap-ref=\\\"teacherMap\\\"></bean> \",\"引入外部属性文件\",\"引入依赖\",\"<!-- MySQL驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.30</version> </dependency> <!-- 数据源 --> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.2.15</version> </dependency> \",\"创建外部属性文件 jdbc.properties\",\"jdbc.user=root jdbc.password=atguigu jdbc.url=jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC jdbc.driver=com.mysql.cj.jdbc.Driver \",\"引入属性文件，引入context 名称空间\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> </beans> \",\"引入外部属性文件\",\"<!-- 引入外部属性文件 --> <context:property-placeholder location=\\\"classpath:jdbc.properties\\\"/> \",\"配置bean\",\"<bean id=\\\"druidDataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"url\\\" value=\\\"${jdbc.url}\\\"/> <property name=\\\"driverClassName\\\" value=\\\"${jdbc.driver}\\\"/> <property name=\\\"username\\\" value=\\\"${jdbc.user}\\\"/> <property name=\\\"password\\\" value=\\\"${jdbc.password}\\\"/> </bean> \",\"测试\",\"@Test public void testDataSource() throws SQLException { ApplicationContext ac = new ClassPathXmlApplicationContext(\\\"spring-datasource.xml\\\"); DataSource dataSource = ac.getBean(DataSource.class); Connection connection = dataSource.getConnection(); System.out.println(connection); } \"]},\"138\":{\"h\":\"3. bean的作用域\",\"t\":[\"在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围，各取值含义参加下表：\",\"取值\",\"含义\",\"创建对象的时机\",\"singleton（默认）\",\"在IOC容器中，这个bean的对象始终为单实例\",\"IOC容器初始化时\",\"prototype\",\"这个bean在IOC容器中有多个实例\",\"获取bean时\",\"如果是在WebApplicationContext环境下还会有另外几个作用域（但不常用）：\",\"取值\",\"含义\",\"request\",\"在一个请求范围内有效\",\"session\",\"在一个会话范围内有效\",\"<!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 --> <!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --> <bean class=\\\"com.jcven.spring.bean.User\\\" scope=\\\"prototype\\\"></bean> \"]},\"139\":{\"h\":\"4. bean的生命周期\",\"t\":[\"具体过程\",\"bean对象创建（调用无参构造器）\",\"bean对象设置属性\",\"bean的后置处理器（初始化之前）\",\"bean对象初始化（需在配置bean时指定初始化方法）\",\"bean的后置处理器（初始化之后）\",\"bean对象创建完成\",\"bean对象销毁（需在配置bean时指定销毁方法）\",\"IOC容器关闭\",\"配置bean\",\"<!-- 使用init-method属性指定初始化方法 --> <!-- 使用destroy-method属性指定销毁方法 --> <bean class=\\\"com.jcven.spring.bean.User\\\" scope=\\\"prototype\\\" init-method=\\\"initMethod\\\" destroy-method=\\\"destroyMethod\\\"> <property name=\\\"id\\\" value=\\\"1001\\\"></property> </bean> \",\"配置后置处理器\",\"<!-- bean的后置处理器要放入IOC容器才能生效 --> <bean id=\\\"myBeanProcessor\\\" class=\\\"com.jcven.spring.process.MyBeanProcessor\\\"/> \",\"// 实现接口BeanPostProcessor public class MyBeanProcessor implements BeanPostProcessor { @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { System.out.println(\\\"后置处理器初始化之前\\\"); return bean; } @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { System.out.println(\\\"后置处理器初始化之后\\\"); return bean; } } \",\"测试\",\"@Test public void testLife(){ //使用ClassPathXmlApplicationContext类 ClassPathXmlApplicationContext ac = new ClassPathXmlApplicationContext(\\\"spring-lifecycle.xml\\\"); User bean = ac.getBean(User.class); //调用close方法关闭容器, bean对象在关闭前会销毁 ac.close(); } \"]},\"140\":{\"h\":\"5. FactoryBean\",\"t\":[\"通常用于整合第三方bean\",\"创建类UserFactoryBean\",\"public class UserFactoryBean implements FactoryBean<User> { @Override public User getObject() throws Exception { return new User(); } @Override public Class<?> getObjectType() { return User.class; } } \",\"配置bean\",\"<bean id=\\\"user\\\" class=\\\"com.atguigu.spring6.bean.UserFactoryBean\\\"></bean> \",\"测试\",\"@Test public void testUserFactoryBean(){ //获取IOC容器 ApplicationContext ac = new ClassPathXmlApplicationContext(\\\"spring-factorybean.xml\\\"); User user = (User) ac.getBean(\\\"user\\\"); System.out.println(user); } \"]},\"141\":{\"h\":\"6. 基于xml的自动装配\",\"t\":[\"<!-- 自动装配根据类型或名称autowire=\\\"byType\\\" 或者\\\"byName\\\" --> <bean id=\\\"userController\\\" class=\\\"com.atguigu.spring6.autowire.controller.UserController\\\" autowire=\\\"byType\\\"></bean> \",\"@Test public void testAutoWireByXML(){ ApplicationContext ac = new ClassPathXmlApplicationContext(\\\"autowire-xml.xml\\\"); UserController userController = ac.getBean(UserController.class); userController.saveUser(); } \"]},\"142\":{\"h\":\"4. 基于注解管理bean\"},\"143\":{\"h\":\"1. 基于注解管理\",\"t\":[\"开启组件扫描\",\"<!--添加相关约束--> <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <!--开启组件扫描功能--> <context:component-scan base-package=\\\"com.jcven.spring\\\"></context:component-scan> </beans> \",\"或使用配置类开启组件扫描\",\"@Configuration @ComponentScan(\\\"com.jcven.spring\\\") public class SpringConfig { } \",\"将对应类加入Ioc容器\",\"//加入注解Componment (\\\"ID名称\\\") @Component(\\\"bookDao\\\") public class BookDaoImpl implements BookDao{} //或者不加括号 @Component public class BookServiceImpl implements BookService{} //衍生注解 业务层@Service 数据层@Repository 表现层@Controller \",\"测试\",\"public class App { public static void main(String[] args) { //读取配置类 ApplicationContext ctx = new AnnotationConfigApplicationContext(SpringConfig.class); BookDao bookDao = (BookDao) ctx.getBean(\\\"bookDao\\\"); bookDao.save(); } } \"]},\"144\":{\"h\":\"2. 常用注解\",\"t\":[\"组件类注解\",\"放在相关类上使其成为 Spring 管理的 Bean。当使用基于注解的配置和类路径扫描时，这些类被视为自动检测的候选对象\",\"注解\",\"说明\",\"@Component\",\"该注解用于描述 Spring 中的 Bean，它是一个泛化的概念，仅仅表示容器中的一个组件（Bean），并且可以作用在应用的任何层次，例如 Service 层、Dao 层等。 使用时只需将该注解标注在相应类上即可。\",\"@Repository\",\"该注解用于将数据访问层（Dao 层）的类标识为 Spring 中的 Bean，其功能与 @Component 相同。\",\"@Service\",\"该注解通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。\",\"@Controller\",\"该注解通常作用在控制层（如SpringMVC 的 Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。\",\"配置类注解\",\"注解\",\"说明\",\"@Configuration\",\"声明当前类是一个配置类\",\"@ComponentScan\",\"开启组件扫描，自动扫描包下所有使用\",\"@EnableTransactionManagement\",\"开启事务\",\"@EnableAspectJAutoProxy\",\"开启Spring对AspectJ的支持\",\"@EnableAsync\",\"开启异步任务支持\",\"@EnableScheduling\",\"开启对计划任务的支持\",\"依赖注入注解\",\"注解\",\"说明\",\"@Value\",\"值注入\",\"@Autowired\",\"默认根据type装配\",\"@Resource\",\"默认根据name装配\"]},\"145\":{\"h\":\"3. 注解详解\",\"t\":[\"生命周期和作用范围\",\"@Component(\\\"bookDao\\\") @Scope(\\\"singleton\\\")//单例 (\\\"prototype\\\") 非单例 public class BookDaoImpl implements BookDao {} \",\"public class BookDaoImpl implements BookDao { public void save() { System.out.println(\\\"book dao save ...\\\"); } //构造方法后 @PostConstruct public void init() { System.out.println(\\\"init save ...\\\"); } //销毁前 @PreDestroy public void destroy() { System.out.println(\\\"destroy save ...\\\"); } } \",\"依赖注入\",\"//引用类型注入 @Service public class BookService implements BookService{ @Autowired //自动装配 @Qualifier(\\\"bookDao\\\") //指定记载某个bean(一般不写,除非需要特别指定) private BookDao bookDao; //需要提供无参构造器 无需set方法 } //简单类型注入 @Value(\\\"name\\\") private String name; //通过外部properties注入简单类型 //配置 @Configuration @ComponentScan(\\\"com.learn\\\") @PropertySource(\\\"classpath:jdbc.properties\\\") public class SpringConfig {} //使用 @Value(\\\"${name}\\\") private String name; \",\"第三方bean管理\",\"public class JdbcConfig { //1. 定义一个方法获得要管理对象 //2. 添加@Bean 表示当前返回值是一个bean @Bean public DataSource dataSource(){ DruidDataSource ds = new DruidDataSource(); ds.setDriverClassName(\\\"com.mysql.jdbc.Driver\\\"); return ds; } } //创建新的配置类 然后导入到SpringConfig @Configuration @Import({JdbcConfig.class}) public class SpringConfig {} \",\"public class App { public static void main(String[] args) { AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(SpringConfig.class); DateSource dataSource = ctx.getBean(DateSource.class); } } \",\"第三方bean注入资源\",\"//简单类型注入 public class JdbcConfig { @Value(\\\"com.mysql.jdbc.Driver\\\") private String driver; @Bean public DataSource dataSource(){ DruidDataSource ds = new DruidDataSource(); ds.setDriverClassName(driver); return ds; } } \",\"//引用类型注入 @Configuration @ComponentScan(\\\"com.learn\\\") @PropertySource(\\\"classpath:jdbc.properties\\\") public class SpringConfig {} //引用类型注入设置形参即可 public class JdbcConfig { @Value(\\\"com.mysql.jdbc.Driver\\\") private String driver; @Bean public DataSource dataSource(BookDao bookDao){//加入形参 DruidDataSource ds = new DruidDataSource(); ds.setDriverClassName(driver); return ds; } } \"]},\"146\":{\"h\":\"5. AOP面向切面编程\",\"t\":[\"AOP（Aspect Oriented Programming）面向切面编程，它是一种设计思想，是面向对象编程的一种补充和完善，它通过预编译方式和运行期动态代理方式实现，在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术（例如事务处理、日志管理、权限控制等）利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。\",\"Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 JDK Proxy，去创建代理对象，而对于没有实现接口的对象，Spring AOP 会使用 Cglib 生成一个被代理对象的子类来作为代理\"]},\"147\":{\"h\":\"1. 步骤\",\"t\":[\"添加依赖\",\"<!--spring aop依赖--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aop</artifactId> <version>6.0.2</version> </dependency> <!--spring aspects依赖--> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> <version>6.0.2</version> </dependency> \",\"创建切面类并配置\",\"//定义一个通知类 @Component @Aspect //用来做AOP public class MyAdvice { //定义切入点 @Pointcut(\\\"execution(void com.learn.dao.BookDao.update(..))\\\") private void pt(){} //切入点与通知绑定 @Before(\\\"pt()\\\") public void method(){ System.out.println(System.currentTimeMillis()); } } \",\"配置类开启AOP\",\"//springconfig类里面添加@EnableAspectJAutoProxy 表示添加AOP @Configuration @ComponentScan(\\\"com.jcven\\\") @EnableAspectJAutoProxy public class SpringConfig {} \"]},\"148\":{\"h\":\"2. 切入点表达式\",\"t\":[\"标准格式\",\"//切入点表达式标准格式 //execution(访问修饰符 返回值 包名.类名/接口名.方法名 (参数) 异常名) @Point(\\\"execution(void com.learn.service.BookService.save())\\\") //访问修饰符public可省 异常也可省 \",\"通配符\",\"// *: 单个独立的任意符号,可以独立出现,也可以作为前缀后缀的匹配符出现 // ..: 多个连续的任意符号,可以独立出现,用于简化包名与参数的书写 // +: 专用于匹配子类类型 //例如 execution(void com.learn.service.BookService.save()) execution(* com.learn.service.BookService.save()) //√ execution(void com.*.*.*.save()) //√ execution(void *..save()) //√ execution(* *..*(..)) //√ execution(* *..s*(..)) //√ execution(* *..*e(..)) //√ \",\"注意事项:\",\"描述切入点通常描述接口, 不描述实现类\",\"返回值类型对于增删改类使用精准类型匹配, 查询类使用*通配快速描述\",\"包名书写尽量不适用 .. 匹配, 通常*做单个包描述匹配, 或精准匹配\",\"接口名/类名书写名称与模块相关的采用* 匹配, 例如UserService 书写成*Service, 绑定业务层接口名\",\"方法名书写以动词进行精准匹配, 名词采用* 匹配, 例如getByld书写成 getBy* ; selectAll书写不变\",\"通常不适用异常作为匹配规则\"]},\"149\":{\"h\":\"3. 通知类型\",\"t\":[\"前置通知：使用@Before注解标识，在被代理的目标方法前执行\",\"返回通知：使用@AfterReturning注解标识，在被代理的目标方法成功结束后执行（寿终正寝）\",\"异常通知：使用@AfterThrowing注解标识，在被代理的目标方法异常结束后执行（死于非命）\",\"后置通知：使用@After注解标识，在被代理的目标方法最终结束后执行（盖棺定论）\",\"环绕通知：使用@Around注解标识，使用try...catch...finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置\",\"各种通知的执行顺序：\",\"Spring版本5.3.x以前： \",\"前置通知\",\"目标操作\",\"后置通知\",\"返回通知或异常通知\",\"Spring版本5.3.x以后： \",\"前置通知\",\"目标操作\",\"返回通知或异常通知\",\"后置通知\",\"AOP通知类型\",\"//通知类 @Component @Aspect public class MyAdvice { //定义切入点 @Pointcut(\\\"execution(void com.learn.dao.BookDao.update(..))\\\") private void pt(){} //1. 前置通知 @Before(\\\"pt()\\\") public void before(){ System.out.println(\\\"before\\\"); } //2. 后置通知 @After(\\\"pt()\\\") public void after(){ System.out.println(\\\"after\\\"); } //3. 环绕通知 @Around(\\\"pt()\\\") public Object around(ProceedingJoinPoint pjp) throws Throwable { System.out.println(\\\"around before ...\\\"); //表示对原始操作的调用 Object ret = pjp.proceed(); System.out.println(\\\"around after ...\\\"); return ret; } //4. 完成后通知 @AfterReturning(\\\"pt()\\\") public void afterReturning(){ System.out.println(\\\"afterReturning ...\\\"); } //5. 抛异常后通知 @AfterThrowing(\\\"pt()\\\") public void afterThrowing(){ System.out.println(\\\"afterThrowing\\\"); } } \",\"环绕通知注意事项\",\" //3. 环绕通知 @Around(\\\"pt()\\\") public Object around(ProceedingJoinPoint pjp) throws Throwable { //获取执行签名信息 Signature signature = pjp.getSignature(); //获取执行类型(接口名) signature.getDeclaringType(); //获取执行操作名(方法名) signature.getName(); System.out.println(\\\"around before ...\\\"); //表示对原始操作的调用 Object ret = pjp.proceed(); System.out.println(\\\"around after ...\\\"); return ret; } \",\"AOP通知获取数据\",\"//获取参数 //1. 获取参数使用JoinPoint的getArgs()方法 @Before(\\\"pt()\\\") public void before(JoinPoint jp){ Object[] args = jp.getArgs(); System.out.println(Arrays.toString(args)); System.out.println(\\\"before\\\"); } //2. ProceedingJoinPoint是JoinPoint的实现类,拥有getArgs()方法 @Around(\\\"pt()\\\") public Object around(ProceedingJoinPoint pjp) throws Throwable { Object[] args = pjp.getArgs(); System.out.println(Arrays.toString(args)); System.out.println(\\\"around before ...\\\"); //args参数可以修改后传入proceed() Object ret = pjp.proceed(args); System.out.println(\\\"around after ...\\\"); return ret; } \",\"//获取返回值 //1. Around获取返回值 @Around(\\\"pt()\\\") public Object around(ProceedingJoinPoint pjp) throws Throwable { System.out.println(\\\"around before ...\\\"); //表示对原始操作的调用 Object ret = pjp.proceed(); System.out.println(\\\"around after ...\\\"); return ret; } //2. AfterReturning获取返回值 @AfterReturning(value = \\\"pt()\\\", returning = \\\"ret\\\") public void afterReturning(Object ret){ System.out.println(\\\"afterReturning ...\\\"+ret); } \"]},\"150\":{\"h\":\"6. 事务\"},\"151\":{\"h\":\"1. 事务概述\",\"t\":[\"简介\",\"数据库事务( transaction)是访问并可能操作各种数据项的一个数据库操作序列，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。事务由事务开始与事务结束之间执行的全部数据库操作组成。\",\"特性\",\"A：原子性(Atomicity)\",\"一个事务(transaction)中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。\",\"C：一致性(Consistency)\",\"事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。\",\"如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。\",\"如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。\",\"I：隔离性(Isolation)\",\"指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。\",\"D：持久性(Durability)\",\"指的是只要事务成功结束，它对数据库所做的更新就必须保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。\"]},\"152\":{\"h\":\"2. 基于注解的声明式事务\",\"t\":[\"开启事务\",\"@Configuration @ComponentScan(\\\"com.jcven.spring\\\") @EnableTransactionManagement public class SpringConfig {} \",\"使用事务\",\"@Transactional标识在方法上，则只会影响该方法\",\"@Transactional标识的类上，则会影响类中所有的方法\",\"//1. 在业务层接口上添加Spring事务管理 public interface AccountService{ @Transactional //使用@Transactional给方法开启事务, 也可以写在接口上,给接口内所有方法开启事务 public void transfer(String out, String in, Double money); } \",\"事务属性\",\"属性\",\"作用\",\"示例\",\"readOnly\",\"设置是否为只读事务\",\"readOnly=true(只读事务)\",\"timeOut\",\"设置事务超时时间\",\"timeOut=-1(永不超时)\",\"rollbackFor\",\"设置事务回滚异常(class)\",\"rollbackFor=\",\"rollbackForClassName\",\"设置事务回滚异常(String)\",\"同上格式为字符串\",\"noRollbackFor\",\"设置事务不回滚异常(Class)\",\"noRollbackFor=\",\"noRollbackForClassName\",\"设置事务不回滚异常(String)\",\"同上格式为字符串\",\"propagation\",\"设置事务传播行为(是否加入事务)\",\"...\",\"public interface AccountService{ @Transactional(readOnly=true, rollbackFor={IOException.class}) public void transfer(String out, String in, Double money); } \",\"public interface LogService{ @Transactional(propagation = Propagation.REQUIRES_NEW)//设置事务传播行为为开启新事务 void log(String out, String in, Double money); } \"]},\"153\":{\"h\":\"3. 事务的隔离级别\",\"t\":[\"介绍\",\"数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。\",\"隔离级别一共有四种：\",\"读未提交：READ UNCOMMITTED\",\"允许Transaction01读取Transaction02未提交的修改。\",\"读已提交：READ COMMITTED、\",\"要求Transaction01只能读取Transaction02已提交的修改。\",\"可重复读：REPEATABLE READ\",\"确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新。\",\"串行化：SERIALIZABLE\",\"确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。\",\"各个隔离级别解决并发问题的能力见下表：\",\"隔离级别\",\"脏读\",\"不可重复读\",\"幻读\",\"READ UNCOMMITTED\",\"有\",\"有\",\"有\",\"READ COMMITTED\",\"无\",\"有\",\"有\",\"REPEATABLE READ\",\"无\",\"无\",\"有\",\"SERIALIZABLE\",\"无\",\"无\",\"无\",\"各种数据库产品对事务隔离级别的支持程度：\",\"隔离级别\",\"Oracle\",\"MySQL\",\"READ UNCOMMITTED\",\"×\",\"√\",\"READ COMMITTED\",\"√(默认)\",\"√\",\"REPEATABLE READ\",\"×\",\"√(默认)\",\"SERIALIZABLE\",\"√\",\"√\",\"使用方式\",\"@Transactional(isolation = Isolation.DEFAULT)//使用数据库默认的隔离级别 @Transactional(isolation = Isolation.READ_UNCOMMITTED)//读未提交 @Transactional(isolation = Isolation.READ_COMMITTED)//读已提交 @Transactional(isolation = Isolation.REPEATABLE_READ)//可重复读 @Transactional(isolation = Isolation.SERIALIZABLE)//串行化 \"]},\"154\":{\"h\":\"SpringMVC 笔记\"},\"155\":{\"h\":\"1. 介绍\",\"t\":[\"简介\",\"Spring Web MVC是基于Servlet API构建的原始Web框架，从一开始就包含在 Spring Framework 中。正式名称\\\"Spring Web MVC\\\"来自其源模块的名称（ spring-webmvc ），但它通常被称为\\\"Spring MVC\\\"。\",\"SpringMVC处理请求流程\",\"SpringMVC涉及组件理解：\",\"DispatcherServlet : SpringMVC提供，我们需要使用web.xml配置使其生效，它是整个流程处理的核心，所有请求都经过它的处理和分发！[ CEO ]\",\"HandlerMapping : SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效，它内部缓存handler(controller方法)和handler访问路径数据，被DispatcherServlet调用，用于查找路径对应的handler！[秘书]\",\"HandlerAdapter : SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效，它可以处理请求参数和处理响应数据数据，每次DispatcherServlet都是通过handlerAdapter间接调用handler，他是handler和DispatcherServlet之间的适配器！[经理]\",\"Handler : handler又称处理器，他是Controller类内部的方法简称，是由我们自己定义，用来接收参数，向后调用业务，最终返回响应结果！[打工人]\",\"ViewResovler : SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效！视图解析器主要作用简化模版视图页面查找的，但是需要注意，前后端分离项目，后端只返回JSON数据，不返回页面，那就不需要视图解析器！所以，视图解析器，相对其他的组件不是必须的！[财务]\"]},\"156\":{\"h\":\"2. 快速入门\",\"t\":[\"创建web工程\",\"选择Maven骨架选择webApp\",\"导入相应的坐标\",\"<dependencies> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>3.1.0</version> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>5.2.10.RELEASE</version> </dependency> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>2.9.0</version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> <version>2.1</version> <configuration> <port>80</port> <path>/</path> </configuration> </plugin> </plugins> </build> \",\"创建SpringMVC配置类\",\"@Configuration //若整合spring则不写 @ComponentScan(\\\"com.jcven.controller\\\") @EnableWebMvc public class SpringMVCConfig { } \",\"创建Servlet配置类\",\"public class ServletConfig extends AbstractAnnotationConfigDispatcherServletInitializer { //加载spring容器配置 protected Class<?>[] getRootConfigClasses() { return new Class[]{SpringConfig.class}; } //加载springMVC容器配置 protected Class<?>[] getServletConfigClasses() { return new Class[]{SpringMVCConfig.class}; } //设置哪些请求归属springMVC处理 protected String[] getServletMappings() { return new String[]{\\\"/\\\"}; } } \",\"书写相应的controller\",\"@Controller public class UserController { //设置访问路径 @RequestMapping(\\\"/save\\\") @ResponseBody// 直接返回字符串给前端，不找视图解析器 public String save(){ System.out.println(\\\"user save()...\\\"); return \\\"{'module':'springmvc'}\\\"; } } \",\"配置Tomcat服务器\",\"运行\",\"浏览器中通过 localhost/save发送相应的请求即可\"]},\"157\":{\"h\":\"3. 接受数据\"},\"158\":{\"h\":\"1. 设置访问路径\",\"t\":[\"@RequestMapping注解的作用就是将请求的 URL 地址和处理请求的方式（handler方法）关联起来，建立映射关系。SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的方法来处理这个请求。\",\"精准路径匹配\",\"在@RequestMapping注解指定 URL 地址时，不使用任何通配符，按照请求地址进行精确匹配。\",\"@Controller public class UserController { /** * 精准设置访问地址 /user/login */ @RequestMapping(value = {\\\"/user/login\\\"}) @ResponseBody public String login(){ System.out.println(\\\"UserController.login\\\"); return \\\"login success!!\\\"; } } \",\"模糊路径匹配\",\"在@RequestMapping注解指定 URL 地址时，通过使用通配符，匹配多个类似的地址。\",\"@Controller public class ProductController { /** * 路径设置为 /product/* * /* 为单层任意字符串 /product/a /product/aaa 可以访问此handler * /product/a/a 不可以 * 路径设置为 /product/** * /** 为任意层任意字符串 /product/a /product/aaa 可以访问此handler * /product/a/a 也可以访问 */ @RequestMapping(\\\"/product/*\\\") @ResponseBody public String show(){ System.out.println(\\\"ProductController.show\\\"); return \\\"product show!\\\"; } } \",\"类和方法级别区别\",\"@RequestMapping 注解可以用于类级别和方法级别，它们之间的区别如下：\",\"设置到类级别：@RequestMapping 注解可以设置在控制器类上，用于映射整个控制器的通用请求路径。这样，如果控制器中的多个方法都需要映射同一请求路径，就不需要在每个方法上都添加映射路径。\",\"@Controller @RequestMapping(\\\"/user\\\") public class UserController { @RequestMapping(\\\"/login\\\") @ResponseBody public String show(){ return \\\"login success\\\"; } } \",\"设置到方法级别：@RequestMapping 注解也可以单独设置在控制器方法上，用于更细粒度地映射请求路径和处理方法。当多个方法处理同一个路径的不同操作时，可以使用方法级别的 @RequestMapping 注解进行更精细的映射。\",\"@Controller public class UserController { @RequestMapping(\\\"/user/login\\\") @ResponseBody public String show(){ return \\\"login success\\\"; } } \"]},\"159\":{\"h\":\"2. HTTP请求方式\",\"t\":[\"HTTP 协议定义了八种请求方式，在 SpringMVC 中封装到了下面这个枚举类：\",\"public enum RequestMethod { GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE } \",\"@Controller public class UserController { // 指定请求方式 @RequestMapping(value = {\\\"/user/login\\\"} , method = RequestMethod.POST) @ResponseBody public String login(){ return \\\"login success!!\\\"; } } \",\"注意：违背请求方式，会出现405异常\",\"进阶注解\",\"还有 @RequestMapping 的 HTTP 方法特定快捷方式变体：\",\"@GetMapping\",\"@PostMapping\",\"@PutMapping\",\"@DeleteMapping\",\"@PatchMapping\",\"注意：进阶注解只能添加到handler方法上，无法添加到类上\"]},\"160\":{\"h\":\"3. param和json的比较\",\"t\":[\"在 HTTP 请求中，我们可以选择不同的参数类型，如 param 类型和 JSON 类型。下面对这两种参数类型进行区别和对比：\",\"参数编码： \",\"param 类型的参数会被编码为 ASCII 码。例如，假设 name=john doe，则会被编码为 name=john%20doe。而 JSON 类型的参数会被编码为 UTF-8。\",\"参数顺序： \",\"param 类型的参数没有顺序限制。但是，JSON 类型的参数是有序的。JSON 采用键值对的形式进行传递，其中键值对是有序排列的。\",\"数据类型： \",\"param 类型的参数仅支持字符串类型、数值类型和布尔类型等简单数据类型。而 JSON 类型的参数则支持更复杂的数据类型，如数组、对象等。\",\"嵌套性： \",\"param 类型的参数不支持嵌套。但是，JSON 类型的参数支持嵌套，可以传递更为复杂的数据结构。\",\"可读性： \",\"param 类型的参数格式比 JSON 类型的参数更加简单、易读。但是，JSON 格式在传递嵌套数据结构时更加清晰易懂。\",\"总的来说，param 类型的参数适用于单一的数据传递，而 JSON 类型的参数则更适用于更复杂的数据结构传递。根据具体的业务需求，需要选择合适的参数类型。在实际开发中，常见的做法是：在 GET 请求中采用 param 类型的参数，而在 POST 请求中采用 JSON 类型的参数传递。\"]},\"161\":{\"h\":\"4. param参数接收\",\"t\":[\"直接接收参数\",\"只要形参数名和类型与传递参数相同，即可自动接收\",\"// 前端请求: http://localhost:8080/param/value?name=xx&age=18 @Controller @RequestMapping(\\\"param\\\") public class ParamController { // 只要形参数名和类型与传递参数相同，即可自动接收 @GetMapping(value=\\\"/value\\\") @ResponseBody public String setupForm(String name,int age){ System.out.println(\\\"name = \\\" + name + \\\", age = \\\" + age); return name + age; } } \",\"@RequestParam注解接收参数\",\"可以使用 @RequestParam 注解将 Servlet 请求参数绑定到控制器中的方法参数。\",\"// 前端请求: http://localhost:8080/param/data?name=xx&stuAge=18 @GetMapping(value=\\\"/data\\\") @ResponseBody public Object paramForm(@RequestParam(\\\"name\\\") String name, @RequestParam(\\\"stuAge\\\") int age){ System.out.println(\\\"name = \\\" + name + \\\", age = \\\" + age); return name+age; } \",\"默认情况下，使用此批注的方法参数是必需的，\",\"可以通过 required 使批注的方法参数为非必须 通过 defaultValue 设置默认值\",\"@GetMapping(value=\\\"/data\\\") @ResponseBody public Object paramForm(@RequestParam(\\\"name\\\") String name, @RequestParam(value = \\\"stuAge\\\",required = false,defaultValue = \\\"18\\\") int age){ System.out.println(\\\"name = \\\" + name + \\\", age = \\\" + age); return name+age; } \",\"特殊场景接值\",\"一名多值\",\"多选框，提交的数据的时候一个key对应多个值，我们可以使用集合进行接收！\",\"// 前端请求: http://localhost:8080/param/mul?hbs=吃&hbs=喝 @GetMapping(value=\\\"/mul\\\") @ResponseBody // 一名多值,可以使用集合接收即可!但是需要使用@RequestParam注解指定 public Object mulForm(@RequestParam List<String> hbs){ System.out.println(\\\"hbs = \\\" + hbs); return hbs; } \",\"实体接收\",\"定义一个实体类，在controller中，使用实体对象接收\",\"@Controller @RequestMapping(\\\"param\\\") public class ParamController { @RequestMapping(value = \\\"/user\\\", method = RequestMethod.POST) @ResponseBody //请求参数name和age映射到实体类属性上要求属性名必须等于参数名，否则无法映射 public String addUser(User user) { // 在这里可以使用 user 对象的属性来接收请求参数 System.out.println(\\\"user = \\\" + user); return \\\"success\\\"; } } \"]},\"162\":{\"h\":\"5. 路径参数接收\",\"t\":[\"// 前端请求: http://localhost:8080/user/1/Mike @GetMapping(\\\"/user/{id}/{name}\\\") @ResponseBody public String getUser(@PathVariable Long id, @PathVariable(\\\"name\\\") String uname) { System.out.println(\\\"id = \\\" + id + \\\", uname = \\\" + uname); return \\\"success\\\"; } \"]},\"163\":{\"h\":\"6. json参数接收\",\"t\":[\"前端传递 JSON 数据时，Spring MVC 框架可以使用 @RequestBody 注解来将 JSON 数据转换为 Java 对象。@RequestBody 注解表示当前方法参数的值应该从请求体中获取，并且需要指定 value 属性来指示请求体应该映射到哪个参数上。\",\"前端发送 JSON 数据的示例\",\"{ \\\"name\\\": \\\"张三\\\", \\\"age\\\": 18, \\\"gender\\\": \\\"男\\\" } \",\"定义一个用于接收 JSON 数据的 Java 类\",\"public class Person { private String name; private int age; private String gender; // getter 和 setter 略 } \",\"在controller中，使用 @RequestBody 注解来接收 JSON 数据，并将其转换为 Java 对象\",\"@PostMapping(\\\"/person\\\") @ResponseBody public String addPerson(@RequestBody Person person) { // 在这里可以使用 person 对象来操作 JSON 数据中包含的属性 return \\\"success\\\"; } \"]},\"164\":{\"h\":\"7. Cookie数据接收\",\"t\":[\"可以使用 @CookieValue 注释将 HTTP Cookie 的值绑定到控制器中的方法参数\",\"考虑使用以下 cookie 的请求：\",\"JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84 \",\"下面的示例演示如何获取 cookie 值：\",\"@GetMapping(\\\"/demo\\\") public void handle(@CookieValue(\\\"JSESSIONID\\\") String cookie) { //... } \"]},\"165\":{\"h\":\"8. 请求头数据接收\",\"t\":[\"可以使用 @RequestHeader 批注将请求标头绑定到控制器中的方法参数。\",\"请考虑以下带有标头的请求：\",\"Host localhost:8080 Accept text/html,application/xhtml+xml,application/xml;q=0.9 Accept-Language fr,en-gb;q=0.7,en;q=0.3 Accept-Encoding gzip,deflate Accept-Charset ISO-8859-1,utf-8;q=0.7,*;q=0.7 Keep-Alive 300 \",\"下面的示例获取 Accept-Encoding 和 Keep-Alive 标头的值：\",\"@GetMapping(\\\"/demo\\\") public void handle( @RequestHeader(\\\"Accept-Encoding\\\") String encoding, @RequestHeader(\\\"Keep-Alive\\\") long keepAlive) { //... } \"]},\"166\":{\"h\":\"9. 原生Api对象获取\",\"t\":[\"https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/arguments.html\",\"下表描述了支持的控制器方法参数\",\"Controller method argument 控制器方法参数\",\"Description\",\"jakarta.servlet.ServletRequest, jakarta.servlet.ServletResponse\",\"请求/响应对象\",\"jakarta.servlet.http.HttpSession\",\"强制存在会话。因此，这样的参数永远不会为 null 。\",\"java.io.InputStream, java.io.Reader\",\"用于访问由 Servlet API 公开的原始请求正文。\",\"java.io.OutputStream, java.io.Writer\",\"用于访问由 Servlet API 公开的原始响应正文。\",\"@PathVariable\",\"接收路径参数注解\",\"@RequestParam\",\"用于访问 Servlet 请求参数，包括多部分文件。参数值将转换为声明的方法参数类型。\",\"@RequestHeader\",\"用于访问请求标头。标头值将转换为声明的方法参数类型。\",\"@CookieValue\",\"用于访问Cookie。Cookie 值将转换为声明的方法参数类型。\",\"@RequestBody\",\"用于访问 HTTP 请求正文。正文内容通过使用 HttpMessageConverter 实现转换为声明的方法参数类型。\",\"java.util.Map, org.springframework.ui.Model, org.springframework.ui.ModelMap\",\"共享域对象，并在视图呈现过程中向模板公开。\",\"Errors, BindingResult\",\"验证和数据绑定中的错误信息获取对象！\",\"获取原生对象示例：\",\"/** * 如果想要获取请求或者响应对象,或者会话等,可以直接在形参列表传入,并且不分先后顺序! * 注意: 接收原生对象,并不影响参数接收! */ @GetMapping(\\\"api\\\") @ResponseBody public String api(HttpSession session , HttpServletRequest request, HttpServletResponse response){ String method = request.getMethod(); System.out.println(\\\"method = \\\" + method); return \\\"api\\\"; } \"]},\"167\":{\"h\":\"4. 响应数据\"},\"168\":{\"h\":\"1. 返回数据\",\"t\":[\"SpringMVC 简化了参数接收和响应，通过return即可返回数据\",\"@GetMapping public Object handler(简化请求参数接收){ 调用业务方法 返回的结果 （页面跳转，返回数据（json）） return 简化响应前端数据; } \"]},\"169\":{\"h\":\"2. 转发与重定向\",\"t\":[\"在 Spring MVC 中，通过返回值可以实现快速转发，可以使用 redirect 或者 forward 关键字来实现重定向。\",\"@RequestMapping(\\\"/redirect-demo\\\") public String redirectDemo() { // 重定向到 /demo 路径 return \\\"redirect:/demo\\\"; } @RequestMapping(\\\"/forward-demo\\\") public String forwardDemo() { // 转发到 /demo 路径 return \\\"forward:/demo\\\"; } \",\"总结：\",\"将方法的返回值，设置String类型\",\"转发使用forward关键字，重定向使用redirect关键字\",\"如果是项目下的资源，转发和重定向都一样都是项目下路径！都不需要添加项目根路径！\"]},\"170\":{\"h\":\"3. 返回JSON数据\",\"t\":[\"@ResponseBody注解\",\"方法上使用\",\"用于将方法返回的对象序列化为 JSON 或 XML 格式的数据，并发送给客户端。\",\"@GetMapping(\\\"/accounts/{id}\\\") @ResponseBody public Object handle() { // ... return obj; } \",\"@ResponseBody注解可以用来标识方法或者方法返回值，表示方法的返回值是要直接返回给客户端的数据，而不是由视图解析器来解析并渲染生成响应体\",\"类上使用\",\"如果类中每个方法上都标记了 @ResponseBody 注解，那么这些注解就可以提取到类上\",\"@ResponseBody //responseBody可以添加到类上,代表默认类中的所有方法都生效! @Controller @RequestMapping(\\\"param\\\") public class ParamController { \",\"@RestController\",\"类上的 @ResponseBody 注解可以和 @Controller 注解合并为 @RestController 注解\"]},\"171\":{\"h\":\"5. RESTful风格\",\"t\":[\"RESTful（Representational State Transfer）是一种软件架构风格，用于设计网络应用程序和服务之间的通信。它是一种基于标准 HTTP 方法的简单和轻量级的通信协议，广泛应用于现代的Web服务开发。\",\"通过遵循 RESTful 架构的设计原则，可以构建出易于理解、可扩展、松耦合和可重用的 Web 服务。RESTful API 的特点是简单、清晰，并且易于使用和理解，它们使用标准的 HTTP 方法和状态码进行通信，不需要额外的协议和中间件。\"]},\"172\":{\"h\":\"1. 设计规范\",\"t\":[\"HTTP协议请求方式要求\",\"操作\",\"请求方式\",\"查询操作\",\"GET\",\"保存操作\",\"POST\",\"删除操作\",\"DELETE\",\"更新操作\",\"PUT\",\"URL路径风格要求\",\"REST风格下每个资源都应该有一个唯一的标识符，例如一个 URI（统一资源标识符）或者一个 URL（统一资源定位符）。资源的标识符应该能明确地说明该资源的信息，同时也应该是可被理解和解释的！\",\"使用URL+请求方式确定具体的动作，他也是一种标准的HTTP协议请求！\",\"操作\",\"传统风格\",\"REST 风格\",\"保存\",\"/CRUD/saveEmp\",\"URL 地址：/CRUD/emp 请求方式：POST\",\"删除\",\"/CRUD/removeEmp?empId=2\",\"URL 地址：/CRUD/emp/2 请求方式：DELETE\",\"更新\",\"/CRUD/updateEmp\",\"URL 地址：/CRUD/emp 请求方式：PUT\",\"查询\",\"/CRUD/editEmp?empId=2\",\"URL 地址：/CRUD/emp/2 请求方式：GET\"]},\"173\":{\"h\":\"2. RESTFul示例\",\"t\":[\"需求分析\",\"数据结构： User\",\"功能分析 \",\"用户数据分页展示功能（条件：page 页数 默认1，size 每页数量 默认 10）\",\"保存用户功能\",\"根据用户id查询用户详情功能\",\"根据用户id更新用户数据功能\",\"根据用户id删除用户数据功能\",\"多条件模糊查询用户功能（条件：keyword 模糊关键字，page 页数 默认1，size 每页数量 默认 10）\",\"接口设计\",\"功能\",\"接口和请求方式\",\"请求参数\",\"返回值\",\"分页查询\",\"GET /user\",\"page=1&size=10\",\"用户添加\",\"POST /user\",\"用户详情\",\"GET /user/1\",\"路径参数\",\"用户更新\",\"PUT /user\",\"用户删除\",\"DELETE /user/1\",\"路径参数\",\"条件模糊\",\"GET /user/search\",\"page=1&size=10&keywork=关键字\",\"后台接口实现\",\"用户实体类：\",\"package com.atguigu.pojo; public class User { private Integer id; private String name; private Integer age; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Integer getAge() { return age; } public void setAge(Integer age) { this.age = age; } @Override public String toString() { return \\\"User{\\\" + \\\"id=\\\" + id + \\\", name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + '}'; } } \",\"用户Controller:\",\"/** * projectName: com.atguigu.controller * * description: 用户模块的控制器 */ @RequestMapping(\\\"user\\\") @RestController public class UserController { /** * 模拟分页查询业务接口 */ @GetMapping public Object queryPage(@RequestParam(name = \\\"page\\\",required = false,defaultValue = \\\"1\\\")int page, @RequestParam(name = \\\"size\\\",required = false,defaultValue = \\\"10\\\")int size){ System.out.println(\\\"page = \\\" + page + \\\", size = \\\" + size); System.out.println(\\\"分页查询业务!\\\"); return \\\"{'status':'ok'}\\\"; } /** * 模拟用户保存业务接口 */ @PostMapping public Object saveUser(@RequestBody User user){ System.out.println(\\\"user = \\\" + user); System.out.println(\\\"用户保存业务!\\\"); return \\\"{'status':'ok'}\\\"; } /** * 模拟用户详情业务接口 */ @PostMapping(\\\"/{id}\\\") public Object detailUser(@PathVariable Integer id){ System.out.println(\\\"id = \\\" + id); System.out.println(\\\"用户详情业务!\\\"); return \\\"{'status':'ok'}\\\"; } /** * 模拟用户更新业务接口 */ @PutMapping public Object updateUser(@RequestBody User user){ System.out.println(\\\"user = \\\" + user); System.out.println(\\\"用户更新业务!\\\"); return \\\"{'status':'ok'}\\\"; } /** * 模拟条件分页查询业务接口 */ @GetMapping(\\\"search\\\") public Object queryPage(@RequestParam(name = \\\"page\\\",required = false,defaultValue = \\\"1\\\")int page, @RequestParam(name = \\\"size\\\",required = false,defaultValue = \\\"10\\\")int size, @RequestParam(name = \\\"keyword\\\",required= false)String keyword){ System.out.println(\\\"page = \\\" + page + \\\", size = \\\" + size + \\\", keyword = \\\" + keyword); System.out.println(\\\"条件分页查询业务!\\\"); return \\\"{'status':'ok'}\\\"; } } \"]},\"174\":{\"h\":\"6. 全局异常处理\",\"t\":[\"对于异常的处理，一般分为两种方式：\",\"编程式异常处理：是指在代码中显式地编写处理异常的逻辑。它通常涉及到对异常类型的检测及其处理，例如使用 try-catch 块来捕获异常，然后在 catch 块中编写特定的处理代码，或者在 finally 块中执行一些清理操作。在编程式异常处理中，开发人员需要显式地进行异常处理，异常处理代码混杂在业务代码中，导致代码可读性较差。\",\"声明式异常处理：则是将异常处理的逻辑从具体的业务逻辑中分离出来，通过配置等方式进行统一的管理和处理。在声明式异常处理中，开发人员只需要为方法或类标注相应的注解（如 @Throws 或 @ExceptionHandler），就可以处理特定类型的异常。相较于编程式异常处理，声明式异常处理可以使代码更加简洁、易于维护和扩展。\",\"声明示异常处理\",\"声明异常处理控制器类\",\"异常处理控制类，统一定义异常处理handler方法\",\"/** * @RestControllerAdvice = @ControllerAdvice + @ResponseBody * @ControllerAdvice 代表当前类的异常处理controller */ @RestControllerAdvice public class GlobalExceptionHandler { } \",\"声明异常处理hander方法\",\"异常处理handler方法和普通的handler方法参数接收和响应都一致！\",\"只不过异常处理handler方法要映射异常，发生对应的异常会调用！\",\"普通的handler方法要使用@RequestMapping注解映射路径，发生对应的路径调用！\",\"/** * 当发生空指针异常会触发此方法! * @param e * @return */ @ExceptionHandler(NullPointerException.class) public Object handlerNullException(NullPointerException e){ return null; } /** * 所有异常都会触发此方法!但是如果有具体的异常处理Handler! * 具体异常处理Handler优先级更高! * 例如: 发生NullPointerException异常! * 会触发handlerNullException方法,不会触发handlerException方法! * @param e * @return */ @ExceptionHandler(Exception.class) public Object handlerException(Exception e){ return null; } \"]},\"175\":{\"h\":\"7. 拦截器\",\"t\":[\"拦截器使用\",\"创建拦截器类\",\"public class MyInterceptor implements HandlerInterceptor { // 在处理请求的目标 handler 方法前执行 // 可以进行编码格式设置, 登录保护, 权限处理等 @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { //... return true;//true放行 false不放行 } // 在目标 handler 方法之后，handler报错不执行! // 此方法只有preHandler return true 才执行 // 可以对结果处理, 敏感词汇检查等 @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { //... } // 渲染视图之后执行(最后),一定执行 @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { //... } } \",\"拦截器方法拦截位置：\",\"修改配置类添加拦截器\",\"@EnableWebMvc //json数据处理,必须使用此注解,因为他会加入json处理器 @Configuration @ComponentScan(basePackages = {\\\"com.atguigu.controller\\\",\\\"com.atguigu.exceptionhandler\\\"}) public class SpringMvcConfig implements WebMvcConfigurer { //添加拦截器 @Override public void addInterceptors(InterceptorRegistry registry) { //将拦截器添加到Springmvc环境,默认拦截所有Springmvc分发的请求 registry.addInterceptor(new MyInterceptor()); } } \",\"配置详解\",\"默认拦截全部\",\"@Override public void addInterceptors(InterceptorRegistry registry) { //将拦截器添加到Springmvc环境,默认拦截所有Springmvc分发的请求 registry.addInterceptor(new MyInterceptor()); } \",\"精准配置\",\"@Override public void addInterceptors(InterceptorRegistry registry) { //addPathPatterns(\\\"/common/request/one\\\") 添加拦截路径 registry.addInterceptor(new MyInterceptor()) .addPathPatterns(\\\"/common/request/one\\\",\\\"/common/request/tow\\\"); } \",\"排除配置\",\"//添加拦截器 @Override public void addInterceptors(InterceptorRegistry registry) { //排除匹配,排除应该在匹配的范围内排除 //excludePathPatterns(\\\"/common/request/tow\\\"); 排除路径,排除应该在拦截的范围内 registry.addInterceptor(new MyInterceptor()) .excludePathPatterns(\\\"/common/request/tow\\\"); } \",\"多个拦截器执行顺序\",\"preHandle() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置顺序调用各个 preHandle() 方法。\",\"postHandle() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置相反的顺序调用各个 postHandle() 方法。\",\"afterCompletion() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置相反的顺序调用各个 afterCompletion() 方法。\"]},\"176\":{\"h\":\"8. 参数校验\",\"t\":[\"校验概述\",\"JSR 303 是 Java 为 Bean 数据合法性校验提供的标准框架，它已经包含在 JavaEE 6.0 标准中。JSR 303 通过在 Bean 属性上标注类似于 @NotNull、@Max 等标准的注解指定校验规则，并通过标准的验证接口对Bean进行验证。\",\"注解\",\"说明\",\"@Null\",\"标注值必须为 null\",\"@NotNull\",\"标注值不可为 null\",\"@AssertTrue\",\"标注值必须为 true\",\"@AssertFalse\",\"标注值必须为 false\",\"@Min(value)\",\"标注值必须大于或等于 value\",\"@Max(value)\",\"标注值必须小于或等于 value\",\"@DecimalMin(value)\",\"标注值必须大于或等于 value\",\"@DecimalMax(value)\",\"标注值必须小于或等于 value\",\"@Size(max,min)\",\"标注值大小必须在 max 和 min 限定的范围内\",\"@Digits(integer,fratction)\",\"标注值值必须是一个数字，且必须在可接受的范围内\",\"@Past\",\"标注值只能用于日期型，且必须是过去的日期\",\"@Future\",\"标注值只能用于日期型，且必须是将来的日期\",\"@Pattern(value)\",\"标注值必须符合指定的正则表达式\",\"@Email\",\"标注值必须是格式正确的 Email 地址\",\"@Length\",\"标注值字符串大小必须在指定的范围内\",\"@NotEmpty\",\"标注值字符串不能是空字符串\",\"@Range\",\"标注值必须在指定的范围内\",\"易混总结\",\"@NotNull、@NotEmpty、@NotBlank 都是用于在数据校验中检查字段值是否为空的注解，但是它们的用法和校验规则有所不同。\",\"@NotNull (包装类型不为null)\",\"@NotNull 注解是 JSR 303 规范中定义的注解，当被标注的字段值为 null 时，会认为校验失败而抛出异常。该注解不能用于字符串类型的校验，若要对字符串进行校验，应该使用 @NotBlank 或 @NotEmpty 注解。\",\"@NotEmpty (集合类型长度大于0)\",\"@NotEmpty 注解同样是 JSR 303 规范中定义的注解，对于 CharSequence、Collection、Map 或者数组对象类型的属性进行校验，校验时会检查该属性是否为 Null 或者 size()==0，如果是的话就会校验失败。但是对于其他类型的属性，该注解无效。需要注意的是只校验空格前后的字符串，如果该字符串中间只有空格，不会被认为是空字符串，校验不会失败。\",\"@NotBlank （字符串，不为null，切不为\\\" \\\"字符串）\",\"@NotBlank 注解是 Hibernate Validator 附加的注解，对于字符串类型的属性进行校验，校验时会检查该属性是否为 Null 或 “” 或者只包含空格，如果是的话就会校验失败。需要注意的是，@NotBlank 注解只能用于字符串类型的校验。 总之，这三种注解都是用于校验字段值是否为空的注解，但是其校验规则和用法有所不同。在进行数据校验时，需要根据具体情况选择合适的注解进行校验。\",\"操作演示\",\"导入依赖\",\"<!-- 校验注解 --> <dependency> <groupId>jakarta.platform</groupId> <artifactId>jakarta.jakartaee-web-api</artifactId> <version>9.1.0</version> <scope>provided</scope> </dependency> <dependency> <groupId>org.hibernate.validator</groupId> <artifactId>hibernate-validator</artifactId> <version>8.0.0.Final</version> </dependency> <dependency> <groupId>org.hibernate.validator</groupId> <artifactId>hibernate-validator-annotation-processor</artifactId> <version>8.0.0.Final</version> </dependency> \",\"应用校验注解\",\"import jakarta.validation.constraints.Email; import jakarta.validation.constraints.Min; import org.hibernate.validator.constraints.Length; public class User { @Length(min = 3,max = 10) private String name; @Email private String email; } \",\"handler标记和绑定错误收集\",\"@RestController @RequestMapping(\\\"user\\\") public class UserController { /** * @Validated 代表应用校验注解! 必须添加! */ @PostMapping(\\\"save\\\") public Object save(@Validated @RequestBody User user, BindingResult result){ //在实体类参数和 BindingResult 之间不能有任何其他参数, BindingResult可以接受错误信息,避免信息抛出! //判断是否有信息绑定错误! 有可以自行处理! if (result.hasErrors()){ System.out.println(\\\"错误\\\"); String errorMsg = result.getFieldError().toString(); return errorMsg; } //没有,正常处理业务即可 System.out.println(\\\"正常\\\"); return user; } } \"]},\"177\":{\"h\":\"Java\"},\"178\":{\"h\":\"Mybatis\"},\"179\":{\"h\":\"Mysql\"},\"180\":{\"h\":\"Spring\"},\"181\":{\"h\":\"Springmvc\"}},\"dirtCount\":0,\"index\":[[\"错误\",{\"1\":{\"176\":1}}],[\"避免信息抛出\",{\"1\":{\"176\":1}}],[\"避免各种并发问题\",{\"1\":{\"153\":1}}],[\"应用校验注解\",{\"1\":{\"176\":1}}],[\"应该使用\",{\"1\":{\"176\":1}}],[\"附加的注解\",{\"1\":{\"176\":1}}],[\"切不为\",{\"1\":{\"176\":1}}],[\"切入点表达式标准格式\",{\"1\":{\"148\":1}}],[\"切入点表达式\",{\"0\":{\"148\":1}}],[\"切入点与通知绑定\",{\"1\":{\"147\":1}}],[\"校验注解\",{\"1\":{\"176\":1}}],[\"校验不会失败\",{\"1\":{\"176\":1}}],[\"校验时会检查该属性是否为\",{\"1\":{\"176\":2}}],[\"校验概述\",{\"1\":{\"176\":1}}],[\"规范中定义的注解\",{\"1\":{\"176\":2}}],[\"限定的范围内\",{\"1\":{\"176\":1}}],[\"限制该字段的数据不能为null\",{\"1\":{\"119\":1}}],[\"排除应该在拦截的范围内\",{\"1\":{\"175\":1}}],[\"排除应该在匹配的范围内排除\",{\"1\":{\"175\":1}}],[\"排除路径\",{\"1\":{\"175\":1}}],[\"排除匹配\",{\"1\":{\"175\":1}}],[\"排除配置\",{\"1\":{\"175\":1}}],[\"排序字段列表\",{\"1\":{\"109\":1}}],[\"排序方式2\",{\"1\":{\"107\":1}}],[\"排序方式1\",{\"1\":{\"107\":1}}],[\"排序查询\",{\"0\":{\"107\":1}}],[\"排序规则\",{\"1\":{\"98\":1}}],[\"渲染视图之后执行\",{\"1\":{\"175\":1}}],[\"敏感词汇检查等\",{\"1\":{\"175\":1}}],[\"才执行\",{\"1\":{\"175\":1}}],[\"拦截器方法拦截位置\",{\"1\":{\"175\":1}}],[\"拦截器使用\",{\"1\":{\"175\":1}}],[\"拦截器\",{\"0\":{\"175\":1}}],[\"发生nullpointerexception异常\",{\"1\":{\"174\":1}}],[\"发生对应的路径调用\",{\"1\":{\"174\":1}}],[\"发生对应的异常会调用\",{\"1\":{\"174\":1}}],[\"具体异常处理handler优先级更高\",{\"1\":{\"174\":1}}],[\"具体过程\",{\"1\":{\"139\":1}}],[\"易混总结\",{\"1\":{\"176\":1}}],[\"易于维护和扩展\",{\"1\":{\"174\":1}}],[\"易读\",{\"1\":{\"160\":1}}],[\"声明异常处理hander方法\",{\"1\":{\"174\":1}}],[\"声明异常处理控制器类\",{\"1\":{\"174\":1}}],[\"声明示异常处理\",{\"1\":{\"174\":1}}],[\"声明式异常处理可以使代码更加简洁\",{\"1\":{\"174\":1}}],[\"声明式异常处理\",{\"1\":{\"174\":1}}],[\"声明当前类是一个配置类\",{\"1\":{\"144\":1}}],[\"导入依赖\",{\"1\":{\"176\":1}}],[\"导入相应的坐标\",{\"1\":{\"156\":1}}],[\"导致代码可读性较差\",{\"1\":{\"174\":1}}],[\"模拟条件分页查询业务接口\",{\"1\":{\"173\":1}}],[\"模拟用户更新业务接口\",{\"1\":{\"173\":1}}],[\"模拟用户详情业务接口\",{\"1\":{\"173\":1}}],[\"模拟用户保存业务接口\",{\"1\":{\"173\":1}}],[\"模拟分页查询业务接口\",{\"1\":{\"173\":1}}],[\"模糊关键字\",{\"1\":{\"173\":1}}],[\"模糊路径匹配\",{\"1\":{\"158\":1}}],[\"模糊匹配\",{\"1\":{\"104\":1}}],[\"页数\",{\"1\":{\"173\":2}}],[\"页面跳转\",{\"1\":{\"168\":1}}],[\"风格\",{\"1\":{\"172\":1}}],[\"传统风格\",{\"1\":{\"172\":1}}],[\"传入list集合不需要\",{\"1\":{\"78\":1}}],[\"传入数组需要使用\",{\"1\":{\"78\":1}}],[\"资源的标识符应该能明确地说明该资源的信息\",{\"1\":{\"172\":1}}],[\"统一定义异常处理handler方法\",{\"1\":{\"174\":1}}],[\"统一资源定位符\",{\"1\":{\"172\":1}}],[\"统一资源标识符\",{\"1\":{\"172\":1}}],[\"统计男性员工和女性员工的数量\",{\"1\":{\"106\":1}}],[\"统计数量\",{\"1\":{\"105\":1}}],[\"操作演示\",{\"1\":{\"176\":1}}],[\"操作\",{\"1\":{\"172\":2}}],[\"操作符\",{\"1\":{\"126\":1}}],[\"设计规范\",{\"0\":{\"172\":1}}],[\"设置string类型\",{\"1\":{\"169\":1}}],[\"设置默认值\",{\"1\":{\"161\":1}}],[\"设置默认指向的数据库\",{\"1\":{\"58\":1}}],[\"设置到方法级别\",{\"1\":{\"158\":1}}],[\"设置到类级别\",{\"1\":{\"158\":1}}],[\"设置访问路径\",{\"0\":{\"158\":1},\"1\":{\"156\":1}}],[\"设置哪些请求归属springmvc处理\",{\"1\":{\"156\":1}}],[\"设置是否为只读事务\",{\"1\":{\"152\":1}}],[\"设置事务传播行为为开启新事务\",{\"1\":{\"152\":1}}],[\"设置事务传播行为\",{\"1\":{\"152\":1}}],[\"设置事务不回滚异常\",{\"1\":{\"152\":2}}],[\"设置事务回滚异常\",{\"1\":{\"152\":2}}],[\"设置事务超时时间\",{\"1\":{\"152\":1}}],[\"设置事务的隔离级别\",{\"1\":{\"131\":1}}],[\"设置事务提交方式\",{\"1\":{\"129\":1}}],[\"设置别名\",{\"1\":{\"103\":1}}],[\"清晰\",{\"1\":{\"171\":1}}],[\"服务\",{\"1\":{\"171\":1}}],[\"松耦合和可重用的\",{\"1\":{\"171\":1}}],[\"架构的设计原则\",{\"1\":{\"171\":1}}],[\"广泛应用于现代的web服务开发\",{\"1\":{\"171\":1}}],[\"都是用于在数据校验中检查字段值是否为空的注解\",{\"1\":{\"176\":1}}],[\"都不需要添加项目根路径\",{\"1\":{\"169\":1}}],[\"都只能放在构造器的第一行\",{\"1\":{\"41\":1}}],[\"转发和重定向都一样都是项目下路径\",{\"1\":{\"169\":1}}],[\"转发使用forward关键字\",{\"1\":{\"169\":1}}],[\"转发到\",{\"1\":{\"169\":1}}],[\"转发与重定向\",{\"0\":{\"169\":1}}],[\"响应数据\",{\"0\":{\"167\":1}}],[\"响应对象\",{\"1\":{\"166\":1}}],[\"验证和数据绑定中的错误信息获取对象\",{\"1\":{\"166\":1}}],[\"共享域对象\",{\"1\":{\"166\":1}}],[\"强制存在会话\",{\"1\":{\"166\":1}}],[\"下表描述了支持的控制器方法参数\",{\"1\":{\"166\":1}}],[\"下面的示例获取\",{\"1\":{\"165\":1}}],[\"下面的示例演示如何获取\",{\"1\":{\"164\":1}}],[\"下面对这两种参数类型进行区别和对比\",{\"1\":{\"160\":1}}],[\"原生api对象获取\",{\"0\":{\"166\":1}}],[\"原子性\",{\"1\":{\"128\":1,\"151\":1}}],[\"querypage\",{\"1\":{\"173\":2}}],[\"qualifier\",{\"1\":{\"145\":1}}],[\"q=0\",{\"1\":{\"165\":5}}],[\"请考虑以下带有标头的请求\",{\"1\":{\"165\":1}}],[\"请求方式\",{\"1\":{\"172\":5}}],[\"请求正文\",{\"1\":{\"166\":1}}],[\"请求\",{\"1\":{\"166\":1}}],[\"请求头数据接收\",{\"0\":{\"165\":1}}],[\"请求参数\",{\"1\":{\"166\":1,\"173\":1}}],[\"请求参数name和age映射到实体类属性上要求属性名必须等于参数名\",{\"1\":{\"161\":1}}],[\"请求参数绑定到控制器中的方法参数\",{\"1\":{\"161\":1}}],[\"请求中采用\",{\"1\":{\"160\":2}}],[\"请求中\",{\"1\":{\"160\":1}}],[\"批注将请求标头绑定到控制器中的方法参数\",{\"1\":{\"165\":1}}],[\"批量添加数据\",{\"1\":{\"101\":1}}],[\"批量插入\",{\"1\":{\"78\":1}}],[\"批量删除\",{\"1\":{\"78\":1}}],[\"考虑使用以下\",{\"1\":{\"164\":1}}],[\"略\",{\"1\":{\"163\":1}}],[\"男\",{\"1\":{\"163\":1}}],[\"路径参数\",{\"1\":{\"173\":2}}],[\"路径参数接收\",{\"0\":{\"162\":1}}],[\"路径\",{\"1\":{\"169\":2}}],[\"路径设置为\",{\"1\":{\"158\":2}}],[\"总之\",{\"1\":{\"176\":1}}],[\"总结\",{\"1\":{\"169\":1}}],[\"总的来说\",{\"1\":{\"160\":1}}],[\"总体拥有成本低\",{\"1\":{\"90\":1}}],[\"嵌套性\",{\"1\":{\"160\":1}}],[\"嵌套查询\",{\"1\":{\"126\":1}}],[\"假设\",{\"1\":{\"160\":1}}],[\"码\",{\"1\":{\"160\":1}}],[\"进阶注解只能添加到handler方法上\",{\"1\":{\"159\":1}}],[\"进阶注解\",{\"1\":{\"159\":1}}],[\"违背请求方式\",{\"1\":{\"159\":1}}],[\"协议定义了八种请求方式\",{\"1\":{\"159\":1}}],[\"地址\",{\"1\":{\"172\":4,\"176\":1}}],[\"地址时\",{\"1\":{\"158\":2}}],[\"地址和处理请求的方式\",{\"1\":{\"158\":1}}],[\"精准配置\",{\"1\":{\"175\":1}}],[\"精准设置访问地址\",{\"1\":{\"158\":1}}],[\"精准路径匹配\",{\"1\":{\"158\":1}}],[\"精确定点数\",{\"1\":{\"94\":1}}],[\"建立映射关系\",{\"1\":{\"158\":1}}],[\"建立中间表来维护两方\",{\"1\":{\"121\":1}}],[\"接收原生对象\",{\"1\":{\"166\":1}}],[\"接收路径参数注解\",{\"1\":{\"166\":1}}],[\"接收到指定的请求\",{\"1\":{\"158\":1}}],[\"接受数据\",{\"0\":{\"157\":1}}],[\"接口设计\",{\"1\":{\"173\":1}}],[\"接口名\",{\"1\":{\"148\":2,\"149\":1}}],[\"接口如果有两个实现类对象\",{\"1\":{\"136\":1}}],[\"接口和请求方式\",{\"1\":{\"173\":1}}],[\"接口和\",{\"1\":{\"57\":1}}],[\"接口可以继承接口\",{\"1\":{\"51\":1}}],[\"接口不能继承类\",{\"1\":{\"51\":1}}],[\"接口不能被实例化\",{\"1\":{\"51\":1}}],[\"接口中的属性若是pubic\",{\"1\":{\"51\":1}}],[\"接口中的抽象方法可以不用abstract修饰\",{\"1\":{\"51\":1}}],[\"接口中所有方法都是public方法\",{\"1\":{\"51\":1}}],[\"接口的全类名和映射配置文件的名称空间一致\",{\"1\":{\"58\":1}}],[\"接口的使用\",{\"1\":{\"51\":1}}],[\"接口的定义\",{\"1\":{\"51\":1}}],[\"接口\",{\"0\":{\"51\":1}}],[\"浏览器中通过\",{\"1\":{\"156\":1}}],[\"书写相应的controller\",{\"1\":{\"156\":1}}],[\"书写成\",{\"1\":{\"148\":1}}],[\"选择maven骨架选择webapp\",{\"1\":{\"156\":1}}],[\"选择导航页数navigatepages\",{\"1\":{\"87\":1}}],[\"财务\",{\"1\":{\"155\":1}}],[\"财务部\",{\"1\":{\"126\":1}}],[\"前端发送\",{\"1\":{\"163\":1}}],[\"前端传递\",{\"1\":{\"163\":1}}],[\"前端请求\",{\"1\":{\"161\":3,\"162\":1}}],[\"前后端分离项目\",{\"1\":{\"155\":1}}],[\"前置通知\",{\"1\":{\"149\":4}}],[\"打工人\",{\"1\":{\"155\":1}}],[\"经理\",{\"1\":{\"155\":1}}],[\"秘书\",{\"1\":{\"155\":1}}],[\"正常\",{\"1\":{\"176\":1}}],[\"正常处理业务即可\",{\"1\":{\"176\":1}}],[\"正文内容通过使用\",{\"1\":{\"166\":1}}],[\"正式名称\",{\"1\":{\"155\":1}}],[\"正数高位补\",{\"1\":{\"14\":1}}],[\"禁止其它事务对这个表进行添加\",{\"1\":{\"153\":1}}],[\"确保transaction01可以多次从一个表中读取到相同的行\",{\"1\":{\"153\":1}}],[\"确保transaction01可以多次从一个字段中读取到相同的值\",{\"1\":{\"153\":1}}],[\"串行化\",{\"1\":{\"153\":2}}],[\"允许transaction01读取transaction02未提交的修改\",{\"1\":{\"153\":1}}],[\"允许覆盖\",{\"1\":{\"86\":1}}],[\"读已提交\",{\"1\":{\"153\":2}}],[\"读未提交\",{\"1\":{\"153\":2}}],[\"读取配置类\",{\"1\":{\"143\":1}}],[\"介绍\",{\"0\":{\"155\":1},\"1\":{\"153\":1}}],[\"永不超时\",{\"1\":{\"152\":1}}],[\"示例\",{\"1\":{\"152\":1}}],[\"重定向使用redirect关键字\",{\"1\":{\"169\":1}}],[\"重定向到\",{\"1\":{\"169\":1}}],[\"重新启动数据库系统后\",{\"1\":{\"151\":1}}],[\"重写\",{\"1\":{\"45\":1}}],[\"重写equals方法\",{\"1\":{\"45\":1}}],[\"就可以处理特定类型的异常\",{\"1\":{\"174\":1}}],[\"就不需要在每个方法上都添加映射路径\",{\"1\":{\"158\":1}}],[\"就会来找到在映射关系中对应的方法来处理这个请求\",{\"1\":{\"158\":1}}],[\"就像这个事务从来没有执行过一样\",{\"1\":{\"151\":1}}],[\"就是基于动态代理的\",{\"1\":{\"146\":1}}],[\"到事务开始前的状态\",{\"1\":{\"151\":1}}],[\"拥有getargs\",{\"1\":{\"149\":1}}],[\"抛异常后通知\",{\"1\":{\"149\":1}}],[\"完成后通知\",{\"1\":{\"149\":1}}],[\"完成父类的初始化\",{\"1\":{\"41\":1}}],[\"目标操作\",{\"1\":{\"149\":2}}],[\"目录\",{\"0\":{\"3\":1}}],[\"环绕通知注意事项\",{\"1\":{\"149\":1}}],[\"环绕通知\",{\"1\":{\"149\":3}}],[\"盖棺定论\",{\"1\":{\"149\":1}}],[\"死于非命\",{\"1\":{\"149\":1}}],[\"寿终正寝\",{\"1\":{\"149\":1}}],[\"名词采用\",{\"1\":{\"148\":1}}],[\"名称空间\",{\"1\":{\"137\":1}}],[\"绑定业务层接口名\",{\"1\":{\"148\":1}}],[\"做单个包描述匹配\",{\"1\":{\"148\":1}}],[\"专用于匹配子类类型\",{\"1\":{\"148\":1}}],[\"专门声明一个resultmap设定column到property之间的对应关系\",{\"1\":{\"67\":1}}],[\"步骤\",{\"0\":{\"147\":1}}],[\"利用aop可以对业务逻辑的各个部分进行隔离\",{\"1\":{\"146\":1}}],[\"面向切面编程\",{\"1\":{\"146\":1}}],[\"面向对象高级\",{\"0\":{\"46\":1}}],[\"面向对象进阶\",{\"0\":{\"39\":1}}],[\"面向对象基础\",{\"0\":{\"34\":1}}],[\"面向对象\",{\"0\":{\"33\":1}}],[\"销毁前\",{\"1\":{\"145\":1}}],[\"销售部\",{\"1\":{\"126\":3}}],[\"相较于编程式异常处理\",{\"1\":{\"174\":1}}],[\"相对其他的组件不是必须的\",{\"1\":{\"155\":1}}],[\"相同\",{\"1\":{\"144\":3}}],[\"相当于一个成员变量\",{\"1\":{\"52\":1}}],[\"相当于\",{\"1\":{\"51\":1}}],[\"层等\",{\"1\":{\"144\":1}}],[\"层\",{\"1\":{\"144\":3}}],[\"仅仅表示容器中的一个组件\",{\"1\":{\"144\":1}}],[\"仅执行一个\",{\"1\":{\"77\":1}}],[\"管理的\",{\"1\":{\"144\":1}}],[\"放在相关类上使其成为\",{\"1\":{\"144\":1}}],[\"放在了插入语句的前面\",{\"1\":{\"72\":1}}],[\"组件类注解\",{\"1\":{\"144\":1}}],[\"业务层\",{\"1\":{\"143\":1}}],[\"衍生注解\",{\"1\":{\"143\":1}}],[\"后台接口实现\",{\"1\":{\"173\":1}}],[\"后端只返回json数据\",{\"1\":{\"155\":1}}],[\"后置通知\",{\"1\":{\"149\":4}}],[\"后置处理器初始化之后\",{\"1\":{\"139\":1}}],[\"后置处理器初始化之前\",{\"1\":{\"139\":1}}],[\"后缀\",{\"1\":{\"15\":2}}],[\"初始化之后\",{\"1\":{\"139\":1}}],[\"初始化之前\",{\"1\":{\"139\":1}}],[\"含义\",{\"1\":{\"138\":2}}],[\"含最大最小值\",{\"1\":{\"104\":1}}],[\"各种数据库产品对事务隔离级别的支持程度\",{\"1\":{\"153\":1}}],[\"各种通知的执行顺序\",{\"1\":{\"149\":1}}],[\"各个隔离级别解决并发问题的能力见下表\",{\"1\":{\"153\":1}}],[\"各个标签体字符串之间的分隔符\",{\"1\":{\"78\":1}}],[\"各取值含义参加下表\",{\"1\":{\"138\":1}}],[\"集合类型长度大于0\",{\"1\":{\"176\":1}}],[\"集合类型bean注入\",{\"1\":{\"137\":1}}],[\"集合类型注入\",{\"1\":{\"137\":2}}],[\"级联属性\",{\"1\":{\"137\":1}}],[\"级联属性映射\",{\"1\":{\"81\":1}}],[\"特殊场景接值\",{\"1\":{\"161\":1}}],[\"特殊字符\",{\"1\":{\"137\":1}}],[\"特殊值处理\",{\"1\":{\"137\":1}}],[\"特性\",{\"1\":{\"128\":1,\"151\":1}}],[\"张三\",{\"1\":{\"137\":2,\"163\":1}}],[\"依赖注入注解\",{\"1\":{\"144\":1}}],[\"依赖注入\",{\"0\":{\"137\":1},\"1\":{\"145\":1}}],[\"依赖m精度和d标度\",{\"1\":{\"94\":1}}],[\"框架可以使用\",{\"1\":{\"163\":1}}],[\"框架中最重要的核心组件之一\",{\"1\":{\"133\":1}}],[\"框架除了自己提供功能外\",{\"1\":{\"133\":1}}],[\"容器中只能有一个此类型的bean\",{\"1\":{\"136\":1}}],[\"容器是\",{\"1\":{\"133\":1}}],[\"容器管理的\",{\"1\":{\"133\":1}}],[\"容器来管理所有\",{\"1\":{\"133\":1}}],[\"更优良的程序\",{\"1\":{\"133\":1}}],[\"更新操作\",{\"1\":{\"172\":1}}],[\"更新子表中的记录\",{\"1\":{\"120\":1}}],[\"更新\",{\"1\":{\"120\":2,\"153\":1,\"172\":1}}],[\"更新对应记录时\",{\"1\":{\"120\":3}}],[\"更新员工工号为5位数\",{\"1\":{\"114\":1}}],[\"能够指导我们如何设计出松耦合\",{\"1\":{\"133\":1}}],[\"能用\",{\"1\":{\"61\":1}}],[\"译为\",{\"1\":{\"133\":1}}],[\"还有\",{\"1\":{\"159\":1}}],[\"还有其他插入方式可以使用\",{\"1\":{\"72\":1}}],[\"还提供整合其他技术和框架的能力\",{\"1\":{\"133\":1}}],[\"企业级应用的开发难度和开发周期\",{\"1\":{\"133\":1}}],[\"轻量级开源框架\",{\"1\":{\"133\":1}}],[\"隔离级别一共有四种\",{\"1\":{\"153\":1}}],[\"隔离级别越高\",{\"1\":{\"153\":1}}],[\"隔离级别\",{\"1\":{\"131\":2,\"153\":2}}],[\"隔离性\",{\"1\":{\"128\":1,\"151\":1}}],[\"幻读\",{\"1\":{\"130\":1,\"131\":1,\"153\":1}}],[\"脏读\",{\"1\":{\"130\":1,\"131\":1,\"153\":1}}],[\"问题\",{\"1\":{\"130\":1}}],[\"回滚事务\",{\"1\":{\"129\":2}}],[\"持久性\",{\"1\":{\"128\":1,\"151\":1}}],[\"事务属性\",{\"1\":{\"152\":1}}],[\"事务不会查看到中间状态的数据\",{\"1\":{\"151\":1}}],[\"事务查看数据更新时\",{\"1\":{\"151\":1}}],[\"事务的隔离级别\",{\"0\":{\"153\":1}}],[\"事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态\",{\"1\":{\"151\":1}}],[\"事务的四大特性acid\",{\"1\":{\"128\":1}}],[\"事务在执行过程中发生错误\",{\"1\":{\"151\":1}}],[\"事务由事务开始与事务结束之间执行的全部数据库操作组成\",{\"1\":{\"151\":1}}],[\"事务概述\",{\"0\":{\"151\":1}}],[\"事务隔离级别\",{\"0\":{\"131\":1}}],[\"事务操作\",{\"0\":{\"129\":1}}],[\"事务一旦提交或者回滚\",{\"1\":{\"128\":1}}],[\"事务完成时\",{\"1\":{\"128\":1}}],[\"事务是不可分割的最小操作单元\",{\"1\":{\"128\":1}}],[\"事务特性\",{\"0\":{\"128\":1}}],[\"事务\",{\"0\":{\"127\":1,\"150\":1}}],[\"行子查询\",{\"1\":{\"126\":2}}],[\"行为\",{\"1\":{\"120\":1}}],[\"研发部\",{\"1\":{\"126\":1,\"137\":3}}],[\"市场部\",{\"1\":{\"126\":1}}],[\"列子查询\",{\"1\":{\"126\":2}}],[\"之父\",{\"1\":{\"133\":1}}],[\"之后入职的员工信息\",{\"1\":{\"126\":1}}],[\"之间不能有任何其他参数\",{\"1\":{\"176\":1}}],[\"之间均匀分布的\",{\"1\":{\"31\":3}}],[\"之间字符\",{\"1\":{\"28\":1}}],[\"标注值字符串不能是空字符串\",{\"1\":{\"176\":1}}],[\"标注值字符串大小必须在指定的范围内\",{\"1\":{\"176\":1}}],[\"标注值只能用于日期型\",{\"1\":{\"176\":2}}],[\"标注值值必须是一个数字\",{\"1\":{\"176\":1}}],[\"标注值大小必须在\",{\"1\":{\"176\":1}}],[\"标注值必须在指定的范围内\",{\"1\":{\"176\":1}}],[\"标注值必须是格式正确的\",{\"1\":{\"176\":1}}],[\"标注值必须符合指定的正则表达式\",{\"1\":{\"176\":1}}],[\"标注值必须小于或等于\",{\"1\":{\"176\":2}}],[\"标注值必须大于或等于\",{\"1\":{\"176\":2}}],[\"标注值必须为\",{\"1\":{\"176\":3}}],[\"标注值不可为\",{\"1\":{\"176\":1}}],[\"标准中\",{\"1\":{\"176\":1}}],[\"标准格式\",{\"1\":{\"148\":1}}],[\"标头值将转换为声明的方法参数类型\",{\"1\":{\"166\":1}}],[\"标头的值\",{\"1\":{\"165\":1}}],[\"标量子查询\",{\"1\":{\"126\":2}}],[\"标签的\",{\"1\":{\"74\":2}}],[\"标签体内前面多余的\",{\"1\":{\"74\":1}}],[\"标签会自动去掉\",{\"1\":{\"74\":1}}],[\"合并后去重\",{\"1\":{\"125\":1}}],[\"联合查询到多张表的列数必须保持一致\",{\"1\":{\"125\":1}}],[\"联合查询\",{\"0\":{\"125\":1},\"1\":{\"125\":1}}],[\"连接条件\",{\"1\":{\"122\":1}}],[\"连接数据库信息\",{\"1\":{\"86\":1}}],[\"显示内连接\",{\"1\":{\"122\":2}}],[\"隐式内连接\",{\"1\":{\"122\":1}}],[\"隐含了super\",{\"1\":{\"48\":1}}],[\"父表变更时\",{\"1\":{\"120\":1}}],[\"父类异常写在后\",{\"1\":{\"55\":1}}],[\"父类的构造方法\",{\"1\":{\"48\":1}}],[\"父类的普通代码块和普通属性\",{\"1\":{\"48\":1}}],[\"父类的静态代码块和静态属性\",{\"1\":{\"48\":1}}],[\"父类也会被加载\",{\"1\":{\"48\":1}}],[\"父类引用指向子类对象\",{\"1\":{\"44\":1}}],[\"父类构造器的调用不限于直接父类\",{\"1\":{\"41\":1}}],[\"父类person\",{\"1\":{\"41\":1}}],[\"先检查该记录是否有外键\",{\"1\":{\"120\":4}}],[\"性别\",{\"1\":{\"119\":1}}],[\"状态\",{\"1\":{\"119\":1}}],[\"外连接\",{\"0\":{\"123\":1}}],[\"外键删除更新行为set\",{\"1\":{\"120\":1}}],[\"外键删除更新行为cascade\",{\"1\":{\"120\":1}}],[\"外键字段名\",{\"1\":{\"120\":2}}],[\"外键名称\",{\"1\":{\"120\":3}}],[\"外键约束\",{\"0\":{\"120\":1},\"1\":{\"119\":1}}],[\"外部其他类不能访问匿名内部类\",{\"1\":{\"52\":1}}],[\"外部其他类不能访问局部内部类\",{\"1\":{\"52\":1}}],[\"外部类访问静态内部类需要创建对象后再访问\",{\"1\":{\"52\":1}}],[\"外部类访问内部类\",{\"1\":{\"52\":1}}],[\"外部类使用成员内部类需要先创建成员内部类对象再调用其方法或属性\",{\"1\":{\"52\":1}}],[\"外部类和局部内部类的成员重名\",{\"1\":{\"52\":1}}],[\"外部类名\",{\"1\":{\"52\":3}}],[\"外部类\",{\"1\":{\"52\":1}}],[\"检查约束\",{\"1\":{\"119\":1}}],[\"保存用户功能\",{\"1\":{\"173\":1}}],[\"保存\",{\"1\":{\"172\":1}}],[\"保存操作\",{\"1\":{\"172\":1}}],[\"保存数据时\",{\"1\":{\"119\":1}}],[\"保证事务不收外部并发影响操作\",{\"1\":{\"128\":1}}],[\"保证数据一致性和完整性\",{\"1\":{\"119\":1}}],[\"保证字段值满足某一个条件\",{\"1\":{\"119\":1}}],[\"保证该字段的所有数据唯一且不重复\",{\"1\":{\"119\":1}}],[\"保留y位小数\",{\"1\":{\"115\":1}}],[\"唯一约束\",{\"1\":{\"119\":1}}],[\"约束作用于表中字段上的\",{\"1\":{\"119\":1}}],[\"约束\",{\"0\":{\"118\":1},\"1\":{\"119\":1}}],[\"流程函数\",{\"0\":{\"117\":1}}],[\"流程控制\",{\"0\":{\"16\":1}}],[\"求x的四舍五入值\",{\"1\":{\"115\":1}}],[\"求和\",{\"1\":{\"105\":1}}],[\"右表+交集\",{\"1\":{\"123\":1}}],[\"右外连接\",{\"1\":{\"123\":2}}],[\"右填充\",{\"1\":{\"114\":1}}],[\"右边的是运行类型\",{\"1\":{\"44\":1}}],[\"达到n个字符串长度\",{\"1\":{\"114\":2}}],[\"撤销权限\",{\"1\":{\"112\":1}}],[\"授予权限\",{\"1\":{\"112\":1}}],[\"创就数据库\",{\"1\":{\"112\":1}}],[\"创建拦截器类\",{\"1\":{\"175\":1}}],[\"创建servlet配置类\",{\"1\":{\"156\":1}}],[\"创建springmvc配置类\",{\"1\":{\"156\":1}}],[\"创建web工程\",{\"1\":{\"156\":1}}],[\"创建切面类并配置\",{\"1\":{\"147\":1}}],[\"创建新的配置类\",{\"1\":{\"145\":1}}],[\"创建类userfactorybean\",{\"1\":{\"140\":1}}],[\"创建外部属性文件\",{\"1\":{\"137\":1}}],[\"创建工程引入依赖\",{\"1\":{\"134\":1}}],[\"创建的\",{\"1\":{\"133\":1}}],[\"创建用户\",{\"1\":{\"111\":1}}],[\"创建表要求\",{\"1\":{\"119\":1}}],[\"创建表\",{\"1\":{\"99\":1}}],[\"创建数据库\",{\"1\":{\"98\":1}}],[\"创建配置文件generatorconfig\",{\"1\":{\"86\":1}}],[\"创建一个表\",{\"1\":{\"99\":1}}],[\"创建一个新的sqlsession对象\",{\"1\":{\"59\":1}}],[\"创建一次调用一次\",{\"1\":{\"48\":1}}],[\"创建\",{\"1\":{\"59\":1}}],[\"创建项目导入相应坐标\",{\"1\":{\"58\":1}}],[\"创建成员内部类的对象实例\",{\"1\":{\"52\":2}}],[\"创建子类对象实例时\",{\"1\":{\"48\":1}}],[\"创建子类对象时\",{\"1\":{\"41\":1}}],[\"创建对象的时机\",{\"1\":{\"138\":1}}],[\"创建对象实例\",{\"1\":{\"48\":1}}],[\"创建对象时\",{\"1\":{\"37\":1,\"48\":1}}],[\"视图解析器\",{\"1\":{\"155\":1}}],[\"视图解析器主要作用简化模版视图页面查找的\",{\"1\":{\"155\":1}}],[\"视图\",{\"1\":{\"112\":1}}],[\"插入数据\",{\"1\":{\"112\":1}}],[\"插件的依赖\",{\"1\":{\"86\":1}}],[\"插件的gav坐标\",{\"1\":{\"86\":1}}],[\"说明\",{\"1\":{\"112\":1,\"120\":1,\"144\":3,\"176\":1}}],[\"权限处理等\",{\"1\":{\"175\":1}}],[\"权限列表\",{\"1\":{\"112\":2}}],[\"权限\",{\"1\":{\"112\":1}}],[\"权限控制等\",{\"1\":{\"146\":1}}],[\"权限控制\",{\"0\":{\"112\":1}}],[\"密码\",{\"1\":{\"111\":2}}],[\"主列表名\",{\"1\":{\"120\":2}}],[\"主键\",{\"1\":{\"119\":1}}],[\"主键是一行数据的唯一标识\",{\"1\":{\"119\":1}}],[\"主键约束\",{\"1\":{\"119\":1}}],[\"主机名\",{\"1\":{\"111\":3,\"112\":3}}],[\"主表\",{\"1\":{\"81\":1,\"82\":1,\"120\":2}}],[\"释义\",{\"1\":{\"109\":1}}],[\"释放一个有效的sqlsession对象\",{\"1\":{\"59\":1}}],[\"释放资源\",{\"1\":{\"58\":1}}],[\"每次dispatcherservlet都是通过handleradapter间接调用handler\",{\"1\":{\"155\":1}}],[\"每个事务都有各自的完整数据空间\",{\"1\":{\"151\":1}}],[\"每页数量\",{\"1\":{\"173\":2}}],[\"每页显示记录数\",{\"1\":{\"108\":1}}],[\"每页展示10条\",{\"1\":{\"108\":2}}],[\"每一个在包\",{\"1\":{\"67\":1}}],[\"降序\",{\"1\":{\"107\":1}}],[\"降序排序\",{\"1\":{\"29\":1}}],[\"升序\",{\"1\":{\"107\":1}}],[\"升序排序\",{\"1\":{\"29\":1}}],[\"平均值\",{\"1\":{\"105\":1}}],[\"最终返回响应结果\",{\"1\":{\"155\":1}}],[\"最小值\",{\"1\":{\"105\":1}}],[\"最大值\",{\"1\":{\"105\":1}}],[\"最后\",{\"1\":{\"72\":1,\"175\":1}}],[\"最后一个用分号结束\",{\"1\":{\"53\":1}}],[\"功能分析\",{\"1\":{\"173\":1}}],[\"功能\",{\"1\":{\"105\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"173\":1}}],[\"函数\",{\"0\":{\"113\":1},\"1\":{\"105\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1}}],[\"聚合函数\",{\"0\":{\"105\":1},\"1\":{\"105\":1}}],[\"否则无法映射\",{\"1\":{\"161\":1}}],[\"否则返回default默认值\",{\"1\":{\"117\":2}}],[\"否则返回value2\",{\"1\":{\"117\":1}}],[\"否则返回f\",{\"1\":{\"117\":1}}],[\"否则为0\",{\"1\":{\"14\":3}}],[\"否定\",{\"1\":{\"104\":1}}],[\"匹配多个类似的地址\",{\"1\":{\"158\":1}}],[\"匹配\",{\"1\":{\"148\":3}}],[\"匹配任意字符\",{\"1\":{\"104\":1}}],[\"匹配单个字符\",{\"1\":{\"104\":1}}],[\"占位符\",{\"1\":{\"104\":1}}],[\"占用空间\",{\"1\":{\"27\":1}}],[\"占用字节\",{\"1\":{\"15\":1}}],[\"生命周期和作用范围\",{\"1\":{\"145\":1}}],[\"生日\",{\"1\":{\"103\":2}}],[\"生成一个被代理对象的子类来作为代理\",{\"1\":{\"146\":1}}],[\"生成一套以网页文件形式体现的该程序的说明文档\",{\"1\":{\"13\":1}}],[\"生成随机字节并将其置于用户提供的\",{\"1\":{\"31\":1}}],[\"起始索引可以省略\",{\"1\":{\"108\":1}}],[\"起始索引=\",{\"1\":{\"108\":1}}],[\"起始索引从0开始\",{\"1\":{\"108\":1}}],[\"起始索引\",{\"1\":{\"108\":1}}],[\"起别名为生日\",{\"1\":{\"103\":1}}],[\"起一个名字\",{\"1\":{\"78\":1}}],[\"置为null\",{\"1\":{\"101\":1}}],[\"条件分页查询业务\",{\"1\":{\"173\":1}}],[\"条件模糊\",{\"1\":{\"173\":1}}],[\"条件运算符\",{\"1\":{\"104\":1}}],[\"条件列表\",{\"1\":{\"104\":1,\"109\":1}}],[\"条件查询\",{\"0\":{\"104\":1},\"1\":{\"104\":1}}],[\"条件\",{\"1\":{\"101\":2,\"106\":1,\"122\":1,\"123\":2,\"124\":1,\"173\":2}}],[\"给接口内所有方法开启事务\",{\"1\":{\"152\":1}}],[\"给程序动态统一添加额外功能的一种技术\",{\"1\":{\"146\":1}}],[\"给全部字段添加数据\",{\"1\":{\"101\":1}}],[\"给指定字段添加数据\",{\"1\":{\"101\":1}}],[\"编程式异常处理\",{\"1\":{\"174\":1}}],[\"编号\",{\"1\":{\"99\":1}}],[\"编写xml配置文件\",{\"1\":{\"134\":1}}],[\"编写工具类以便于快速构建sqlsession\",{\"1\":{\"59\":1}}],[\"编写相应的mapper\",{\"1\":{\"58\":1}}],[\"编写相应的实体类\",{\"1\":{\"58\":1}}],[\"编写mapper接口\",{\"1\":{\"58\":1}}],[\"编写mybatis核心配置文件mybatis\",{\"1\":{\"58\":1}}],[\"旧字段名\",{\"1\":{\"99\":1}}],[\"新密码\",{\"1\":{\"111\":1}}],[\"新表名\",{\"1\":{\"99\":1}}],[\"新字段名\",{\"1\":{\"99\":1}}],[\"新数据类型\",{\"1\":{\"99\":1}}],[\"新增\",{\"1\":{\"88\":1}}],[\"里的内容可根据情况选填\",{\"1\":{\"98\":1}}],[\"混合日期时间值\",{\"1\":{\"96\":2}}],[\"y的模\",{\"1\":{\"115\":1}}],[\"y\",{\"1\":{\"115\":2}}],[\"year\",{\"1\":{\"96\":1,\"116\":1}}],[\"yyyy\",{\"1\":{\"32\":2,\"96\":4}}],[\"yyyy年mm月dd日\",{\"1\":{\"32\":1}}],[\"至\",{\"1\":{\"96\":5}}],[\"格式的数据\",{\"1\":{\"170\":1}}],[\"格式在传递嵌套数据结构时更加清晰易懂\",{\"1\":{\"160\":1}}],[\"格式\",{\"1\":{\"96\":1}}],[\"格式化本地日期\",{\"1\":{\"32\":1}}],[\"范围\",{\"1\":{\"96\":1}}],[\"范围的字符序列为str\",{\"1\":{\"28\":1}}],[\"极大文本数据\",{\"1\":{\"95\":1}}],[\"极大整数值\",{\"1\":{\"94\":1}}],[\"长度\",{\"1\":{\"99\":3}}],[\"长度比arr大则会添加null\",{\"1\":{\"29\":1}}],[\"长度比arr小则会省去后面的元素\",{\"1\":{\"29\":1}}],[\"长文本数据\",{\"1\":{\"95\":1}}],[\"短文本字符串\",{\"1\":{\"95\":1}}],[\"短路或\",{\"1\":{\"14\":1}}],[\"短路与\",{\"1\":{\"14\":1}}],[\"变长字符串\",{\"1\":{\"95\":1}}],[\"变量类型\",{\"1\":{\"36\":1}}],[\"变量迭代也可以有多个\",{\"1\":{\"18\":1}}],[\"双精度浮点值\",{\"1\":{\"94\":1}}],[\"大整数值\",{\"1\":{\"94\":3}}],[\"大小\",{\"1\":{\"94\":1,\"95\":1,\"96\":1}}],[\"小明\",{\"1\":{\"137\":1}}],[\"小数值\",{\"1\":{\"94\":1}}],[\"小数默认类型是\",{\"1\":{\"15\":1}}],[\"小整数值\",{\"1\":{\"94\":1}}],[\"描述切入点通常描述接口\",{\"1\":{\"148\":1}}],[\"描述\",{\"1\":{\"94\":1,\"95\":1,\"96\":1,\"119\":1,\"126\":1,\"128\":1,\"130\":1}}],[\"控制器方法参数\",{\"1\":{\"166\":1}}],[\"控制对象与对象之间的依赖关系\",{\"1\":{\"133\":1}}],[\"控制反转\",{\"1\":{\"133\":1}}],[\"控制数据库的控制权限\",{\"1\":{\"92\":1}}],[\"控制台输入javadoc\",{\"1\":{\"13\":1}}],[\"缩进来增强语句的可读性\",{\"1\":{\"92\":1}}],[\"登录保护\",{\"1\":{\"175\":1}}],[\"登录\",{\"1\":{\"91\":1}}],[\"尤其是开放源码这一特点\",{\"1\":{\"90\":1}}],[\"速度快\",{\"1\":{\"90\":1}}],[\"由并发事务所做的修改必须与任何其他并发事务所做的修改隔离\",{\"1\":{\"151\":1}}],[\"由\",{\"1\":{\"133\":1}}],[\"由于其体积小\",{\"1\":{\"90\":1}}],[\"由瑞典mysql\",{\"1\":{\"90\":1}}],[\"软件采用了双授权政策\",{\"1\":{\"90\":1}}],[\"修改配置类添加拦截器\",{\"1\":{\"175\":1}}],[\"修改表\",{\"1\":{\"112\":1}}],[\"修改表名\",{\"1\":{\"99\":1}}],[\"修改用户密码\",{\"1\":{\"111\":1}}],[\"修改语句的条件如果没有则会修改整张表的所有数据\",{\"1\":{\"101\":1}}],[\"修改所有age为18\",{\"1\":{\"101\":1}}],[\"修改id为1的数据将name修改为jcven\",{\"1\":{\"101\":1}}],[\"修改数据\",{\"1\":{\"101\":1,\"112\":1}}],[\"修改数据类型\",{\"1\":{\"99\":1}}],[\"修改字段名和类型\",{\"1\":{\"99\":1}}],[\"修改\",{\"1\":{\"88\":1}}],[\"修饰的类就是抽象类\",{\"1\":{\"50\":1}}],[\"修饰的类\",{\"1\":{\"49\":1}}],[\"修饰的属性是静态的\",{\"1\":{\"49\":1}}],[\"修饰的属性必须在定义的时候赋初值\",{\"1\":{\"49\":1}}],[\"修饰的属性又叫常量\",{\"1\":{\"49\":1}}],[\"修饰的方法叫静态方法也叫类方法\",{\"1\":{\"47\":1}}],[\"修饰的变量叫静态变量\",{\"1\":{\"47\":1}}],[\"修饰\",{\"1\":{\"27\":1}}],[\"执行测试\",{\"1\":{\"134\":1}}],[\"执行顺序\",{\"0\":{\"109\":1},\"1\":{\"106\":1,\"109\":1}}],[\"执行dql语句时\",{\"1\":{\"83\":1}}],[\"执⾏查询语句\",{\"1\":{\"87\":1}}],[\"引用类型注入设置形参即可\",{\"1\":{\"145\":1}}],[\"引用类型注入\",{\"1\":{\"145\":2}}],[\"引用使用ref\",{\"1\":{\"137\":1}}],[\"引用已抽取的sql片段\",{\"1\":{\"79\":1}}],[\"引入context\",{\"1\":{\"137\":1}}],[\"引入属性文件\",{\"1\":{\"137\":1}}],[\"引入外部属性文件\",{\"1\":{\"137\":3}}],[\"引入外部bean\",{\"1\":{\"137\":1}}],[\"引入相应的命名空间\",{\"1\":{\"137\":1}}],[\"引入spring\",{\"1\":{\"134\":1}}],[\"引入依赖\",{\"1\":{\"87\":1,\"137\":1}}],[\"⽣成mapper接⼝的包名和位置\",{\"1\":{\"86\":1}}],[\"⽣成sql映射⽂件的包名和位置\",{\"1\":{\"86\":1}}],[\"⽣成pojo包名和位置\",{\"1\":{\"86\":1}}],[\"⽣成的是增强版\",{\"1\":{\"86\":1}}],[\"⽣成的是基础版\",{\"1\":{\"86\":1}}],[\"防⽌⽣成重复代码\",{\"1\":{\"86\":1}}],[\"其中键值对是有序排列的\",{\"1\":{\"160\":1}}],[\"其中的⼀个插件\",{\"1\":{\"86\":1}}],[\"其功能与\",{\"1\":{\"144\":3}}],[\"其目的是用于简化\",{\"1\":{\"133\":1}}],[\"其他特点都相同\",{\"1\":{\"52\":1}}],[\"定长字符串\",{\"1\":{\"95\":1}}],[\"定制构建过程\",{\"1\":{\"86\":1}}],[\"定义切入点\",{\"1\":{\"147\":1,\"149\":1}}],[\"定义一个用于接收\",{\"1\":{\"163\":1}}],[\"定义一个实体类\",{\"1\":{\"161\":1}}],[\"定义一个通知类\",{\"1\":{\"147\":1}}],[\"定义一个方法获得要管理对象\",{\"1\":{\"145\":1}}],[\"定义在外部类的成员位置用static修饰的成员内部类\",{\"1\":{\"52\":1}}],[\"定义在外部类的局部位置\",{\"1\":{\"52\":2}}],[\"定义在外部类中\",{\"1\":{\"52\":1}}],[\"定义接口\",{\"1\":{\"51\":1}}],[\"定义时赋值\",{\"1\":{\"49\":1}}],[\"添加拦截路径\",{\"1\":{\"175\":1}}],[\"添加拦截器\",{\"1\":{\"175\":2}}],[\"添加依赖\",{\"1\":{\"147\":1}}],[\"添加\",{\"1\":{\"145\":1}}],[\"添加相关约束\",{\"1\":{\"143\":1}}],[\"添加外键\",{\"1\":{\"120\":1}}],[\"添加数据时需要一一对应\",{\"1\":{\"101\":1}}],[\"添加字段\",{\"1\":{\"99\":1}}],[\"添加插件依赖\",{\"1\":{\"86\":1}}],[\"添加一个duration\",{\"1\":{\"32\":1}}],[\"逆向工程\",{\"0\":{\"86\":1}}],[\"提交的数据的时候一个key对应多个值\",{\"1\":{\"161\":1}}],[\"提交事务\",{\"1\":{\"129\":2}}],[\"提高程序的可重用性\",{\"1\":{\"146\":1}}],[\"提高性能\",{\"1\":{\"83\":1}}],[\"提出并创立\",{\"1\":{\"133\":1}}],[\"提供的工具\",{\"1\":{\"13\":1}}],[\"减少io\",{\"1\":{\"83\":1}}],[\"减法运算\",{\"1\":{\"31\":2}}],[\"内连接查询的是两张表交集的部分\",{\"1\":{\"122\":1}}],[\"内连接\",{\"0\":{\"122\":1}}],[\"内存\",{\"1\":{\"83\":1}}],[\"内部bean\",{\"1\":{\"137\":1}}],[\"内部给常用的数据类型设定了很多别名\",{\"1\":{\"68\":1}}],[\"内部类\",{\"0\":{\"52\":1}}],[\"学生集合\",{\"1\":{\"82\":1}}],[\"学生类\",{\"1\":{\"81\":1,\"82\":1}}],[\"懒加载\",{\"1\":{\"81\":1,\"82\":1}}],[\"班级名\",{\"1\":{\"81\":1,\"82\":1}}],[\"班级类\",{\"1\":{\"81\":1,\"82\":1}}],[\"班级\",{\"1\":{\"81\":1}}],[\"姓名\",{\"1\":{\"81\":1,\"82\":1,\"99\":1,\"119\":1}}],[\"省略getter和setter\",{\"1\":{\"81\":2,\"82\":2}}],[\"副表\",{\"1\":{\"81\":1,\"82\":1}}],[\"需在配置bean时指定销毁方法\",{\"1\":{\"139\":1}}],[\"需在配置bean时指定初始化方法\",{\"1\":{\"139\":1}}],[\"需求分析\",{\"1\":{\"173\":1}}],[\"需求\",{\"1\":{\"81\":1,\"82\":1}}],[\"需要根据具体情况选择合适的注解进行校验\",{\"1\":{\"176\":1}}],[\"需要根据具体应用场景和需求选择合适的插入方式\",{\"1\":{\"72\":1}}],[\"需要注意的是\",{\"1\":{\"176\":1}}],[\"需要注意的是只校验空格前后的字符串\",{\"1\":{\"176\":1}}],[\"需要选择合适的参数类型\",{\"1\":{\"160\":1}}],[\"需要提供无参构造器\",{\"1\":{\"145\":1}}],[\"需要在后面加\",{\"1\":{\"94\":1}}],[\"需要在方法中可以创建内部类对象\",{\"1\":{\"52\":1}}],[\"需要访问接口的参数时还是正常写\",{\"1\":{\"74\":1}}],[\"需要使用\",{\"1\":{\"63\":1}}],[\"需要去掉set方法\",{\"1\":{\"53\":1}}],[\"需要将该接口的所有抽象方法都实现\",{\"1\":{\"51\":1}}],[\"需要复制到的数组\",{\"1\":{\"30\":1}}],[\"需要重写compare方法\",{\"1\":{\"29\":1}}],[\"抽取重复的sql片段\",{\"1\":{\"79\":1}}],[\"抽象方法不能使用private\",{\"1\":{\"50\":1}}],[\"抽象方法\",{\"1\":{\"50\":1}}],[\"抽象类实现接口\",{\"1\":{\"51\":1}}],[\"抽象类不能被实例化\",{\"1\":{\"50\":1}}],[\"抽象类\",{\"0\":{\"50\":1},\"1\":{\"50\":1}}],[\"遍历map集合能够得到map集合的key\",{\"1\":{\"78\":1}}],[\"遍历集合的过程中能得到每一个具体对象\",{\"1\":{\"78\":1}}],[\"便于后面引用遍历list集合能够得到list集合的索引值\",{\"1\":{\"78\":1}}],[\"那就不需要视图解析器\",{\"1\":{\"155\":1}}],[\"那么这些注解就可以提取到类上\",{\"1\":{\"170\":1}}],[\"那么系统中的所有变化将自动地回滚\",{\"1\":{\"151\":1}}],[\"那么系统中所有变化将正确地应用\",{\"1\":{\"151\":1}}],[\"那么\",{\"1\":{\"146\":1}}],[\"那么就执行otherwise分支\",{\"1\":{\"77\":1}}],[\"那这两个对象的\",{\"1\":{\"45\":2}}],[\"遇到的第一个满足条件的分支会被采纳\",{\"1\":{\"77\":1}}],[\"分页参数\",{\"1\":{\"109\":1}}],[\"分页查询业务\",{\"1\":{\"173\":1}}],[\"分页查询\",{\"0\":{\"108\":1},\"1\":{\"108\":1,\"173\":1}}],[\"分组后条件列表\",{\"1\":{\"109\":1}}],[\"分组后过滤条件\",{\"1\":{\"106\":1}}],[\"分组字段列表\",{\"1\":{\"109\":1}}],[\"分组字段名\",{\"1\":{\"106\":1}}],[\"分组查询\",{\"0\":{\"106\":1},\"1\":{\"106\":1}}],[\"分类\",{\"1\":{\"92\":1}}],[\"分为社区版和商业版\",{\"1\":{\"90\":1}}],[\"分步查询\",{\"1\":{\"81\":1,\"82\":1}}],[\"分隔有可能的多个值\",{\"1\":{\"76\":2}}],[\"分别捕获不同的异常\",{\"1\":{\"55\":1}}],[\"部分条件满足\",{\"1\":{\"75\":1}}],[\"部门平均工资\",{\"1\":{\"69\":1}}],[\"第三方bean注入资源\",{\"1\":{\"145\":1}}],[\"第三方bean管理\",{\"1\":{\"145\":1}}],[\"第三种方式\",{\"1\":{\"81\":1}}],[\"第三种情况\",{\"1\":{\"75\":1}}],[\"第二种方式\",{\"1\":{\"82\":1}}],[\"第二种方法\",{\"1\":{\"81\":1}}],[\"第二种情况\",{\"1\":{\"75\":1}}],[\"第一种方式\",{\"1\":{\"82\":1}}],[\"第一种方法\",{\"1\":{\"81\":1}}],[\"第一种情况\",{\"1\":{\"75\":1}}],[\"第07章\",{\"0\":{\"46\":1}}],[\"第06章\",{\"0\":{\"39\":1}}],[\"第05章\",{\"0\":{\"34\":1}}],[\"第08章\",{\"0\":{\"26\":1}}],[\"第04章\",{\"0\":{\"22\":1}}],[\"第03章\",{\"0\":{\"16\":1}}],[\"第02章\",{\"0\":{\"12\":1}}],[\"第01章\",{\"0\":{\"9\":1}}],[\"为任意层任意字符串\",{\"1\":{\"158\":1}}],[\"为单层任意字符串\",{\"1\":{\"158\":1}}],[\"为\",{\"1\":{\"74\":1,\"176\":1}}],[\"为数据库中的记录\",{\"1\":{\"57\":1}}],[\"作为网站数据库\",{\"1\":{\"90\":1}}],[\"作为字符串类型主键\",{\"1\":{\"72\":1}}],[\"作用\",{\"1\":{\"152\":1}}],[\"作用是对类进行初始化\",{\"1\":{\"48\":1}}],[\"作用范围\",{\"1\":{\"36\":1}}],[\"作用域为整个类体\",{\"1\":{\"52\":1}}],[\"作用域在其方法内或代码块内\",{\"1\":{\"52\":1}}],[\"作用域\",{\"1\":{\"36\":2}}],[\"赋值给对象中的\",{\"1\":{\"72\":1}}],[\"字段类型也需要保持一致\",{\"1\":{\"125\":1}}],[\"字段来限定\",{\"1\":{\"122\":1}}],[\"字段列表\",{\"1\":{\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"122\":2,\"123\":2,\"124\":1,\"125\":2}}],[\"字段2\",{\"1\":{\"103\":2,\"107\":1}}],[\"字段1\",{\"1\":{\"103\":2,\"107\":1}}],[\"字段名2=值2\",{\"1\":{\"101\":1}}],[\"字段名2\",{\"1\":{\"101\":2}}],[\"字段名1=值1\",{\"1\":{\"101\":1}}],[\"字段名1\",{\"1\":{\"101\":2}}],[\"字段名\",{\"1\":{\"99\":3}}],[\"字段\",{\"1\":{\"92\":1,\"99\":2}}],[\"字段中\",{\"1\":{\"72\":1}}],[\"字符集通常使用utf8mb4\",{\"1\":{\"98\":1}}],[\"字符集\",{\"1\":{\"98\":1}}],[\"字符串函数\",{\"0\":{\"114\":1}}],[\"字符串类型\",{\"0\":{\"95\":1},\"1\":{\"95\":1}}],[\"字符串整体的后面要添加的字符串\",{\"1\":{\"78\":1}}],[\"字符串整体的前面要添加的字符串\",{\"1\":{\"78\":1}}],[\"字符串反转\",{\"1\":{\"28\":1}}],[\"字符串追加\",{\"1\":{\"28\":1}}],[\"字符串拼接\",{\"1\":{\"28\":1,\"114\":1}}],[\"字符串\",{\"1\":{\"28\":2,\"176\":2}}],[\"字符串与其他类型的转换\",{\"1\":{\"28\":1}}],[\"字符数组\",{\"1\":{\"28\":2}}],[\"并通过标准的验证接口对bean进行验证\",{\"1\":{\"176\":1}}],[\"并发送给客户端\",{\"1\":{\"170\":1}}],[\"并发事务问题\",{\"0\":{\"130\":1}}],[\"并不影响参数接收\",{\"1\":{\"166\":1}}],[\"并在视图呈现过程中向模板公开\",{\"1\":{\"166\":1}}],[\"并将其转换为\",{\"1\":{\"163\":1}}],[\"并根据工作地址分组\",{\"1\":{\"106\":1}}],[\"并设置到\",{\"1\":{\"72\":1}}],[\"并且易于使用和理解\",{\"1\":{\"171\":1}}],[\"并且不分先后顺序\",{\"1\":{\"166\":1}}],[\"并且需要指定\",{\"1\":{\"163\":1}}],[\"并且可以作用在应用的任何层次\",{\"1\":{\"144\":1}}],[\"并且可以改变数组的值\",{\"1\":{\"24\":1}}],[\"并且插入场景下\",{\"1\":{\"66\":1}}],[\"并且避免重复创建影响性能\",{\"1\":{\"59\":1}}],[\"并且用于区分当前类的属性和局部变量\",{\"1\":{\"38\":1}}],[\"并且\",{\"1\":{\"27\":1}}],[\"帮助插入uuid作为字符串类型主键示例\",{\"1\":{\"72\":1}}],[\"然后按照配置相反的顺序调用各个\",{\"1\":{\"175\":2}}],[\"然后按照配置顺序调用各个\",{\"1\":{\"175\":1}}],[\"然后在\",{\"1\":{\"174\":1}}],[\"然后导入到springconfig\",{\"1\":{\"145\":1}}],[\"然后插入语句会被调用\",{\"1\":{\"72\":1}}],[\"然后调用其方法\",{\"1\":{\"52\":2}}],[\"元素将会首先运行\",{\"1\":{\"72\":1}}],[\"子查询位置\",{\"1\":{\"126\":1}}],[\"子查询外部也可以是\",{\"1\":{\"126\":1}}],[\"子查询返回列表的所有值都必须满足\",{\"1\":{\"126\":1}}],[\"子查询返回列表中有任意一个满足即可\",{\"1\":{\"126\":1}}],[\"子查询\",{\"0\":{\"126\":1},\"1\":{\"126\":1}}],[\"子表将外键列设置成一个默认的值\",{\"1\":{\"120\":1}}],[\"子句\",{\"1\":{\"72\":2}}],[\"子元素\",{\"1\":{\"72\":1}}],[\"子类异常写在前\",{\"1\":{\"55\":1}}],[\"子类抛出的异常要和父类的一致或者是父类异常类型的子类型\",{\"1\":{\"55\":1}}],[\"子类重写父类方法时\",{\"1\":{\"55\":1}}],[\"子类重写f1\",{\"1\":{\"42\":1}}],[\"子类的构造方法\",{\"1\":{\"48\":1}}],[\"子类的普通代码块和普通属性\",{\"1\":{\"48\":1}}],[\"子类的静态代码块和静态属性\",{\"1\":{\"48\":1}}],[\"子类的一个方法与父类的一个方法名称\",{\"1\":{\"42\":1}}],[\"子类不能缩小父类的方法的访问权限\",{\"1\":{\"42\":1}}],[\"子类方法的参数\",{\"1\":{\"42\":1}}],[\"子类必须调用父类的构造器\",{\"1\":{\"41\":1}}],[\"子类继承父类的所有属性和方法\",{\"1\":{\"41\":1}}],[\"子类student\",{\"1\":{\"41\":1}}],[\"子类只能继承一个父类\",{\"1\":{\"41\":1}}],[\"子类\",{\"1\":{\"35\":1}}],[\"非单例\",{\"1\":{\"145\":1}}],[\"非空约束\",{\"1\":{\"119\":1}}],[\"非运算\",{\"1\":{\"104\":1}}],[\"非自增长类型主键\",{\"1\":{\"72\":1}}],[\"非私有属性和方法可以在子类直接访问\",{\"1\":{\"41\":1}}],[\"测试部\",{\"1\":{\"137\":1}}],[\"测试\",{\"1\":{\"71\":1,\"137\":3,\"139\":1,\"140\":1,\"143\":1}}],[\"希望把多个实体类对象放在list集合中返回\",{\"1\":{\"71\":1}}],[\"开发人员只需要为方法或类标注相应的注解\",{\"1\":{\"174\":1}}],[\"开发人员需要显式地进行异常处理\",{\"1\":{\"174\":1}}],[\"开发文档\",{\"1\":{\"13\":1}}],[\"开启对计划任务的支持\",{\"1\":{\"144\":1}}],[\"开启异步任务支持\",{\"1\":{\"144\":1}}],[\"开启spring对aspectj的支持\",{\"1\":{\"144\":1}}],[\"开启组件扫描功能\",{\"1\":{\"143\":1}}],[\"开启组件扫描\",{\"1\":{\"143\":1,\"144\":1}}],[\"开启事务\",{\"1\":{\"129\":1,\"144\":1,\"152\":1}}],[\"开启分⻚\",{\"1\":{\"87\":1}}],[\"开启驼峰命名转换\",{\"1\":{\"70\":1}}],[\"让查询结果的每一列都和java实体类中属性对应起来\",{\"1\":{\"70\":1}}],[\"让调用f1方法的调用者处理\",{\"1\":{\"55\":1}}],[\"员工工资\",{\"1\":{\"69\":1}}],[\"员工姓名\",{\"1\":{\"69\":1}}],[\"没法封装到实体类对象中\",{\"1\":{\"69\":1}}],[\"没有\",{\"1\":{\"176\":1}}],[\"没有领导也要查询出来\",{\"1\":{\"124\":1}}],[\"没有set子句的update语句会导致sql语法错误\",{\"1\":{\"75\":1}}],[\"没有方法体\",{\"1\":{\"50\":1}}],[\"没有动态绑定机制\",{\"1\":{\"44\":1}}],[\"没有指定的continue默认跳过最近的循环体\",{\"1\":{\"20\":1}}],[\"没有指定的break默认退出最近的循环体\",{\"1\":{\"19\":1}}],[\"适用于sql查询返回的各个字段综合起来并不和任何一个现有的实体类对应\",{\"1\":{\"69\":1}}],[\"等标准的注解指定校验规则\",{\"1\":{\"176\":1}}],[\"等等\",{\"1\":{\"68\":1}}],[\"等号\",{\"1\":{\"44\":2}}],[\"再在后面的sql语句中引用这个对应关系\",{\"1\":{\"67\":1}}],[\"见下面的例子\",{\"1\":{\"67\":1}}],[\"比如\",{\"1\":{\"67\":2}}],[\"比较编号\",{\"1\":{\"53\":1}}],[\"比较两个枚举变量\",{\"1\":{\"53\":1}}],[\"比较两个localdate\",{\"1\":{\"32\":1}}],[\"比较字符串是否相等\",{\"1\":{\"28\":2}}],[\"比较的是对象的内存地址\",{\"1\":{\"27\":1}}],[\"比较的是值\",{\"1\":{\"27\":1}}],[\"比较方式\",{\"1\":{\"27\":1}}],[\"也可以访问\",{\"1\":{\"158\":1}}],[\"也可以写在接口上\",{\"1\":{\"152\":1}}],[\"也可以作为前缀后缀的匹配符出现\",{\"1\":{\"148\":1}}],[\"也可以指定一个包名\",{\"1\":{\"67\":1}}],[\"也存在于堆中\",{\"1\":{\"27\":1}}],[\"例如使用\",{\"1\":{\"174\":1}}],[\"例如一个\",{\"1\":{\"172\":1}}],[\"例如getbyld书写成\",{\"1\":{\"148\":1}}],[\"例如userservice\",{\"1\":{\"148\":1}}],[\"例如事务处理\",{\"1\":{\"146\":1}}],[\"例如\",{\"1\":{\"67\":1,\"144\":1,\"148\":1,\"160\":1,\"174\":1}}],[\"意在降低冗余的全限定类名书写\",{\"1\":{\"67\":1}}],[\"配置详解\",{\"1\":{\"175\":1}}],[\"配置tomcat服务器\",{\"1\":{\"156\":1}}],[\"配置类开启aop\",{\"1\":{\"147\":1}}],[\"配置类注解\",{\"1\":{\"144\":1}}],[\"配置后置处理器\",{\"1\":{\"139\":1}}],[\"配置bean\",{\"1\":{\"137\":3,\"139\":1,\"140\":1}}],[\"配置一个名为user的bean\",{\"1\":{\"134\":1}}],[\"配置\",{\"1\":{\"67\":1,\"145\":1}}],[\"它已经包含在\",{\"1\":{\"176\":1}}],[\"它通常涉及到对异常类型的检测及其处理\",{\"1\":{\"174\":1}}],[\"它通过预编译方式和运行期动态代理方式实现\",{\"1\":{\"146\":1}}],[\"它们使用标准的\",{\"1\":{\"171\":1}}],[\"它们之间的区别如下\",{\"1\":{\"158\":1}}],[\"它可以处理请求参数和处理响应数据数据\",{\"1\":{\"155\":1}}],[\"它内部缓存handler\",{\"1\":{\"155\":1}}],[\"它是整个流程处理的核心\",{\"1\":{\"155\":1}}],[\"它是一种基于标准\",{\"1\":{\"171\":1}}],[\"它是一种设计思想\",{\"1\":{\"133\":1,\"146\":1}}],[\"它是一个泛化的概念\",{\"1\":{\"144\":1}}],[\"它对数据库所做的更新就必须保存下来\",{\"1\":{\"151\":1}}],[\"它对数据库的数据改变是永久的\",{\"1\":{\"128\":1}}],[\"它贯穿了\",{\"1\":{\"133\":1}}],[\"它与使用关键字\",{\"1\":{\"133\":1}}],[\"它仅用于\",{\"1\":{\"67\":1}}],[\"它支持自定义\",{\"1\":{\"57\":1}}],[\"写范型类型即可\",{\"1\":{\"67\":1}}],[\"别名b\",{\"1\":{\"124\":1}}],[\"别名a\",{\"1\":{\"124\":1}}],[\"别名2\",{\"1\":{\"103\":1}}],[\"别名1\",{\"1\":{\"103\":1}}],[\"别名\",{\"1\":{\"67\":1}}],[\"｜\",{\"1\":{\"67\":2}}],[\"查看事务的隔离级别\",{\"1\":{\"131\":1}}],[\"查看事务提交方式\",{\"1\":{\"129\":1}}],[\"查看版本\",{\"1\":{\"91\":1}}],[\"查询操作\",{\"1\":{\"172\":1}}],[\"查询操作的查询结果\",{\"1\":{\"66\":1}}],[\"查询类使用\",{\"1\":{\"148\":1}}],[\"查询入职日期在2006\",{\"1\":{\"126\":1}}],[\"查询与\",{\"1\":{\"126\":1}}],[\"查询与tom的薪资及直属领导相同的员工信息\",{\"1\":{\"126\":1}}],[\"查询比研发部中任意一人工资高的员工信息\",{\"1\":{\"126\":1}}],[\"查询比财务部所有人工工资都高的员工信息\",{\"1\":{\"126\":1}}],[\"查询销售部和市场部的所有员工信息\",{\"1\":{\"126\":1}}],[\"查询在\",{\"1\":{\"126\":1}}],[\"查询薪资低于5000的员工和年龄大于50岁的员工\",{\"1\":{\"125\":1}}],[\"查询员工及其所属领导的名字\",{\"1\":{\"124\":2}}],[\"查询员工的平均年龄\",{\"1\":{\"105\":1}}],[\"查询dept表的所有数据和对应的员工信息\",{\"1\":{\"123\":1}}],[\"查询emp表的所有数据和对应的部门信息\",{\"1\":{\"123\":1}}],[\"查询每个员工的姓名及关联的部门的名称隐式内连接\",{\"1\":{\"122\":1}}],[\"查询权限\",{\"1\":{\"112\":1}}],[\"查询数据\",{\"1\":{\"112\":1}}],[\"查询用户\",{\"1\":{\"111\":1}}],[\"查询页码\",{\"1\":{\"108\":1}}],[\"查询第二页员工数据\",{\"1\":{\"108\":1}}],[\"查询第一页员工数据\",{\"1\":{\"108\":1}}],[\"查询记录数\",{\"1\":{\"108\":1}}],[\"查询姓名为三个字的人员\",{\"1\":{\"104\":1}}],[\"查询年龄小于25的员工\",{\"1\":{\"106\":1}}],[\"查询年龄的总和\",{\"1\":{\"105\":1}}],[\"查询年龄最后一位是8的人员\",{\"1\":{\"104\":1}}],[\"查询年龄是15或20或25的人员\",{\"1\":{\"104\":1}}],[\"查询年龄在15\",{\"1\":{\"104\":1}}],[\"查询所有年龄\",{\"1\":{\"103\":1}}],[\"查询所有date\",{\"1\":{\"103\":1}}],[\"查询所有数据库\",{\"1\":{\"98\":1}}],[\"查询多个字段\",{\"1\":{\"103\":1}}],[\"查询表的详细信息\",{\"1\":{\"99\":1}}],[\"查询表结构\",{\"1\":{\"99\":1}}],[\"查询当前数据库所有表\",{\"1\":{\"99\":1}}],[\"查询当前数据库\",{\"1\":{\"98\":1}}],[\"查询\",{\"1\":{\"88\":1,\"126\":1,\"172\":1}}],[\"查询结果返回多个实体类对象\",{\"1\":{\"71\":1}}],[\"查找指定index位置上的字符\",{\"1\":{\"28\":1}}],[\"增删改操作返回的受影响行数\",{\"1\":{\"66\":1}}],[\"增强型for循环\",{\"1\":{\"24\":1}}],[\"解析后的问号占位符这个位置\",{\"1\":{\"65\":1}}],[\"填充到\",{\"1\":{\"65\":1}}],[\"来自其源模块的名称\",{\"1\":{\"155\":1}}],[\"来查询\",{\"1\":{\"72\":1}}],[\"来指定类型\",{\"1\":{\"62\":1,\"64\":1}}],[\"来进行捕获\",{\"1\":{\"55\":2}}],[\"肯定不用$\",{\"1\":{\"61\":1}}],[\"实体接收\",{\"1\":{\"161\":1}}],[\"实体类\",{\"1\":{\"81\":1,\"82\":1}}],[\"实体类型参数\",{\"0\":{\"65\":1}}],[\"实现转换为声明的方法参数类型\",{\"1\":{\"166\":1}}],[\"实现了某个接口\",{\"1\":{\"146\":1}}],[\"实现主键数据回显示\",{\"1\":{\"66\":1}}],[\"实现的\",{\"1\":{\"61\":1}}],[\"实现接口beanpostprocessor\",{\"1\":{\"139\":1}}],[\"实现接口\",{\"1\":{\"51\":1}}],[\"实际开发中\",{\"1\":{\"61\":1}}],[\"结论\",{\"1\":{\"61\":1}}],[\"结束方法的执行\",{\"1\":{\"21\":1}}],[\"结束本次循环\",{\"1\":{\"20\":1}}],[\"此方法只有prehandler\",{\"1\":{\"175\":1}}],[\"此时二级缓存才可用\",{\"1\":{\"85\":1}}],[\"此时不需要任何特殊处理\",{\"1\":{\"71\":1}}],[\"此时只能使用$\",{\"1\":{\"61\":1}}],[\"此为编译异常\",{\"1\":{\"55\":1}}],[\"形式传参是字符串拼接操作\",{\"1\":{\"61\":1}}],[\"形式传参是转换为问号占位符\",{\"1\":{\"61\":1}}],[\"$\",{\"0\":{\"61\":1},\"1\":{\"61\":1,\"137\":4,\"145\":1}}],[\"与any相同\",{\"1\":{\"126\":1}}],[\"与mapper接口保持对应\",{\"1\":{\"62\":1,\"64\":1}}],[\"与\",{\"0\":{\"61\":1}}],[\"输入\",{\"0\":{\"60\":1}}],[\"输出userserviceimpl对象\",{\"1\":{\"136\":1}}],[\"输出\",{\"0\":{\"66\":1},\"1\":{\"137\":2}}],[\"输出当前枚举对象的次序\",{\"1\":{\"53\":1}}],[\"输出结果\",{\"1\":{\"32\":1}}],[\"加入形参\",{\"1\":{\"145\":1}}],[\"加入注解componment\",{\"1\":{\"143\":1}}],[\"加入设置后可以不给字段设置别名\",{\"1\":{\"70\":1}}],[\"加上一个时间间隔expr后的时间值\",{\"1\":{\"116\":1}}],[\"加工成getxxx\",{\"1\":{\"65\":1}}],[\"加载springmvc容器配置\",{\"1\":{\"156\":1}}],[\"加载spring容器配置\",{\"1\":{\"156\":1}}],[\"加载spring配置文件\",{\"1\":{\"134\":1}}],[\"加载sql映射文件\",{\"1\":{\"58\":1}}],[\"加载mybatis的核心配置文件\",{\"1\":{\"58\":1}}],[\"加法运算\",{\"1\":{\"31\":2}}],[\"采用键值对的形式进行传递\",{\"1\":{\"160\":1}}],[\"采用连接池方式管理数据库连接\",{\"1\":{\"58\":1}}],[\"采用jdbc方式对数据库事务进行commit\",{\"1\":{\"58\":1}}],[\"延迟加载\",{\"1\":{\"58\":1}}],[\"驼峰命名转换\",{\"1\":{\"58\":1}}],[\"快速入门\",{\"0\":{\"58\":1,\"134\":1,\"156\":1}}],[\"简化响应前端数据\",{\"1\":{\"168\":1}}],[\"简化请求参数接收\",{\"1\":{\"168\":1}}],[\"简化了参数接收和响应\",{\"1\":{\"168\":1}}],[\"简单类型注入\",{\"1\":{\"145\":2}}],[\"简单的说\",{\"1\":{\"57\":1}}],[\"简介\",{\"0\":{\"57\":1,\"90\":1},\"1\":{\"57\":1,\"151\":1,\"155\":1}}],[\"免除了几乎所有的\",{\"1\":{\"57\":1}}],[\"中封装到了下面这个枚举类\",{\"1\":{\"159\":1}}],[\"中\",{\"1\":{\"155\":1,\"169\":1}}],[\"中等文本数据\",{\"1\":{\"95\":1}}],[\"中查询\",{\"1\":{\"72\":1}}],[\"中的所有操作\",{\"1\":{\"151\":1}}],[\"中的\",{\"1\":{\"67\":1,\"144\":4}}],[\"中传入的数据\",{\"1\":{\"65\":1}}],[\"中写map中的key\",{\"1\":{\"64\":1}}],[\"中可以随意命名\",{\"1\":{\"62\":1}}],[\"中可能有多个异常\",{\"1\":{\"55\":1}}],[\"中文网站\",{\"1\":{\"57\":1}}],[\"中间用逗号隔开\",{\"1\":{\"53\":1}}],[\"块中执行一些清理操作\",{\"1\":{\"174\":1}}],[\"块中编写特定的处理代码\",{\"1\":{\"174\":1}}],[\"块来捕获异常\",{\"1\":{\"174\":1}}],[\"块\",{\"1\":{\"55\":2}}],[\"直接接收参数\",{\"1\":{\"161\":1}}],[\"直接返回字符串给前端\",{\"1\":{\"156\":1}}],[\"直接写limit10\",{\"1\":{\"108\":1}}],[\"直接从缓存中拿数据\",{\"1\":{\"83\":1}}],[\"直接使用\",{\"1\":{\"66\":1}}],[\"直接进入\",{\"1\":{\"55\":1}}],[\"直接舍去\",{\"1\":{\"31\":1}}],[\"始终要运行\",{\"1\":{\"55\":1}}],[\"空指针异常\",{\"1\":{\"55\":1}}],[\"空位都以\",{\"1\":{\"14\":1}}],[\"五大运行异常\",{\"1\":{\"55\":1}}],[\"这三种注解都是用于校验字段值是否为空的注解\",{\"1\":{\"176\":1}}],[\"这些操作要么全部执行\",{\"1\":{\"151\":1}}],[\"这些类被视为自动检测的候选对象\",{\"1\":{\"144\":1}}],[\"这些异常发生时\",{\"1\":{\"55\":1}}],[\"这个bean在ioc容器中有多个实例\",{\"1\":{\"138\":1}}],[\"这个bean的对象始终为单实例\",{\"1\":{\"138\":1}}],[\"这样的参数永远不会为\",{\"1\":{\"166\":1}}],[\"这样\",{\"1\":{\"158\":1}}],[\"这样就增加了速度并提高了灵活性\",{\"1\":{\"90\":1}}],[\"这样实现对应\",{\"1\":{\"58\":1}}],[\"这是因为\",{\"1\":{\"72\":1}}],[\"这是我的随笔\",{\"1\":{\"1\":1}}],[\"程序无法处理的错误\",{\"1\":{\"55\":1}}],[\"程序本身可以处理的异常\",{\"1\":{\"55\":1}}],[\"异常处理handler方法和普通的handler方法参数接收和响应都一致\",{\"1\":{\"174\":1}}],[\"异常处理控制类\",{\"1\":{\"174\":1}}],[\"异常处理代码混杂在业务代码中\",{\"1\":{\"174\":1}}],[\"异常处理方式\",{\"1\":{\"55\":1}}],[\"异常通知\",{\"1\":{\"149\":1}}],[\"异常也可省\",{\"1\":{\"148\":1}}],[\"异常名\",{\"1\":{\"148\":1}}],[\"异常\",{\"0\":{\"55\":1}}],[\"抑制编译警告\",{\"1\":{\"54\":1}}],[\"注意\",{\"1\":{\"159\":2,\"166\":1}}],[\"注意事项\",{\"1\":{\"148\":1}}],[\"注解只能用于字符串类型的校验\",{\"1\":{\"176\":1}}],[\"注解同样是\",{\"1\":{\"176\":1}}],[\"注解是\",{\"1\":{\"176\":2}}],[\"注解合并为\",{\"1\":{\"170\":1}}],[\"注解来接收\",{\"1\":{\"163\":1}}],[\"注解来将\",{\"1\":{\"163\":1}}],[\"注解表示当前方法参数的值应该从请求体中获取\",{\"1\":{\"163\":1}}],[\"注解将\",{\"1\":{\"161\":1}}],[\"注解进行更精细的映射\",{\"1\":{\"158\":1}}],[\"注解也可以单独设置在控制器方法上\",{\"1\":{\"158\":1}}],[\"注解可以和\",{\"1\":{\"170\":1}}],[\"注解可以设置在控制器类上\",{\"1\":{\"158\":1}}],[\"注解可以用于类级别和方法级别\",{\"1\":{\"158\":1}}],[\"注解详解\",{\"0\":{\"145\":1}}],[\"注解开发适用于简单的sql编写\",{\"1\":{\"88\":1}}],[\"注解开发\",{\"0\":{\"88\":1}}],[\"注解\",{\"0\":{\"54\":1},\"1\":{\"144\":3,\"170\":2,\"176\":2}}],[\"注释将\",{\"1\":{\"164\":1}}],[\"注释内容\",{\"1\":{\"92\":1}}],[\"注释\",{\"0\":{\"13\":1},\"1\":{\"92\":1,\"99\":6}}],[\"9999\",{\"1\":{\"96\":2}}],[\"9\",{\"0\":{\"54\":1,\"86\":1,\"113\":1,\"166\":1},\"1\":{\"99\":1,\"156\":1,\"165\":1}}],[\"9e\",{\"1\":{\"15\":1}}],[\"因为他会加入json处理器\",{\"1\":{\"175\":1}}],[\"因为enum会隐式继承\",{\"1\":{\"53\":1}}],[\"因此\",{\"1\":{\"166\":1}}],[\"因此我们需要将其放在前面\",{\"1\":{\"72\":1}}],[\"因此两者不能共存在同一个构造器中\",{\"1\":{\"41\":1}}],[\"寒冷\",{\"1\":{\"53\":1}}],[\"冬天\",{\"1\":{\"53\":1}}],[\"writer\",{\"1\":{\"166\":1}}],[\"webmvcconfigurer\",{\"1\":{\"175\":1}}],[\"webmvc<\",{\"1\":{\"156\":1}}],[\"webmvc\",{\"1\":{\"155\":1,\"166\":1}}],[\"web\",{\"1\":{\"155\":2,\"166\":1,\"171\":1,\"176\":1}}],[\"weight\",{\"1\":{\"30\":1}}],[\"w3\",{\"1\":{\"134\":1,\"137\":3,\"143\":1}}],[\"www\",{\"1\":{\"134\":4,\"137\":22,\"143\":7}}],[\"worknumber\",{\"1\":{\"114\":2}}],[\"workaddress\",{\"1\":{\"106\":2}}],[\"with\",{\"1\":{\"111\":1}}],[\"windows版本\",{\"1\":{\"91\":1}}],[\"winter\",{\"1\":{\"53\":1}}],[\"when>\",{\"1\":{\"77\":2}}],[\"when\",{\"0\":{\"77\":1},\"1\":{\"117\":2}}],[\"where之后\",{\"1\":{\"126\":1}}],[\"where不能对聚合函数进行判断\",{\"1\":{\"106\":1}}],[\"where是分组之前过滤\",{\"1\":{\"106\":1}}],[\"where>聚合函数>having\",{\"1\":{\"106\":1}}],[\"where>\",{\"1\":{\"74\":1}}],[\"where标签\",{\"0\":{\"74\":1}}],[\"where\",{\"1\":{\"62\":1,\"63\":1,\"64\":1,\"67\":1,\"69\":1,\"70\":1,\"74\":1,\"75\":2,\"76\":1,\"77\":1,\"78\":1,\"81\":4,\"82\":3,\"88\":1,\"101\":4,\"104\":7,\"106\":2,\"109\":1,\"122\":2,\"124\":1,\"125\":4,\"126\":18}}],[\"凉爽\",{\"1\":{\"53\":1}}],[\"秋天\",{\"1\":{\"53\":1}}],[\"炎热\",{\"1\":{\"53\":1}}],[\"夏天\",{\"1\":{\"53\":1}}],[\"温暖\",{\"1\":{\"53\":1}}],[\"春天\",{\"1\":{\"53\":1}}],[\"枚举\",{\"0\":{\"53\":1}}],[\"他也是一种标准的http协议请求\",{\"1\":{\"172\":1}}],[\"他是controller类内部的方法简称\",{\"1\":{\"155\":1}}],[\"他是handler和dispatcherservlet之间的适配器\",{\"1\":{\"155\":1}}],[\"他的地位就是一个成员\",{\"1\":{\"52\":1}}],[\"他的地位只是一个局部变量\",{\"1\":{\"52\":1}}],[\"他们也不一定是相等的\",{\"1\":{\"45\":1}}],[\"底层会创建一个outer$1的对象实现ia接口\",{\"1\":{\"52\":1}}],[\"详解\",{\"1\":{\"52\":1}}],[\"匿名内部类重写test方法\",{\"1\":{\"52\":1}}],[\"匿名内部类使用一次之后就不能在使用了\",{\"1\":{\"52\":1}}],[\"匿名内部类实现test方法\",{\"1\":{\"52\":1}}],[\"匿名内部类\",{\"1\":{\"52\":3}}],[\"去创建代理对象\",{\"1\":{\"146\":1}}],[\"去掉all即可\",{\"1\":{\"125\":1}}],[\"去掉字符串头部和尾部的空格\",{\"1\":{\"114\":1}}],[\"去掉字符串前后空白符\",{\"1\":{\"28\":1}}],[\"去除重复\",{\"1\":{\"103\":1}}],[\"去除重复记录\",{\"1\":{\"103\":1}}],[\"去访问\",{\"1\":{\"52\":3}}],[\"使批注的方法参数为非必须\",{\"1\":{\"161\":1}}],[\"使它们不会相互影响\",{\"1\":{\"153\":1}}],[\"使其不能被继承\",{\"1\":{\"52\":1}}],[\"使用url+请求方式确定具体的动作\",{\"1\":{\"172\":1}}],[\"使用实体对象接收\",{\"1\":{\"161\":1}}],[\"使用此批注的方法参数是必需的\",{\"1\":{\"161\":1}}],[\"使用方式\",{\"1\":{\"153\":1}}],[\"使用事务\",{\"1\":{\"152\":1}}],[\"使用时只需将该注解标注在相应类上即可\",{\"1\":{\"144\":1}}],[\"使用classpathxmlapplicationcontext类\",{\"1\":{\"139\":1}}],[\"使用cdate区显示特殊符号\",{\"1\":{\"137\":1}}],[\"使用destroy\",{\"1\":{\"139\":1}}],[\"使用some的地方都可以使用any\",{\"1\":{\"126\":1}}],[\"使用sql标签抽取重复出现的sql片段\",{\"1\":{\"79\":1}}],[\"使用数据库默认的隔离级别\",{\"1\":{\"153\":1}}],[\"使用数据库\",{\"1\":{\"98\":1}}],[\"使用mybatis插件快速生成\",{\"1\":{\"86\":1}}],[\"使用二级缓存的实体类对象必须是可序列话的\",{\"1\":{\"85\":1}}],[\"使用到再加载\",{\"1\":{\"81\":1}}],[\"使用init\",{\"1\":{\"139\":1}}],[\"使用include标签引用声明的sql片段\",{\"1\":{\"79\":1}}],[\"使用id标签设置主键列和主键属性之间的对应关系\",{\"1\":{\"67\":1}}],[\"使用try\",{\"1\":{\"149\":1}}],[\"使用trim标签控制条件部分两端是否包含某些字符\",{\"1\":{\"76\":1}}],[\"使用throws\",{\"1\":{\"55\":1}}],[\"使用这种方式\",{\"1\":{\"72\":1}}],[\"使用生成的主键\",{\"1\":{\"72\":1}}],[\"使用result标签设置普通字段和java实体类属性之间的关系\",{\"1\":{\"67\":1}}],[\"使用resultmap标签定义对应关系\",{\"1\":{\"67\":1}}],[\"使用enum后不能继承其他类\",{\"1\":{\"53\":1}}],[\"使用后类消失但是类所创建的对象存在\",{\"1\":{\"52\":1}}],[\"使用类的静态成员时\",{\"1\":{\"48\":1}}],[\"使用可变参数时可以当做数组使用\",{\"1\":{\"36\":1}}],[\"使用无参构造器创建的对象可以获取本地当前时间\",{\"1\":{\"32\":1}}],[\"使用arrays\",{\"1\":{\"24\":1}}],[\"使用\",{\"1\":{\"13\":1,\"51\":2,\"58\":1,\"59\":1,\"64\":1,\"72\":2,\"76\":2,\"87\":2,\"145\":1,\"149\":5,\"152\":1,\"163\":1}}],[\"局部内部类的地位是局部变量\",{\"1\":{\"52\":1}}],[\"局部内部类只能是默认或者是final的\",{\"1\":{\"52\":1}}],[\"局部内部类本质仍是一个类\",{\"1\":{\"52\":1}}],[\"局部内部类\",{\"1\":{\"52\":2}}],[\"局部变量\",{\"1\":{\"36\":1}}],[\"必须添加\",{\"1\":{\"176\":1}}],[\"必须使用此注解\",{\"1\":{\"175\":1}}],[\"必须是所有的数据都保持一致状态\",{\"1\":{\"128\":1}}],[\"必须初始化\",{\"1\":{\"51\":1}}],[\"必须实现接口的抽象方法\",{\"1\":{\"51\":1}}],[\"必须赋值后才能使用\",{\"1\":{\"36\":1}}],[\"搭配修饰效率更高\",{\"1\":{\"49\":1}}],[\"该注解无效\",{\"1\":{\"176\":1}}],[\"该注解不能用于字符串类型的校验\",{\"1\":{\"176\":1}}],[\"该注解通常作用在控制层\",{\"1\":{\"144\":1}}],[\"该注解通常作用在业务层\",{\"1\":{\"144\":1}}],[\"该注解用于将数据访问层\",{\"1\":{\"144\":1}}],[\"该注解用于描述\",{\"1\":{\"144\":1}}],[\"该类的方法默认是\",{\"1\":{\"49\":1}}],[\"该方法不能被重写但可以被继承\",{\"1\":{\"49\":1}}],[\"该对象会和运行类型绑定\",{\"1\":{\"44\":1}}],[\"则是将异常处理的逻辑从具体的业务逻辑中分离出来\",{\"1\":{\"174\":1}}],[\"则会被编码为\",{\"1\":{\"160\":1}}],[\"则会影响类中所有的方法\",{\"1\":{\"152\":1}}],[\"则只会影响该方法\",{\"1\":{\"152\":1}}],[\"则只能在定义时和静态代码块中赋值\",{\"1\":{\"49\":1}}],[\"则不添加\",{\"1\":{\"74\":1}}],[\"则添加到\",{\"1\":{\"74\":1}}],[\"则别名为其注解值\",{\"1\":{\"67\":1}}],[\"则报编译错误\",{\"1\":{\"54\":1}}],[\"则属性必须初始化\",{\"1\":{\"51\":1}}],[\"则它必须实现抽象类的所有抽象方法\",{\"1\":{\"50\":1}}],[\"则此局部变量不能被修改\",{\"1\":{\"49\":1}}],[\"则此属性不可被修改\",{\"1\":{\"49\":1}}],[\"则此方法不可被重写\",{\"1\":{\"49\":1}}],[\"则此类不能被别的类所继承\",{\"1\":{\"49\":1}}],[\"三个下划线\",{\"1\":{\"104\":1}}],[\"三种赋值位置\",{\"1\":{\"49\":1}}],[\"三角函数\",{\"1\":{\"31\":1}}],[\"当被标注的字段值为\",{\"1\":{\"176\":1}}],[\"当发生空指针异常会触发此方法\",{\"1\":{\"174\":1}}],[\"当多个方法处理同一个路径的不同操作时\",{\"1\":{\"158\":1}}],[\"当不同的事务同时操纵相同的数据时\",{\"1\":{\"151\":1}}],[\"当使用基于注解的配置和类路径扫描时\",{\"1\":{\"144\":1}}],[\"当在父表中删除对应记录时\",{\"1\":{\"120\":1}}],[\"当在父表中删除\",{\"1\":{\"120\":3}}],[\"当然\",{\"1\":{\"72\":1}}],[\"当这样配置时\",{\"1\":{\"67\":1}}],[\"当\",{\"1\":{\"55\":1}}],[\"当出现异常时进行捕获\",{\"1\":{\"55\":1}}],[\"当有父类和子类时\",{\"1\":{\"48\":1}}],[\"当子类有和父类的属性和方法重名时\",{\"1\":{\"43\":1}}],[\"会认为校验失败而抛出异常\",{\"1\":{\"176\":1}}],[\"会把所有拦截器收集到一起\",{\"1\":{\"175\":3}}],[\"会触发handlernullexception方法\",{\"1\":{\"174\":1}}],[\"会出现405异常\",{\"1\":{\"159\":1}}],[\"会被回滚\",{\"1\":{\"151\":1}}],[\"会被设置\",{\"1\":{\"72\":1}}],[\"会被隐式调用\",{\"1\":{\"48\":1}}],[\"会使用\",{\"1\":{\"67\":1,\"146\":2}}],[\"会在包名下面搜索需要的\",{\"1\":{\"67\":1}}],[\"会跳出方法\",{\"1\":{\"21\":1}}],[\"随着类的加载而执行\",{\"1\":{\"48\":1}}],[\"静态内部类与成员内部类只有static的区别\",{\"1\":{\"52\":1}}],[\"静态内部类\",{\"1\":{\"52\":1}}],[\"静态方法\",{\"1\":{\"48\":1}}],[\"静态属性\",{\"1\":{\"48\":1}}],[\"静态代码块只能调用静态成员\",{\"1\":{\"48\":1}}],[\"静态代码块\",{\"1\":{\"48\":1}}],[\"静态初始化\",{\"1\":{\"23\":2}}],[\"围起来\",{\"1\":{\"48\":1}}],[\"属于oracle旗下产品\",{\"1\":{\"90\":1}}],[\"属于类的中成员\",{\"1\":{\"48\":1}}],[\"属性上标注类似于\",{\"1\":{\"176\":1}}],[\"属性是必须的\",{\"1\":{\"74\":1}}],[\"属性来指示请求体应该映射到哪个参数上\",{\"1\":{\"163\":1}}],[\"属性来指定查询到的\",{\"1\":{\"72\":1}}],[\"属性来插入主键值\",{\"1\":{\"72\":1}}],[\"属性指定了\",{\"1\":{\"72\":1}}],[\"属性\",{\"1\":{\"43\":1,\"52\":1,\"53\":1,\"72\":1,\"152\":1}}],[\"属性私有化并提供getter和setter\",{\"1\":{\"40\":1}}],[\"代表应用校验注解\",{\"1\":{\"176\":1}}],[\"代表当前类的异常处理controller\",{\"1\":{\"174\":1}}],[\"代表默认类中的所有方法都生效\",{\"1\":{\"170\":1}}],[\"代表正常退出\",{\"1\":{\"30\":1}}],[\"代码以及设置参数和获取结果集的工作\",{\"1\":{\"57\":1}}],[\"代码块中\",{\"1\":{\"52\":2}}],[\"代码块中赋值\",{\"1\":{\"49\":1}}],[\"代码块不用通过对象或类的显式调用\",{\"1\":{\"48\":1}}],[\"代码块又称初始化块\",{\"1\":{\"48\":1}}],[\"代码块\",{\"0\":{\"48\":1}}],[\"普通的handler方法要使用\",{\"1\":{\"174\":1}}],[\"普通老式\",{\"1\":{\"57\":1}}],[\"普通代码块可以调用任意成员\",{\"1\":{\"48\":1}}],[\"普通代码块不会被执行\",{\"1\":{\"48\":1}}],[\"普通代码块\",{\"1\":{\"48\":2}}],[\"普通成员方法可以访问静态和非静态的变量和方法\",{\"1\":{\"47\":1}}],[\"普通for循环\",{\"1\":{\"24\":1}}],[\"均作用在这个变量上\",{\"1\":{\"47\":1}}],[\"均匀分布的\",{\"1\":{\"31\":2}}],[\"任何java应用都可以从spring中受益\",{\"1\":{\"133\":1}}],[\"任何一个该类的对象对其访问或修改\",{\"1\":{\"47\":1}}],[\"任意一个\",{\"1\":{\"126\":1}}],[\"任意成立\",{\"1\":{\"104\":1}}],[\"任一子类构造器都会先调用父类的无参构造器\",{\"1\":{\"41\":1}}],[\"哈希碰撞\",{\"1\":{\"45\":1}}],[\"哈哈哈\",{\"0\":{\"5\":1,\"7\":1}}],[\"时\",{\"1\":{\"176\":1}}],[\"时创建对象\",{\"1\":{\"138\":1}}],[\"时没有重写\",{\"1\":{\"45\":1}}],[\"时必须重写\",{\"1\":{\"45\":1}}],[\"时间值\",{\"1\":{\"116\":1}}],[\"时间值或持续时间\",{\"1\":{\"96\":1}}],[\"时间\",{\"1\":{\"32\":2}}],[\"判断是否有信息绑定错误\",{\"1\":{\"176\":1}}],[\"判断是否闰年\",{\"1\":{\"32\":1}}],[\"判断地址是否相等\",{\"1\":{\"45\":1}}],[\"判断引用类型\",{\"1\":{\"45\":1}}],[\"判断值是否相等\",{\"1\":{\"45\":1}}],[\"判断基本类型\",{\"1\":{\"45\":1}}],[\"判断对象的类型是否是xx类型或xx的子类型\",{\"1\":{\"44\":1}}],[\"哪里声明哪里使用\",{\"1\":{\"44\":1}}],[\"动态sql\",{\"0\":{\"73\":1}}],[\"动态绑定机制\",{\"1\":{\"44\":1}}],[\"动态初始化3\",{\"1\":{\"23\":1}}],[\"动态初始化2\",{\"1\":{\"23\":2}}],[\"动态初始化1\",{\"1\":{\"23\":2}}],[\"且必须是将来的日期\",{\"1\":{\"176\":1}}],[\"且必须是过去的日期\",{\"1\":{\"176\":1}}],[\"且必须在可接受的范围内\",{\"1\":{\"176\":1}}],[\"且唯一\",{\"1\":{\"119\":1}}],[\"且自动增长\",{\"1\":{\"119\":1}}],[\"且运算\",{\"1\":{\"104\":1}}],[\"且可以访问实体类的属性\",{\"1\":{\"74\":1}}],[\"且之后不能修改\",{\"1\":{\"49\":1}}],[\"且只会执行一次\",{\"1\":{\"48\":1}}],[\"且父类引用必须指向当前目标对象的类型\",{\"1\":{\"44\":1}}],[\"且两边都会执行\",{\"1\":{\"14\":1}}],[\"左表+交集\",{\"1\":{\"123\":1}}],[\"左外连接\",{\"1\":{\"123\":2}}],[\"左填充\",{\"1\":{\"114\":1}}],[\"左边的是编译类型\",{\"1\":{\"44\":1}}],[\"左移运算符\",{\"1\":{\"14\":1}}],[\"多条件模糊查询用户功能\",{\"1\":{\"173\":1}}],[\"多选框\",{\"1\":{\"161\":1}}],[\"多选一\",{\"1\":{\"104\":1,\"126\":1}}],[\"多个拦截器执行顺序\",{\"1\":{\"175\":1}}],[\"多个连续的任意符号\",{\"1\":{\"148\":1}}],[\"多个简单类型参数\",{\"0\":{\"63\":1},\"1\":{\"63\":1}}],[\"多用于单表拆分\",{\"1\":{\"121\":1}}],[\"多对多\",{\"1\":{\"121\":1}}],[\"多对一\",{\"0\":{\"81\":1},\"1\":{\"121\":1}}],[\"多表查询\",{\"0\":{\"121\":1}}],[\"多表映射\",{\"0\":{\"80\":1}}],[\"多态\",{\"0\":{\"44\":1}}],[\"多行注释\",{\"1\":{\"13\":1,\"92\":1}}],[\"被dispatcherservlet调用\",{\"1\":{\"155\":1}}],[\"被采纳分支后面的分支都将不被考虑\",{\"1\":{\"77\":1}}],[\"被调用\",{\"1\":{\"42\":2}}],[\"被复制的数组开始复制的位置\",{\"1\":{\"30\":1}}],[\"参数校验\",{\"0\":{\"176\":1}}],[\"参数值将转换为声明的方法参数类型\",{\"1\":{\"166\":1}}],[\"参数顺序\",{\"1\":{\"160\":1}}],[\"参数编码\",{\"1\":{\"160\":1}}],[\"参数\",{\"1\":{\"148\":1}}],[\"参数一样\",{\"1\":{\"42\":1}}],[\"参数个数可以是0到多个参数\",{\"1\":{\"36\":1}}],[\"而在\",{\"1\":{\"160\":1}}],[\"而对于没有实现接口的对象\",{\"1\":{\"146\":1}}],[\"而不是由视图解析器来解析并渲染生成响应体\",{\"1\":{\"170\":1}}],[\"而不是将所有数据放在一个大仓库内\",{\"1\":{\"90\":1}}],[\"而不是以mapper接口方法返回值的形式返回\",{\"1\":{\"72\":1}}],[\"而\",{\"1\":{\"72\":2,\"160\":3}}],[\"而jdbc对于表名部分是不能使用问号占位符的\",{\"1\":{\"61\":1}}],[\"而是加载类的时候隐式调用\",{\"1\":{\"48\":1}}],[\"而是一直追溯到最高父类即object类\",{\"1\":{\"41\":1}}],[\"而基本类型有默认值且不是\",{\"1\":{\"27\":1}}],[\"而基本类型不可以\",{\"1\":{\"27\":1}}],[\"要求transaction01只能读取transaction02已提交的修改\",{\"1\":{\"153\":1}}],[\"要求非空且唯一\",{\"1\":{\"119\":1}}],[\"要么是另一事务修改它之后的状态\",{\"1\":{\"151\":1}}],[\"要么全部不完成\",{\"1\":{\"151\":1}}],[\"要么全部不执行\",{\"1\":{\"151\":1}}],[\"要么全部完成\",{\"1\":{\"151\":1}}],[\"要么全部失败\",{\"1\":{\"128\":1}}],[\"要么全部成功\",{\"1\":{\"128\":1}}],[\"要删除某字段的值用update\",{\"1\":{\"101\":1}}],[\"要遍历的集合\",{\"1\":{\"78\":1}}],[\"要通过父类公共方法访问\",{\"1\":{\"41\":1}}],[\"要保证可变参数放在最后\",{\"1\":{\"36\":1}}],[\"单个独立的任意符号\",{\"1\":{\"148\":1}}],[\"单个简单类型\",{\"0\":{\"68\":1}}],[\"单个简单类型参数\",{\"0\":{\"62\":1},\"1\":{\"62\":1}}],[\"单例\",{\"1\":{\"145\":1}}],[\"单精度浮点值\",{\"1\":{\"94\":1}}],[\"单继承机制\",{\"1\":{\"41\":1}}],[\"单行注释\",{\"1\":{\"13\":1,\"92\":1}}],[\"继承person类\",{\"1\":{\"41\":1}}],[\"继承\",{\"0\":{\"41\":1}}],[\"继续执行下一次循环\",{\"1\":{\"20\":1}}],[\"封装成exception对象e传递给catch\",{\"1\":{\"55\":1}}],[\"封装\",{\"0\":{\"40\":1}}],[\"调用业务方法\",{\"1\":{\"168\":1}}],[\"调用close方法关闭容器\",{\"1\":{\"139\":1}}],[\"调用无参构造器\",{\"1\":{\"139\":1}}],[\"调用say方法\",{\"1\":{\"52\":2}}],[\"调用scanner的方法\",{\"1\":{\"30\":1}}],[\"调用顺序\",{\"1\":{\"48\":1}}],[\"调用构造方法\",{\"1\":{\"48\":1}}],[\"调用普通代码块和普通属性初始化\",{\"1\":{\"48\":1}}],[\"调用静态代码块和静态属性初始化\",{\"1\":{\"48\":1}}],[\"调用\",{\"1\":{\"47\":1}}],[\"调用对象方法\",{\"1\":{\"134\":1}}],[\"调用对象方法的时\",{\"1\":{\"44\":1}}],[\"调用对象属性时\",{\"1\":{\"44\":1}}],[\"调用f1的第二种方法\",{\"1\":{\"38\":1}}],[\"调用f1的第一种方法\",{\"1\":{\"38\":1}}],[\"系统返回到原始状态\",{\"1\":{\"151\":1}}],[\"系统处于有效状态\",{\"1\":{\"151\":1}}],[\"系统默认的构造方法会被覆盖\",{\"1\":{\"37\":1}}],[\"系统会自动生成一个无参默认构造方法\",{\"1\":{\"37\":1}}],[\"系统会自动调用该类的构造方法\",{\"1\":{\"37\":1}}],[\"如数组\",{\"1\":{\"160\":1}}],[\"如\",{\"1\":{\"160\":1,\"174\":1}}],[\"如springmvc\",{\"1\":{\"144\":1}}],[\"如使用java代码生成uuid并在类中显式设置值等\",{\"1\":{\"72\":1}}],[\"如方法中\",{\"1\":{\"52\":2}}],[\"如果该字符串中间只有空格\",{\"1\":{\"176\":1}}],[\"如果类中每个方法上都标记了\",{\"1\":{\"170\":1}}],[\"如果想要获取请求或者响应对象\",{\"1\":{\"166\":1}}],[\"如果想访问外部类的成员则可以使用\",{\"1\":{\"52\":2}}],[\"如果控制器中的多个方法都需要映射同一请求路径\",{\"1\":{\"158\":1}}],[\"如果在事务中出现错误\",{\"1\":{\"151\":1}}],[\"如果事务成功地完成\",{\"1\":{\"151\":1}}],[\"如果要代理的对象\",{\"1\":{\"146\":1}}],[\"如果是的话就会校验失败\",{\"1\":{\"176\":2}}],[\"如果是项目下的资源\",{\"1\":{\"169\":1}}],[\"如果是在webapplicationcontext环境下还会有另外几个作用域\",{\"1\":{\"138\":1}}],[\"如果是返回集合类型\",{\"1\":{\"67\":1}}],[\"如果一个接口只有一个实现类对象可以通过接口获得对象实例\",{\"1\":{\"136\":1}}],[\"如果一个类继承了抽象类\",{\"1\":{\"50\":1}}],[\"如果给表起了别名就不能通过表名\",{\"1\":{\"122\":1}}],[\"如果未指定该字段的值则采用默认值\",{\"1\":{\"119\":1}}],[\"如果expr的值等于val1\",{\"1\":{\"117\":1}}],[\"如果val1为true\",{\"1\":{\"117\":1}}],[\"如果value不为空则返回value1\",{\"1\":{\"117\":1}}],[\"如果value为true则返回t\",{\"1\":{\"117\":1}}],[\"如果查询的是第一页数据\",{\"1\":{\"108\":1}}],[\"如果下一次还执行相同的语句\",{\"1\":{\"83\":1}}],[\"如果所有的when分支都不满足\",{\"1\":{\"77\":1}}],[\"如果异常没有发生则顺序执行\",{\"1\":{\"55\":1}}],[\"如果异常发生了则异常后面的代码不会执行\",{\"1\":{\"55\":1}}],[\"如果外部类和局部内部类的成员重名\",{\"1\":{\"52\":2}}],[\"如果不是\",{\"1\":{\"49\":1,\"54\":1}}],[\"如果\",{\"1\":{\"49\":1,\"55\":1}}],[\"如果重写\",{\"1\":{\"45\":1}}],[\"如果没有定义构造方法\",{\"1\":{\"37\":1}}],[\"如字符转int\",{\"1\":{\"17\":1}}],[\"遵循就近原则\",{\"1\":{\"36\":1}}],[\"成员内部类可以访问外部类的成员包含私有的\",{\"1\":{\"52\":1}}],[\"成员内部类\",{\"1\":{\"52\":3}}],[\"成员\",{\"1\":{\"52\":3}}],[\"成员方法内\",{\"1\":{\"36\":1}}],[\"成员变量包装类型不赋值就是\",{\"1\":{\"27\":1}}],[\"本类使用\",{\"1\":{\"36\":1}}],[\"本地日期时间类\",{\"1\":{\"32\":1}}],[\"整个类体\",{\"1\":{\"36\":1}}],[\"整数相除只保留整数部分\",{\"1\":{\"31\":1}}],[\"整数默认类型是\",{\"1\":{\"15\":1}}],[\"全局异常处理\",{\"0\":{\"174\":1}}],[\"全局配置文件中\",{\"1\":{\"70\":1}}],[\"全局变量\",{\"1\":{\"36\":1}}],[\"全限定符\",{\"1\":{\"67\":1}}],[\"全部使用\",{\"1\":{\"27\":1}}],[\"有可以自行处理\",{\"1\":{\"176\":1}}],[\"有\",{\"1\":{\"153\":6}}],[\"有多个参数需要传递\",{\"1\":{\"64\":1}}],[\"有类名\",{\"1\":{\"52\":2}}],[\"有参构造\",{\"1\":{\"37\":1}}],[\"有默认值\",{\"1\":{\"36\":1}}],[\"有无初值\",{\"1\":{\"36\":1}}],[\"有任意一个满足即可\",{\"1\":{\"14\":2}}],[\"即可自动接收\",{\"1\":{\"161\":2}}],[\"即可以抛出多个异常\",{\"1\":{\"55\":1}}],[\"即可以传入数组\",{\"1\":{\"36\":1}}],[\"即transaction01执行期间禁止其它事务对这个字段进行更新\",{\"1\":{\"153\":1}}],[\"即使发生系统崩溃\",{\"1\":{\"151\":1}}],[\"即实现serializable接口\",{\"1\":{\"85\":1}}],[\"即不可以new一个对象\",{\"1\":{\"50\":1}}],[\"即如果\",{\"1\":{\"45\":1}}],[\"即是否是同一个对象\",{\"1\":{\"45\":1}}],[\"即从运行类型出发\",{\"1\":{\"44\":1}}],[\"即子类覆盖父类方法\",{\"1\":{\"42\":1}}],[\"即哪个对象被调用\",{\"1\":{\"38\":1}}],[\"即构造器重载\",{\"1\":{\"37\":1}}],[\"即重新定义一个无参构造方法\",{\"1\":{\"37\":1}}],[\"即numbers可以当做数组\",{\"1\":{\"36\":1}}],[\"即for\",{\"1\":{\"18\":1}}],[\"类上的\",{\"1\":{\"170\":1}}],[\"类上使用\",{\"1\":{\"170\":1}}],[\"类和方法级别区别\",{\"1\":{\"158\":1}}],[\"类名书写名称与模块相关的采用\",{\"1\":{\"148\":1}}],[\"类名\",{\"1\":{\"148\":1}}],[\"类型的参数传递\",{\"1\":{\"160\":1}}],[\"类型的参数\",{\"1\":{\"160\":1}}],[\"类型的参数则更适用于更复杂的数据结构传递\",{\"1\":{\"160\":1}}],[\"类型的参数则支持更复杂的数据类型\",{\"1\":{\"160\":1}}],[\"类型的参数适用于单一的数据传递\",{\"1\":{\"160\":1}}],[\"类型的参数更加简单\",{\"1\":{\"160\":1}}],[\"类型的参数格式比\",{\"1\":{\"160\":1}}],[\"类型的参数支持嵌套\",{\"1\":{\"160\":1}}],[\"类型的参数不支持嵌套\",{\"1\":{\"160\":1}}],[\"类型的参数仅支持字符串类型\",{\"1\":{\"160\":1}}],[\"类型的参数是有序的\",{\"1\":{\"160\":1}}],[\"类型的参数没有顺序限制\",{\"1\":{\"160\":1}}],[\"类型的参数会被编码为\",{\"1\":{\"160\":2}}],[\"类型和\",{\"1\":{\"160\":1}}],[\"类型\",{\"1\":{\"99\":4,\"160\":1}}],[\"类型为例\",{\"1\":{\"68\":1}}],[\"类型设置一个缩写名字\",{\"1\":{\"67\":1}}],[\"类型别名可为\",{\"1\":{\"67\":1}}],[\"类型接收即可\",{\"1\":{\"66\":1}}],[\"类型是int\",{\"1\":{\"36\":1}}],[\"类有两个重要的子类\",{\"1\":{\"55\":1}}],[\"类\",{\"1\":{\"55\":1,\"163\":1}}],[\"类加载的时机\",{\"1\":{\"48\":1}}],[\"类似于方法\",{\"1\":{\"48\":1}}],[\"类方法中只能访问静态变量或静态方法\",{\"1\":{\"47\":1}}],[\"类方法中无this和super参数\",{\"1\":{\"47\":1}}],[\"类变量名\",{\"1\":{\"47\":1}}],[\"类库\",{\"1\":{\"10\":1}}],[\"可扩展\",{\"1\":{\"171\":1}}],[\"可读性\",{\"1\":{\"160\":1}}],[\"可重复读\",{\"1\":{\"153\":2}}],[\"可测试性和松耦合的角度而言\",{\"1\":{\"133\":1}}],[\"可省\",{\"1\":{\"103\":1}}],[\"可省略\",{\"1\":{\"62\":1,\"64\":1,\"107\":1}}],[\"可配置多个插件\",{\"1\":{\"86\":1}}],[\"可复用\",{\"1\":{\"81\":1,\"82\":1}}],[\"可能会出现异常\",{\"1\":{\"55\":1}}],[\"可加\",{\"1\":{\"36\":1}}],[\"可变参数和普通参数一起放在形参列表里\",{\"1\":{\"36\":1}}],[\"可变参数的实参可以是数组\",{\"1\":{\"36\":1}}],[\"可变参数\",{\"1\":{\"36\":1}}],[\"可以对结果处理\",{\"1\":{\"175\":1}}],[\"可以进行编码格式设置\",{\"1\":{\"175\":1}}],[\"可以构建出易于理解\",{\"1\":{\"171\":1}}],[\"可以传递更为复杂的数据结构\",{\"1\":{\"160\":1}}],[\"可以避免任何并发问题\",{\"1\":{\"153\":1}}],[\"可以独立出现\",{\"1\":{\"148\":2}}],[\"可以是多列\",{\"1\":{\"126\":1}}],[\"可以是多行\",{\"1\":{\"126\":1}}],[\"可以提高性能\",{\"1\":{\"81\":1}}],[\"可以动态去掉两端多余的逗号\",{\"1\":{\"75\":1}}],[\"可以写的名称有\",{\"1\":{\"68\":1}}],[\"可以用在任何使用\",{\"1\":{\"67\":1}}],[\"可以使用集合接收即可\",{\"1\":{\"161\":1}}],[\"可以使用\",{\"1\":{\"161\":1,\"164\":1,\"165\":1,\"169\":1}}],[\"可以使用方法级别的\",{\"1\":{\"158\":1}}],[\"可以使用sqlsession\",{\"1\":{\"84\":1}}],[\"可以使用parametertype=\",{\"1\":{\"62\":1,\"64\":1}}],[\"可以使用多个\",{\"1\":{\"55\":1}}],[\"可以防止sql注入\",{\"1\":{\"61\":1}}],[\"可以通过简单的\",{\"1\":{\"57\":1}}],[\"可以通过\",{\"1\":{\"55\":1,\"161\":1}}],[\"可以通过标签跳过哪一层循环\",{\"1\":{\"20\":1}}],[\"可以通过标签来指明终止哪一层语句块\",{\"1\":{\"19\":1}}],[\"可以保留get方法\",{\"1\":{\"53\":1}}],[\"可以添加任意的访问修饰符\",{\"1\":{\"52\":1}}],[\"可以访问此handler\",{\"1\":{\"158\":2}}],[\"可以访问私有属性\",{\"1\":{\"52\":2}}],[\"可以访问外部类的所有成员包括私有的\",{\"1\":{\"52\":1}}],[\"可以直接在形参列表传入\",{\"1\":{\"166\":1}}],[\"可以直接访问外部类的所有成员\",{\"1\":{\"52\":1}}],[\"可以直接访问外部类的所有成员包括私有的\",{\"1\":{\"52\":1}}],[\"可以直接访问外部类的成员\",{\"1\":{\"52\":1}}],[\"可以直接追溯到顶级父类\",{\"1\":{\"43\":1}}],[\"可以不实现接口方法\",{\"1\":{\"51\":1}}],[\"可以调用子类的所有成员\",{\"1\":{\"44\":1}}],[\"可以调用父类的所有成员\",{\"1\":{\"44\":1}}],[\"可以标记起始位置和长度\",{\"1\":{\"28\":1}}],[\"私有属性和方法不能在子类直接访问\",{\"1\":{\"41\":1}}],[\"私有\",{\"1\":{\"35\":1}}],[\"无法添加到类上\",{\"1\":{\"159\":1}}],[\"无需set方法\",{\"1\":{\"145\":1}}],[\"无符号范围\",{\"1\":{\"94\":1}}],[\"无符号右移\",{\"1\":{\"14\":1}}],[\"无论有没有异常finally\",{\"1\":{\"55\":1}}],[\"无类名\",{\"1\":{\"52\":1}}],[\"无参构造\",{\"1\":{\"37\":1}}],[\"无初值\",{\"1\":{\"36\":1}}],[\"无\",{\"1\":{\"35\":1,\"153\":6}}],[\"默认拦截全部\",{\"1\":{\"175\":1}}],[\"默认拦截所有springmvc分发的请求\",{\"1\":{\"175\":2}}],[\"默认1\",{\"1\":{\"173\":2}}],[\"默认情况下\",{\"1\":{\"161\":1}}],[\"默认根据name装配\",{\"1\":{\"144\":1}}],[\"默认根据type装配\",{\"1\":{\"144\":1}}],[\"默认约束\",{\"1\":{\"119\":1}}],[\"默认遵循就近原则\",{\"1\":{\"52\":3}}],[\"默认判断地址是否相等\",{\"1\":{\"45\":1}}],[\"默认\",{\"1\":{\"35\":1,\"131\":1,\"138\":1,\"153\":2,\"173\":2}}],[\"默认值\",{\"1\":{\"15\":1,\"27\":1,\"138\":1}}],[\"×\",{\"1\":{\"35\":6,\"131\":6,\"153\":2}}],[\"受保护\",{\"1\":{\"35\":1}}],[\"√\",{\"1\":{\"35\":10,\"131\":6,\"148\":6,\"153\":6}}],[\"公开的原始响应正文\",{\"1\":{\"166\":1}}],[\"公开的原始请求正文\",{\"1\":{\"166\":1}}],[\"公开\",{\"1\":{\"35\":1}}],[\"同上格式为字符串\",{\"1\":{\"152\":2}}],[\"同时也应该是可被理解和解释的\",{\"1\":{\"172\":1}}],[\"同时提高了开发的效率\",{\"1\":{\"146\":1}}],[\"同时成立\",{\"1\":{\"104\":1}}],[\"同一个作用域中的变量不能重名\",{\"1\":{\"36\":1}}],[\"同包\",{\"1\":{\"35\":1}}],[\"同类\",{\"1\":{\"35\":1}}],[\"访问外部类的成员则可以使用\",{\"1\":{\"52\":1}}],[\"访问通过类名\",{\"1\":{\"47\":1}}],[\"访问时使用类名\",{\"1\":{\"47\":1}}],[\"访问父类需要用super\",{\"1\":{\"43\":1}}],[\"访问父类的属性和方法\",{\"1\":{\"43\":1}}],[\"访问父类属性和方法用\",{\"1\":{\"43\":1}}],[\"访问控制修饰符\",{\"1\":{\"35\":1}}],[\"访问级别\",{\"1\":{\"35\":1}}],[\"访问修饰符public可省\",{\"1\":{\"148\":1}}],[\"访问修饰符\",{\"0\":{\"35\":1},\"1\":{\"36\":1,\"148\":1}}],[\"计算两个时间间隔\",{\"1\":{\"32\":1}}],[\"计算两个日期间隔\",{\"1\":{\"32\":1}}],[\"或精准匹配\",{\"1\":{\"148\":1}}],[\"或使用配置类开启组件扫描\",{\"1\":{\"143\":1}}],[\"或者只包含空格\",{\"1\":{\"176\":1}}],[\"或者数组对象类型的属性进行校验\",{\"1\":{\"176\":1}}],[\"或者在\",{\"1\":{\"174\":1}}],[\"或者一个\",{\"1\":{\"172\":1}}],[\"或者会话等\",{\"1\":{\"166\":1}}],[\"或者不加括号\",{\"1\":{\"143\":1}}],[\"或者\",{\"1\":{\"120\":1,\"141\":1,\"169\":1,\"176\":1}}],[\"或运算\",{\"1\":{\"104\":1}}],[\"或是将数据库表中⼀⾏记录映射成⼀个\",{\"1\":{\"57\":1}}],[\"或是可以自动转化为可比较的类型\",{\"1\":{\"17\":1}}],[\"或注解来配置和映射原始类型\",{\"1\":{\"57\":1}}],[\"或通过对象调用在其他类使用\",{\"1\":{\"36\":1}}],[\"或\",{\"1\":{\"32\":1,\"66\":1,\"92\":1,\"104\":4,\"129\":1,\"170\":1,\"174\":1,\"176\":2}}],[\"获得月份\",{\"1\":{\"32\":1}}],[\"获得月份的天数\",{\"1\":{\"32\":1}}],[\"获取原生对象示例\",{\"1\":{\"166\":1}}],[\"获取返回值\",{\"1\":{\"149\":1}}],[\"获取参数使用joinpoint的getargs\",{\"1\":{\"149\":1}}],[\"获取参数\",{\"1\":{\"149\":1}}],[\"获取执行操作名\",{\"1\":{\"149\":1}}],[\"获取执行类型\",{\"1\":{\"149\":1}}],[\"获取执行签名信息\",{\"1\":{\"149\":1}}],[\"获取ioc容器\",{\"1\":{\"140\":1}}],[\"获取bean时\",{\"1\":{\"138\":1}}],[\"获取bean\",{\"1\":{\"136\":1}}],[\"获取bean对象\",{\"1\":{\"134\":1}}],[\"获取指定date的日期\",{\"1\":{\"116\":1}}],[\"获取指定date的月份\",{\"1\":{\"116\":1}}],[\"获取指定date的年份\",{\"1\":{\"116\":1}}],[\"获取员工数量大于等于3的工作地址\",{\"1\":{\"106\":1}}],[\"获取分⻚信息对象\",{\"1\":{\"87\":1}}],[\"获取usermapper接口的代理对象\",{\"1\":{\"58\":1}}],[\"获取sqlsession对象\",{\"1\":{\"58\":1}}],[\"获取sqlsessionfactory\",{\"1\":{\"58\":1}}],[\"获取当前时间并格式化\",{\"1\":{\"32\":1}}],[\"获取当前系统时间\",{\"1\":{\"32\":1}}],[\"获取不同类型的变量\",{\"1\":{\"30\":1}}],[\"根据用户id删除用户数据功能\",{\"1\":{\"173\":1}}],[\"根据用户id更新用户数据功能\",{\"1\":{\"173\":1}}],[\"根据用户id查询用户详情功能\",{\"1\":{\"173\":1}}],[\"根据具体的业务需求\",{\"1\":{\"160\":1}}],[\"根据id和类型获取\",{\"1\":{\"136\":1}}],[\"根据id获取\",{\"1\":{\"136\":1}}],[\"根据类型获取bean的时候\",{\"1\":{\"136\":1}}],[\"根据类型获取\",{\"1\":{\"136\":1}}],[\"根据年龄对员工进行升序排序\",{\"1\":{\"107\":2}}],[\"根据性别分组\",{\"1\":{\"106\":1}}],[\"根据学生id查询相关信息包括个人信息和班级信息\",{\"1\":{\"81\":1,\"82\":1}}],[\"根据当前时间创建对象\",{\"1\":{\"32\":1}}],[\"根据字符串构建bigdecimal对象\",{\"1\":{\"31\":1}}],[\"根据字符串构建biginteger对象\",{\"1\":{\"31\":1}}],[\"周日\",{\"1\":{\"32\":1}}],[\"zone\",{\"1\":{\"32\":1}}],[\"zoneid\",{\"1\":{\"32\":1}}],[\"z\",{\"1\":{\"32\":1}}],[\"以分号结尾\",{\"1\":{\"92\":1}}],[\"以\",{\"1\":{\"68\":1}}],[\"以来此\",{\"1\":{\"32\":1}}],[\"以补码的形式运算\",{\"1\":{\"14\":1}}],[\"globalexceptionhandler\",{\"1\":{\"174\":1}}],[\"gzip\",{\"1\":{\"165\":1}}],[\"gb\",{\"1\":{\"165\":1}}],[\"grant\",{\"1\":{\"112\":1}}],[\"grants\",{\"1\":{\"112\":1}}],[\"group\",{\"1\":{\"106\":3,\"109\":1}}],[\"groupid>\",{\"1\":{\"58\":2,\"86\":2,\"87\":1,\"134\":1,\"137\":2,\"147\":2,\"156\":4,\"176\":3}}],[\"github\",{\"1\":{\"87\":2}}],[\"gt\",{\"1\":{\"74\":1,\"76\":1,\"137\":1}}],[\"gmt\",{\"1\":{\"32\":1}}],[\"generate生成对应的实体类\",{\"1\":{\"86\":1}}],[\"generatorconfiguration>\",{\"1\":{\"86\":1}}],[\"generatorconfiguration\",{\"1\":{\"86\":1}}],[\"generator\",{\"1\":{\"86\":5}}],[\"generator<\",{\"1\":{\"86\":1}}],[\"gender=\",{\"1\":{\"76\":1}}],[\"gender\",{\"1\":{\"30\":1,\"76\":1,\"79\":1,\"106\":2,\"119\":1,\"163\":2}}],[\"getfielderror\",{\"1\":{\"176\":1}}],[\"getid\",{\"1\":{\"173\":1}}],[\"getuser\",{\"1\":{\"162\":1}}],[\"get\",{\"1\":{\"159\":1,\"160\":1,\"172\":2,\"173\":3}}],[\"getservletmappings\",{\"1\":{\"156\":1}}],[\"getservletconfigclasses\",{\"1\":{\"156\":1}}],[\"getsignature\",{\"1\":{\"149\":1}}],[\"getrootconfigclasses\",{\"1\":{\"156\":1}}],[\"getresourceasreader\",{\"1\":{\"59\":1}}],[\"getresourceasstream\",{\"1\":{\"58\":1}}],[\"getargs\",{\"1\":{\"149\":2}}],[\"getage\",{\"1\":{\"40\":1,\"173\":1}}],[\"getby\",{\"1\":{\"148\":1}}],[\"getbean\",{\"1\":{\"134\":1,\"136\":4,\"137\":3,\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"143\":1,\"145\":1}}],[\"getobjecttype\",{\"1\":{\"140\":1}}],[\"getobject\",{\"1\":{\"140\":1}}],[\"getconnection\",{\"1\":{\"59\":1,\"137\":1}}],[\"getmethod\",{\"1\":{\"166\":1}}],[\"getmapping\",{\"1\":{\"159\":1,\"161\":4,\"162\":1,\"164\":1,\"165\":1,\"166\":1,\"168\":1,\"170\":1,\"173\":2}}],[\"getmapper\",{\"1\":{\"58\":1,\"71\":1}}],[\"getmonth\",{\"1\":{\"32\":1}}],[\"getdeclaringtype\",{\"1\":{\"149\":1}}],[\"getdesc\",{\"1\":{\"53\":1}}],[\"getdayofmonth\",{\"1\":{\"32\":1}}],[\"getname\",{\"1\":{\"40\":1,\"53\":1,\"149\":1,\"173\":1}}],[\"getter\",{\"1\":{\"163\":1}}],[\"getter和setter\",{\"1\":{\"40\":1}}],[\"gettime\",{\"1\":{\"32\":1}}],[\"日志管理\",{\"1\":{\"146\":1}}],[\"日期函数\",{\"0\":{\"116\":1}}],[\"日期值\",{\"1\":{\"96\":1}}],[\"日期格式化\",{\"1\":{\"32\":1}}],[\"日期类型\",{\"0\":{\"96\":1},\"1\":{\"96\":1}}],[\"日期类\",{\"0\":{\"32\":1}}],[\"日\",{\"1\":{\"32\":1}}],[\"月\",{\"1\":{\"32\":1}}],[\"年龄相同的按照生日进行降序排序\",{\"1\":{\"107\":1}}],[\"年龄\",{\"1\":{\"99\":1,\"119\":1}}],[\"年份值\",{\"1\":{\"96\":1}}],[\"年\",{\"1\":{\"32\":1}}],[\"把该毫秒值换算成日期时间对象\",{\"1\":{\"32\":1}}],[\"毫秒数\",{\"1\":{\"32\":1}}],[\"值将转换为声明的方法参数类型\",{\"1\":{\"166\":1}}],[\"值注入\",{\"1\":{\"144\":1}}],[\"值2\",{\"1\":{\"101\":8}}],[\"值1\",{\"1\":{\"101\":8}}],[\"值却不相等\",{\"1\":{\"45\":1}}],[\"值也要相等\",{\"1\":{\"45\":2}}],[\"值必须相等\",{\"1\":{\"45\":1}}],[\"值\",{\"1\":{\"31\":5,\"45\":1,\"164\":1}}],[\"值的绝对值\",{\"1\":{\"31\":1}}],[\"和handler访问路径数据\",{\"1\":{\"155\":1}}],[\"和调用普通代码块\",{\"1\":{\"48\":1}}],[\"和\",{\"0\":{\"45\":1},\"1\":{\"31\":2,\"41\":1,\"49\":1,\"163\":1,\"165\":1,\"176\":1}}],[\"四舍五入\",{\"1\":{\"31\":1}}],[\"uri\",{\"1\":{\"172\":1}}],[\"url路径风格要求\",{\"1\":{\"172\":1}}],[\"url=jdbc\",{\"1\":{\"137\":1}}],[\"url\",{\"1\":{\"58\":1,\"137\":2,\"158\":3,\"172\":5}}],[\"ui\",{\"1\":{\"166\":2}}],[\"uname\",{\"1\":{\"162\":3}}],[\"uncommitted\",{\"1\":{\"131\":1,\"153\":4}}],[\"union\",{\"1\":{\"125\":3}}],[\"unique\",{\"1\":{\"119\":2}}],[\"unsigned\",{\"1\":{\"94\":1}}],[\"unmergeablexmlmappersplugin\",{\"1\":{\"86\":1}}],[\"u\",{\"1\":{\"91\":1}}],[\"uuid\",{\"1\":{\"72\":6}}],[\"util\",{\"1\":{\"137\":10,\"166\":1}}],[\"util=\",{\"1\":{\"137\":2}}],[\"utils\",{\"1\":{\"59\":1}}],[\"utf\",{\"1\":{\"58\":2,\"86\":1,\"134\":1,\"137\":3,\"143\":1,\"160\":1,\"165\":1}}],[\"use\",{\"1\":{\"98\":1,\"111\":1}}],[\"usegeneratedkeys=\",{\"1\":{\"72\":1}}],[\"usegeneratedkeys属性字面意思就是\",{\"1\":{\"72\":1}}],[\"usercontroller\",{\"1\":{\"141\":6,\"156\":1,\"158\":4,\"159\":1,\"173\":1,\"176\":1}}],[\"userfactorybean\",{\"1\":{\"140\":2}}],[\"user=root\",{\"1\":{\"137\":1}}],[\"user对象包含对应的属性值\",{\"1\":{\"137\":2}}],[\"userid=\",{\"1\":{\"86\":1}}],[\"userservice\",{\"1\":{\"136\":4}}],[\"users\",{\"1\":{\"58\":2}}],[\"user\",{\"1\":{\"58\":2,\"72\":4,\"88\":2,\"99\":1,\"101\":4,\"103\":2,\"104\":6,\"105\":2,\"106\":2,\"107\":2,\"108\":3,\"111\":5,\"120\":4,\"134\":7,\"136\":4,\"137\":21,\"138\":1,\"139\":3,\"140\":9,\"156\":1,\"158\":4,\"159\":1,\"161\":6,\"162\":2,\"173\":18,\"176\":5}}],[\"usermapper\",{\"1\":{\"58\":7}}],[\"username\",{\"1\":{\"58\":1,\"72\":2,\"137\":1}}],[\"usessl=false\",{\"1\":{\"58\":1}}],[\"upper\",{\"1\":{\"114\":1}}],[\"updata\",{\"1\":{\"112\":1}}],[\"updateuser\",{\"1\":{\"173\":1}}],[\"updateemp\",{\"1\":{\"172\":1}}],[\"updateemployeedynamic\",{\"1\":{\"75\":2}}],[\"updateemployeebymap\",{\"1\":{\"64\":2}}],[\"updateemployee\",{\"1\":{\"63\":2}}],[\"update>\",{\"1\":{\"63\":1,\"64\":1,\"75\":1}}],[\"update\",{\"1\":{\"63\":1,\"64\":1,\"75\":2,\"88\":3,\"101\":3,\"114\":1,\"120\":2,\"126\":1,\"147\":1,\"149\":1}}],[\"up\",{\"1\":{\"31\":2}}],[\"u0000\",{\"1\":{\"15\":1,\"23\":1}}],[\"幂指运算\",{\"1\":{\"31\":1}}],[\"取值prototype\",{\"1\":{\"138\":1}}],[\"取值singleton\",{\"1\":{\"138\":1}}],[\"取值\",{\"1\":{\"138\":2}}],[\"取值范围\",{\"1\":{\"15\":1}}],[\"取余运算\",{\"1\":{\"31\":1}}],[\"乘法运算\",{\"1\":{\"31\":2}}],[\"乘以\",{\"1\":{\"14\":1}}],[\"绝对值\",{\"1\":{\"31\":1}}],[\"构造方法后\",{\"1\":{\"145\":1}}],[\"构造方法\",{\"0\":{\"37\":1},\"1\":{\"31\":2,\"32\":1}}],[\"构造器注入\",{\"1\":{\"137\":1}}],[\"构造器私有化\",{\"1\":{\"53\":1}}],[\"构造器属性\",{\"1\":{\"53\":1}}],[\"构造器中赋值\",{\"1\":{\"49\":1}}],[\"构造器\",{\"1\":{\"28\":1,\"50\":1}}],[\"次方\",{\"1\":{\"31\":1}}],[\"的特点是简单\",{\"1\":{\"171\":1}}],[\"的请求\",{\"1\":{\"164\":1}}],[\"的值绑定到控制器中的方法参数\",{\"1\":{\"164\":1}}],[\"的类标识为\",{\"1\":{\"144\":1}}],[\"的类型为\",{\"1\":{\"72\":1}}],[\"的简写\",{\"1\":{\"133\":1}}],[\"的职位和薪资相同的员工信息\",{\"1\":{\"126\":1}}],[\"的所有员工信息\",{\"1\":{\"126\":1}}],[\"的语句就是一个\",{\"1\":{\"72\":1}}],[\"的别名为\",{\"1\":{\"67\":1}}],[\"的首字母小写的非限定类名来作为它的别名\",{\"1\":{\"67\":1}}],[\"的地方\",{\"1\":{\"67\":1}}],[\"的方式传值\",{\"1\":{\"61\":1}}],[\"的区别\",{\"0\":{\"61\":1}}],[\"的数组\",{\"1\":{\"31\":1}}],[\"的随机值\",{\"1\":{\"31\":1}}],[\"的平方根\",{\"1\":{\"31\":1}}],[\"的\",{\"1\":{\"31\":1,\"144\":1,\"159\":1}}],[\"的原码\",{\"1\":{\"14\":2}}],[\"range\",{\"1\":{\"176\":1}}],[\"rand\",{\"1\":{\"115\":1}}],[\"random类\",{\"1\":{\"31\":1}}],[\"random\",{\"1\":{\"31\":1}}],[\"right\",{\"1\":{\"123\":2}}],[\"rpad\",{\"1\":{\"114\":1}}],[\"rod\",{\"1\":{\"133\":1}}],[\"root\",{\"1\":{\"58\":1,\"86\":1,\"91\":1}}],[\"rollbackforclassname\",{\"1\":{\"152\":1}}],[\"rollbackfor=\",{\"1\":{\"152\":2}}],[\"rollbackfor\",{\"1\":{\"152\":1}}],[\"rollback\",{\"1\":{\"58\":1,\"129\":2,\"151\":1}}],[\"roundingmode指明舍入模式\",{\"1\":{\"31\":1}}],[\"roundingmode\",{\"1\":{\"31\":1}}],[\"round\",{\"1\":{\"31\":4,\"115\":1}}],[\"r\",{\"1\":{\"57\":1}}],[\"registry\",{\"1\":{\"175\":8}}],[\"removeemp\",{\"1\":{\"172\":1}}],[\"remainder\",{\"1\":{\"31\":1}}],[\"redirectdemo\",{\"1\":{\"169\":1}}],[\"redirect\",{\"1\":{\"169\":3}}],[\"release<\",{\"1\":{\"156\":1}}],[\"relational\",{\"1\":{\"57\":2}}],[\"required=\",{\"1\":{\"173\":1}}],[\"required\",{\"1\":{\"161\":2,\"173\":4}}],[\"requires\",{\"1\":{\"152\":1}}],[\"requestheader\",{\"1\":{\"165\":3,\"166\":1}}],[\"requestbody\",{\"1\":{\"163\":4,\"166\":1,\"173\":2,\"176\":1}}],[\"requestparam注解指定\",{\"1\":{\"161\":1}}],[\"requestparam注解接收参数\",{\"1\":{\"161\":1}}],[\"requestparam\",{\"1\":{\"161\":6,\"166\":1,\"173\":5}}],[\"requestmethod\",{\"1\":{\"159\":2,\"161\":1}}],[\"requestmapping注解映射路径\",{\"1\":{\"174\":1}}],[\"requestmapping注解指定\",{\"1\":{\"158\":2}}],[\"requestmapping注解的作用就是将请求的\",{\"1\":{\"158\":1}}],[\"requestmapping\",{\"1\":{\"156\":1,\"158\":9,\"159\":2,\"161\":3,\"169\":2,\"170\":1,\"173\":1,\"176\":1}}],[\"request\",{\"1\":{\"138\":1,\"166\":2,\"175\":8}}],[\"ret\",{\"1\":{\"149\":10}}],[\"returning\",{\"1\":{\"149\":1}}],[\"return用于main中\",{\"1\":{\"21\":1}}],[\"return用于方法中\",{\"1\":{\"21\":1}}],[\"return\",{\"0\":{\"21\":1},\"1\":{\"29\":1,\"40\":2,\"45\":4,\"53\":2,\"55\":3,\"59\":1,\"139\":2,\"140\":2,\"145\":3,\"149\":4,\"156\":4,\"158\":4,\"159\":1,\"161\":5,\"162\":1,\"163\":1,\"166\":1,\"168\":1,\"169\":2,\"170\":1,\"173\":9,\"174\":4,\"175\":2,\"176\":2}}],[\"representational\",{\"1\":{\"171\":1}}],[\"repository\",{\"1\":{\"143\":1,\"144\":1}}],[\"repeatable\",{\"1\":{\"131\":1,\"153\":4}}],[\"replace\",{\"1\":{\"28\":1}}],[\"readonly=true\",{\"1\":{\"152\":2}}],[\"readonly\",{\"1\":{\"152\":1}}],[\"read\",{\"1\":{\"131\":3,\"153\":12}}],[\"reader\",{\"1\":{\"59\":5,\"166\":1}}],[\"reference\",{\"1\":{\"166\":1}}],[\"references\",{\"1\":{\"120\":5}}],[\"ref>\",{\"1\":{\"137\":10}}],[\"ref=\",{\"1\":{\"137\":5}}],[\"refid=\",{\"1\":{\"79\":1}}],[\"revoke\",{\"1\":{\"112\":1}}],[\"reverse\",{\"1\":{\"28\":1}}],[\"rename\",{\"1\":{\"99\":1}}],[\"rest\",{\"1\":{\"172\":1}}],[\"rest风格下每个资源都应该有一个唯一的标识符\",{\"1\":{\"172\":1}}],[\"restful示例\",{\"0\":{\"173\":1}}],[\"restful\",{\"1\":{\"171\":3}}],[\"restful风格\",{\"0\":{\"171\":1}}],[\"restcontrolleradvice\",{\"1\":{\"174\":2}}],[\"restcontroller\",{\"1\":{\"170\":2,\"173\":1,\"176\":1}}],[\"restrict\",{\"1\":{\"120\":1}}],[\"response\",{\"1\":{\"166\":1,\"175\":3}}],[\"responsebody可以添加到类上\",{\"1\":{\"170\":1}}],[\"responsebody注解可以用来标识方法或者方法返回值\",{\"1\":{\"170\":1}}],[\"responsebody注解\",{\"1\":{\"170\":1}}],[\"responsebody\",{\"1\":{\"156\":1,\"158\":4,\"159\":1,\"161\":5,\"162\":1,\"163\":1,\"166\":1,\"170\":4,\"174\":1}}],[\"res1\",{\"1\":{\"117\":2}}],[\"result\",{\"1\":{\"176\":3}}],[\"resultmap=\",{\"1\":{\"67\":1,\"81\":3,\"82\":2}}],[\"resultmap>\",{\"1\":{\"67\":1,\"81\":3,\"82\":2}}],[\"resultmap\",{\"1\":{\"67\":1}}],[\"resulttype=\",{\"1\":{\"58\":1,\"62\":1,\"68\":1,\"69\":2,\"70\":1,\"71\":1,\"72\":1,\"74\":1,\"76\":1,\"77\":1,\"81\":1,\"82\":1,\"87\":1}}],[\"resulttype\",{\"1\":{\"58\":1,\"67\":2,\"72\":1}}],[\"resources\",{\"1\":{\"58\":1,\"59\":2,\"86\":1}}],[\"resource\",{\"1\":{\"58\":2,\"144\":1}}],[\"resource=\",{\"1\":{\"58\":1}}],[\"向后调用业务\",{\"1\":{\"155\":1}}],[\"向下转型只能强转父类引用\",{\"1\":{\"44\":1}}],[\"向下转型\",{\"1\":{\"44\":1}}],[\"向下取整\",{\"1\":{\"31\":1,\"115\":1}}],[\"向当前对象添加几天\",{\"1\":{\"32\":1}}],[\"向上转型\",{\"1\":{\"44\":1}}],[\"向上加1\",{\"1\":{\"31\":1}}],[\"向上取整\",{\"1\":{\"31\":1,\"115\":1}}],[\"mike\",{\"1\":{\"162\":1}}],[\"min\",{\"1\":{\"105\":1,\"176\":5}}],[\"minusdays\",{\"1\":{\"32\":1}}],[\"mulform\",{\"1\":{\"161\":1}}],[\"mul\",{\"1\":{\"161\":2}}],[\"multiplicand\",{\"1\":{\"31\":1}}],[\"multiply\",{\"1\":{\"31\":2}}],[\"mvc\",{\"1\":{\"155\":2,\"163\":1,\"166\":1,\"169\":1}}],[\"mvc是基于servlet\",{\"1\":{\"155\":1}}],[\"money\",{\"1\":{\"152\":3}}],[\"month\",{\"1\":{\"116\":1}}],[\"modelandview\",{\"1\":{\"175\":2}}],[\"modelmap\",{\"1\":{\"166\":1}}],[\"model\",{\"1\":{\"166\":1}}],[\"module\",{\"1\":{\"156\":1}}],[\"mod\",{\"1\":{\"115\":1}}],[\"modify\",{\"1\":{\"99\":1}}],[\"m代表精度即总长度\",{\"1\":{\"94\":1}}],[\"mediumtext\",{\"1\":{\"95\":1}}],[\"mediumblob\",{\"1\":{\"95\":1}}],[\"mediumint\",{\"1\":{\"94\":1}}],[\"methods\",{\"1\":{\"166\":1}}],[\"method=\",{\"1\":{\"139\":2}}],[\"method属性指定销毁方法\",{\"1\":{\"139\":1}}],[\"method属性指定初始化方法\",{\"1\":{\"139\":1}}],[\"method\",{\"1\":{\"52\":2,\"147\":1,\"159\":1,\"161\":1,\"166\":4}}],[\"m\",{\"1\":{\"57\":1,\"94\":1}}],[\"m1\",{\"1\":{\"52\":1}}],[\"managerid\",{\"1\":{\"124\":2,\"126\":3}}],[\"maven<\",{\"1\":{\"156\":1}}],[\"maven\",{\"1\":{\"86\":1,\"156\":1}}],[\"male\",{\"1\":{\"76\":1}}],[\"max\",{\"1\":{\"69\":1,\"105\":1,\"176\":5}}],[\"map集合类型的bean\",{\"1\":{\"137\":1}}],[\"map>\",{\"1\":{\"137\":2}}],[\"map类型注入\",{\"1\":{\"137\":1}}],[\"map类型参数\",{\"0\":{\"64\":1}}],[\"map\",{\"1\":{\"64\":1,\"69\":2,\"137\":2,\"166\":1,\"176\":1}}],[\"map<string\",{\"1\":{\"64\":1,\"69\":1}}],[\"mapperxml文件\",{\"1\":{\"86\":1}}],[\"mapper接口\",{\"1\":{\"86\":1}}],[\"mapper接口的抽象方法\",{\"1\":{\"69\":1,\"70\":1}}],[\"mapper接口中抽象方法\",{\"1\":{\"71\":1}}],[\"mapper接口中抽象方法的声明\",{\"1\":{\"62\":1,\"63\":1,\"64\":1,\"65\":1}}],[\"mapper接口中的抽象方法\",{\"1\":{\"68\":1,\"72\":1}}],[\"mapper>\",{\"1\":{\"58\":1,\"81\":4,\"82\":3}}],[\"mappers>\",{\"1\":{\"58\":1}}],[\"mapper\",{\"1\":{\"58\":5,\"81\":5,\"82\":4,\"86\":2,\"87\":1}}],[\"mapping\",{\"1\":{\"57\":2}}],[\"mapunderscoretocamelcase\",{\"1\":{\"58\":1,\"70\":1}}],[\"main\",{\"1\":{\"49\":1,\"58\":1,\"59\":1,\"86\":3,\"136\":2,\"137\":2,\"143\":1,\"145\":1}}],[\"math类\",{\"0\":{\"31\":1}}],[\"mm\",{\"1\":{\"32\":4,\"96\":6}}],[\"myinterceptor\",{\"1\":{\"175\":5}}],[\"myadvice\",{\"1\":{\"147\":1,\"149\":1}}],[\"mybeanprocessor\",{\"1\":{\"139\":3}}],[\"mybatis3\",{\"1\":{\"86\":1}}],[\"mybatis3simple\",{\"1\":{\"86\":2}}],[\"mybatis逆向⼯程插件\",{\"1\":{\"86\":1}}],[\"mybatis默认开启二级缓存\",{\"1\":{\"85\":1}}],[\"mybatis默认开启一级缓存\",{\"1\":{\"84\":1}}],[\"mybatis缓存\",{\"0\":{\"83\":1}}],[\"mybatis是将自增主键的值设置到实体类对象中\",{\"1\":{\"72\":1}}],[\"mybatis会将拿到的主键值存入这个属性\",{\"1\":{\"72\":1}}],[\"mybatis会根据\",{\"1\":{\"65\":1}}],[\"mybatisutils\",{\"1\":{\"59\":3}}],[\"mybatisdemo\",{\"1\":{\"58\":1}}],[\"mybatis<\",{\"1\":{\"58\":1}}],[\"mybatis依赖\",{\"1\":{\"58\":1}}],[\"mybatis属于半⾃动化的orm框架\",{\"1\":{\"57\":1}}],[\"mybatis\",{\"0\":{\"56\":1,\"178\":1},\"1\":{\"56\":1,\"57\":5,\"58\":8,\"59\":1,\"62\":1,\"67\":2,\"68\":1,\"70\":2,\"71\":1,\"76\":1,\"77\":1,\"86\":10}}],[\"myselectsql\",{\"1\":{\"79\":2}}],[\"mysql驱动\",{\"1\":{\"137\":1}}],[\"mysql驱动依赖\",{\"1\":{\"86\":1}}],[\"mysql数据库的sql语句不区分大小写\",{\"1\":{\"92\":1}}],[\"mysql所使用的\",{\"1\":{\"90\":1}}],[\"mysql将数据保存在不同的表中\",{\"1\":{\"90\":1}}],[\"mysql是一种关系型数据库管理系统\",{\"1\":{\"90\":1}}],[\"mysql依赖\",{\"1\":{\"58\":1}}],[\"mysql\",{\"0\":{\"89\":1,\"179\":1},\"1\":{\"3\":1,\"58\":2,\"72\":1,\"86\":2,\"89\":1,\"90\":2,\"91\":2,\"111\":2,\"137\":2,\"145\":3,\"153\":1}}],[\"mydoc\",{\"1\":{\"13\":1}}],[\"关联起来\",{\"1\":{\"158\":1}}],[\"关键字来实现重定向\",{\"1\":{\"169\":1}}],[\"关键字\",{\"1\":{\"109\":1,\"119\":1}}],[\"关键字建议使用大写\",{\"1\":{\"92\":1}}],[\"关系型数据库\",{\"1\":{\"57\":1}}],[\"关闭资源\",{\"1\":{\"30\":1}}],[\"关于作者\",{\"0\":{\"0\":1}}],[\"复制的长度\",{\"1\":{\"30\":1}}],[\"从一开始就包含在\",{\"1\":{\"155\":1}}],[\"从而使得业务逻辑各部分之间的耦合度降低\",{\"1\":{\"146\":1}}],[\"从而获取到对应的数据\",{\"1\":{\"65\":1}}],[\"从诞生到成长的整个过程\",{\"1\":{\"133\":1}}],[\"从简单性\",{\"1\":{\"133\":1}}],[\"从上到下依次执行条件判断\",{\"1\":{\"77\":1}}],[\"从当前对象减少几天\",{\"1\":{\"32\":1}}],[\"从源数组的索引位置开始复制\",{\"1\":{\"30\":1}}],[\"从beginindex开始截取到endindex\",{\"1\":{\"28\":1}}],[\"源数组\",{\"1\":{\"30\":1}}],[\"退出当前程序\",{\"1\":{\"30\":1}}],[\"7\",{\"0\":{\"52\":1,\"80\":1,\"102\":1,\"109\":1,\"164\":1,\"175\":1},\"1\":{\"29\":2,\"99\":1,\"109\":1,\"165\":3}}],[\"7976931348623157e308\",{\"1\":{\"15\":1}}],[\"6+1\",{\"1\":{\"29\":1}}],[\"6\",{\"0\":{\"32\":1,\"45\":1,\"51\":1,\"72\":1,\"73\":1,\"79\":1,\"100\":1,\"108\":1,\"141\":1,\"150\":1,\"163\":1,\"174\":1},\"1\":{\"29\":1,\"99\":1,\"109\":1,\"176\":1}}],[\"65535\",{\"1\":{\"15\":1,\"95\":3}}],[\"若要对字符串进行校验\",{\"1\":{\"176\":1}}],[\"若要访问内部类则需要创建内部类对象\",{\"1\":{\"52\":1}}],[\"若整合spring则不写\",{\"1\":{\"156\":1}}],[\"若执行其他语句\",{\"1\":{\"83\":1}}],[\"若有则设置子表外键值为null\",{\"1\":{\"120\":1}}],[\"若有则也删除\",{\"1\":{\"120\":1}}],[\"若有则不允许删除\",{\"1\":{\"120\":2}}],[\"若有注解\",{\"1\":{\"67\":1}}],[\"若有重名则遵循就近原则\",{\"1\":{\"43\":1}}],[\"若父类没有无参构造器则需要通过super指用特定构造器\",{\"1\":{\"41\":1}}],[\"若找不到则会在父类中继续查找\",{\"1\":{\"38\":1}}],[\"若使用则需显式定义\",{\"1\":{\"37\":1}}],[\"若无则返回此元素应该在的位置的\",{\"1\":{\"29\":1}}],[\"若i1\",{\"1\":{\"29\":1}}],[\"若i2\",{\"1\":{\"29\":1}}],[\"二进制形式极大文本数据\",{\"1\":{\"95\":1}}],[\"二进制形式中等文本数据\",{\"1\":{\"95\":1}}],[\"二进制形式的长文本数据\",{\"1\":{\"95\":1}}],[\"二级缓存\",{\"0\":{\"85\":1}}],[\"二分查找指定元素\",{\"1\":{\"29\":1}}],[\"二维数组\",{\"1\":{\"23\":1}}],[\"在实体类参数和\",{\"1\":{\"176\":1}}],[\"在实际开发中\",{\"1\":{\"160\":1}}],[\"在进行数据校验时\",{\"1\":{\"176\":1}}],[\"在目标\",{\"1\":{\"175\":1}}],[\"在处理请求的目标\",{\"1\":{\"175\":1}}],[\"在声明式异常处理中\",{\"1\":{\"174\":1}}],[\"在编程式异常处理中\",{\"1\":{\"174\":1}}],[\"在这里可以使用\",{\"1\":{\"161\":1,\"163\":1}}],[\"在controller中\",{\"1\":{\"161\":1,\"163\":1}}],[\"在config\",{\"1\":{\"81\":1}}],[\"在transaction01执行期间\",{\"1\":{\"153\":1}}],[\"在业务层接口上添加spring事务管理\",{\"1\":{\"152\":1}}],[\"在被代理的目标方法最终结束后执行\",{\"1\":{\"149\":1}}],[\"在被代理的目标方法异常结束后执行\",{\"1\":{\"149\":1}}],[\"在被代理的目标方法成功结束后执行\",{\"1\":{\"149\":1}}],[\"在被代理的目标方法前执行\",{\"1\":{\"149\":1}}],[\"在不修改源代码的情况下\",{\"1\":{\"146\":1}}],[\"在一个会话范围内有效\",{\"1\":{\"138\":1}}],[\"在一个请求范围内有效\",{\"1\":{\"138\":1}}],[\"在一个类的调用顺序\",{\"1\":{\"48\":1}}],[\"在spring中可以通过配置bean标签的scope属性来指定bean的作用域范围\",{\"1\":{\"138\":1}}],[\"在指定的集合范围内\",{\"1\":{\"126\":1}}],[\"在创建表或修改表的时候添加约束\",{\"1\":{\"119\":1}}],[\"在创建对象实例时\",{\"1\":{\"48\":1}}],[\"在某个范围内\",{\"1\":{\"104\":1}}],[\"在执行查询dql之前开启分页功能即可\",{\"1\":{\"87\":1}}],[\"在mybatis\",{\"1\":{\"87\":1}}],[\"在maven插件双击mybatis\",{\"1\":{\"86\":1}}],[\"在ioc容器中\",{\"1\":{\"138\":1}}],[\"在in之后的列表中的值\",{\"1\":{\"104\":1}}],[\"在item属性中设置一个名字\",{\"1\":{\"78\":1}}],[\"在if标签内部\",{\"1\":{\"74\":1}}],[\"在多个分支条件中\",{\"1\":{\"77\":1}}],[\"在将\",{\"1\":{\"72\":1}}],[\"在resulttype属性中还是设置实体类类型即可\",{\"1\":{\"71\":1}}],[\"在全局范围内对mybatis进行配置\",{\"1\":{\"70\":1}}],[\"在没有注解的情况下\",{\"1\":{\"67\":1}}],[\"在arr数组中查找元素若有则返回下标值\",{\"1\":{\"29\":1}}],[\"在\",{\"1\":{\"28\":1,\"31\":2,\"62\":1,\"70\":1,\"72\":1,\"158\":2,\"159\":1,\"160\":2,\"169\":1}}],[\"在jre里面有jvm和lib\",{\"1\":{\"10\":1}}],[\"替换\",{\"1\":{\"28\":1}}],[\"删除操作\",{\"1\":{\"153\":1,\"172\":1}}],[\"删除emp\",{\"1\":{\"120\":1}}],[\"删除外键\",{\"1\":{\"120\":1}}],[\"删除用户\",{\"1\":{\"111\":1}}],[\"删除语句的条件如果没有则会删除整张表的所有数据\",{\"1\":{\"101\":1}}],[\"删除语句不能删除某一个字段的值\",{\"1\":{\"101\":1}}],[\"删除所有\",{\"1\":{\"101\":1}}],[\"删除id为1的数据\",{\"1\":{\"101\":1}}],[\"删除数据\",{\"1\":{\"101\":1,\"112\":1}}],[\"删除数据库\",{\"1\":{\"98\":1,\"112\":1}}],[\"删除指定表并重新创建该表\",{\"1\":{\"99\":1}}],[\"删除表\",{\"1\":{\"99\":1}}],[\"删除字段\",{\"1\":{\"99\":1}}],[\"删除\",{\"1\":{\"28\":2,\"88\":1,\"172\":1}}],[\"将拦截器添加到springmvc环境\",{\"1\":{\"175\":2}}],[\"将方法的返回值\",{\"1\":{\"169\":1}}],[\"将对应类加入ioc容器\",{\"1\":{\"143\":1}}],[\"将对象写在最前面\",{\"1\":{\"53\":1}}],[\"将dept作为对象注入到emp的属性中\",{\"1\":{\"137\":1}}],[\"将s1\",{\"1\":{\"114\":1}}],[\"将cars集合放入pageinfo\",{\"1\":{\"87\":1}}],[\"将查询到的数据存储到sqlsessionfactory\",{\"1\":{\"85\":1}}],[\"将查询到的数据存储到sqlsession\",{\"1\":{\"84\":1}}],[\"将查询结果放到缓存中\",{\"1\":{\"83\":1}}],[\"将来通过这个名字引用遍历出来的对象\",{\"1\":{\"78\":1}}],[\"将java虚拟机中的\",{\"1\":{\"57\":1}}],[\"将程序中的对象自动持久化到关系数据库中\",{\"1\":{\"57\":1}}],[\"将异常抛出\",{\"1\":{\"55\":1}}],[\"将字符串str全部转化为大写\",{\"1\":{\"114\":1}}],[\"将字符串str全部转化为小写\",{\"1\":{\"114\":1}}],[\"将字符串转化成枚举对象\",{\"1\":{\"53\":1}}],[\"将字符串中小写字母转为大写\",{\"1\":{\"28\":1}}],[\"将字符串中大写字母转为小写\",{\"1\":{\"28\":1}}],[\"将逻辑语句封装到方法体中\",{\"1\":{\"48\":1}}],[\"将指定格式的字符串解析为日期\",{\"1\":{\"32\":1}}],[\"将此字符串转换为一个新的字符数组返回\",{\"1\":{\"28\":1}}],[\"位置插入str\",{\"1\":{\"28\":1}}],[\"位置字符\",{\"1\":{\"28\":1}}],[\"位置的字符\",{\"1\":{\"28\":1}}],[\"位运算符\",{\"1\":{\"14\":1}}],[\"返回json数据\",{\"0\":{\"170\":1}}],[\"返回的结果\",{\"1\":{\"168\":1}}],[\"返回数据\",{\"0\":{\"168\":1},\"1\":{\"168\":1}}],[\"返回数组的字符串形式\",{\"1\":{\"29\":1}}],[\"返回通知或异常通知\",{\"1\":{\"149\":2}}],[\"返回通知\",{\"1\":{\"149\":1}}],[\"返回一行\",{\"1\":{\"126\":1}}],[\"返回一列\",{\"1\":{\"126\":1}}],[\"返回一个日期\",{\"1\":{\"116\":1}}],[\"返回一个含所有枚举对象的数组\",{\"1\":{\"53\":1}}],[\"返回一个指定字符串格式的datetimeformatter\",{\"1\":{\"32\":1}}],[\"返回一个字符串\",{\"1\":{\"32\":1}}],[\"返回一个伪随机数\",{\"1\":{\"31\":1}}],[\"返回一个新字符串\",{\"1\":{\"28\":1}}],[\"返回单个值\",{\"1\":{\"126\":1}}],[\"返回res1\",{\"1\":{\"117\":2}}],[\"返回起始时间date1和结束时间date2之间的天数\",{\"1\":{\"116\":1}}],[\"返回当前时间\",{\"1\":{\"116\":1}}],[\"返回当前日期和时间\",{\"1\":{\"116\":1}}],[\"返回当前日期\",{\"1\":{\"116\":1}}],[\"返回0~1内的随机数\",{\"1\":{\"115\":1}}],[\"返回x\",{\"1\":{\"115\":1}}],[\"返回从字符串str从start位置起的len个长度的字符串\",{\"1\":{\"114\":1}}],[\"返回从1970\",{\"1\":{\"30\":1}}],[\"返回主键值\",{\"0\":{\"72\":1}}],[\"返回list类型\",{\"0\":{\"71\":1}}],[\"返回实体类对象\",{\"0\":{\"70\":1}}],[\"返回map集合\",{\"1\":{\"69\":1}}],[\"返回map类型\",{\"0\":{\"69\":1}}],[\"返回值\",{\"1\":{\"148\":1,\"173\":1}}],[\"返回值说明\",{\"0\":{\"67\":1}}],[\"返回值类型对于增删改类使用精准类型匹配\",{\"1\":{\"148\":1}}],[\"返回值类型\",{\"1\":{\"58\":1}}],[\"返回值是前者编号减去后者编号\",{\"1\":{\"53\":1}}],[\"返回值为布尔值\",{\"1\":{\"44\":1}}],[\"返回类型一致或者是父类返回类型的子类\",{\"1\":{\"42\":1}}],[\"返回类型\",{\"1\":{\"42\":1}}],[\"返回自\",{\"1\":{\"32\":1}}],[\"返回下一个伪随机数\",{\"1\":{\"31\":4}}],[\"返回下一个伪随机布尔值\",{\"1\":{\"31\":1}}],[\"返回包含除法运算后跟取余运算的两个\",{\"1\":{\"31\":1}}],[\"返回圆周率\",{\"1\":{\"31\":1}}],[\"返回四舍五入值\",{\"1\":{\"31\":1}}],[\"返回\",{\"1\":{\"28\":1,\"29\":3,\"31\":4}}],[\"区分大小写\",{\"1\":{\"28\":1}}],[\"自动扫描包下所有使用\",{\"1\":{\"144\":1}}],[\"自动装配\",{\"1\":{\"145\":1}}],[\"自动装配根据类型或名称autowire=\",{\"1\":{\"141\":1}}],[\"自动装箱\",{\"1\":{\"28\":1}}],[\"自外连接\",{\"1\":{\"124\":1}}],[\"自内连接\",{\"1\":{\"124\":1}}],[\"自连接必须起别名\",{\"1\":{\"124\":1}}],[\"自连接查询可以是内连接查询也可以是外连接查询\",{\"1\":{\"124\":1}}],[\"自连接\",{\"0\":{\"124\":1},\"1\":{\"124\":1}}],[\"自增长类型主键\",{\"1\":{\"72\":1}}],[\"自增运算符\",{\"1\":{\"14\":1}}],[\"自定义格式\",{\"1\":{\"32\":1}}],[\"putmapping\",{\"1\":{\"159\":1,\"173\":1}}],[\"put\",{\"1\":{\"159\":1,\"172\":2,\"173\":1}}],[\"public\",{\"1\":{\"29\":1,\"31\":9,\"32\":1,\"35\":1,\"36\":1,\"37\":2,\"38\":2,\"40\":4,\"45\":2,\"47\":2,\"49\":6,\"50\":3,\"51\":1,\"52\":11,\"53\":2,\"55\":1,\"58\":5,\"59\":4,\"67\":1,\"71\":1,\"81\":2,\"82\":2,\"86\":1,\"87\":1,\"134\":1,\"136\":2,\"137\":3,\"139\":4,\"140\":4,\"141\":1,\"143\":5,\"145\":17,\"147\":3,\"149\":11,\"152\":6,\"156\":4,\"158\":8,\"159\":3,\"161\":7,\"162\":1,\"163\":2,\"164\":1,\"165\":1,\"166\":1,\"168\":1,\"169\":2,\"170\":2,\"173\":14,\"174\":3,\"175\":9,\"176\":3}}],[\"pjp\",{\"1\":{\"149\":10}}],[\"pt\",{\"1\":{\"147\":2,\"149\":11}}],[\"p=\",{\"1\":{\"137\":1}}],[\"p命名空间注入\",{\"1\":{\"137\":1}}],[\"p\",{\"1\":{\"91\":1,\"137\":5}}],[\"past\",{\"1\":{\"176\":1}}],[\"password=atguigu\",{\"1\":{\"137\":1}}],[\"password=\",{\"1\":{\"86\":1}}],[\"password\",{\"1\":{\"58\":1,\"72\":2,\"111\":1,\"137\":2}}],[\"pattern\",{\"1\":{\"176\":1}}],[\"pathvariable\",{\"1\":{\"162\":2,\"166\":1,\"173\":1}}],[\"path>\",{\"1\":{\"156\":1}}],[\"patchmapping\",{\"1\":{\"159\":1}}],[\"patch\",{\"1\":{\"159\":1}}],[\"pad\",{\"1\":{\"114\":2}}],[\"page=1\",{\"1\":{\"173\":2}}],[\"page\",{\"1\":{\"173\":10}}],[\"pageinfo<>\",{\"1\":{\"87\":1}}],[\"pageinfo<car>\",{\"1\":{\"87\":1}}],[\"pageinfo\",{\"1\":{\"87\":2}}],[\"pageinterceptor\",{\"1\":{\"87\":1}}],[\"pagesize\",{\"1\":{\"87\":2}}],[\"pagenum\",{\"1\":{\"87\":2}}],[\"pagehelper\",{\"1\":{\"87\":2}}],[\"pagehelper<\",{\"1\":{\"87\":1}}],[\"pagehelper分页插件\",{\"0\":{\"87\":1}}],[\"paramform\",{\"1\":{\"161\":2}}],[\"paramcontroller\",{\"1\":{\"161\":2,\"170\":1}}],[\"param和json的比较\",{\"0\":{\"160\":1}}],[\"param注解\",{\"1\":{\"78\":2}}],[\"param注解一个一个传入又太麻烦了\",{\"1\":{\"64\":1}}],[\"parametertype=\",{\"1\":{\"72\":1}}],[\"parammap\",{\"1\":{\"64\":1}}],[\"param\",{\"1\":{\"63\":2,\"78\":1,\"160\":8,\"161\":5,\"170\":1,\"174\":2}}],[\"param参数接收\",{\"0\":{\"161\":1}}],[\"param参数\",{\"1\":{\"63\":1}}],[\"parse\",{\"1\":{\"32\":1}}],[\"parseint\",{\"1\":{\"28\":1}}],[\"package=\",{\"1\":{\"143\":1}}],[\"package\",{\"1\":{\"59\":1,\"173\":1}}],[\"platform<\",{\"1\":{\"176\":1}}],[\"placeholder\",{\"1\":{\"137\":1}}],[\"plain\",{\"1\":{\"57\":1}}],[\"plugins\",{\"1\":{\"86\":1}}],[\"plugins>\",{\"1\":{\"86\":1,\"87\":1,\"156\":1}}],[\"plugin>\",{\"1\":{\"86\":1,\"87\":1,\"156\":1}}],[\"plugin<\",{\"1\":{\"86\":1,\"156\":1}}],[\"plus\",{\"1\":{\"32\":1}}],[\"plusdays\",{\"1\":{\"32\":1}}],[\"port>\",{\"1\":{\"156\":1}}],[\"point\",{\"1\":{\"148\":1}}],[\"pointcut\",{\"1\":{\"147\":1,\"149\":1}}],[\"posthandle\",{\"1\":{\"175\":3}}],[\"postmapping\",{\"1\":{\"159\":1,\"163\":1,\"173\":2,\"176\":1}}],[\"post\",{\"1\":{\"159\":2,\"160\":1,\"161\":1,\"172\":2,\"173\":1}}],[\"postconstruct\",{\"1\":{\"145\":1}}],[\"postprocessafterinitialization\",{\"1\":{\"139\":1}}],[\"postprocessbeforeinitialization\",{\"1\":{\"139\":1}}],[\"pool\",{\"1\":{\"137\":1}}],[\"pooled\",{\"1\":{\"58\":1}}],[\"pojo\",{\"1\":{\"57\":1,\"58\":1,\"86\":1,\"173\":1}}],[\"pow\",{\"1\":{\"31\":2}}],[\"p123456\",{\"1\":{\"91\":1}}],[\"p1\",{\"1\":{\"44\":2,\"52\":2}}],[\"people\",{\"1\":{\"44\":3,\"52\":3}}],[\"person\",{\"1\":{\"37\":3,\"41\":2,\"163\":5}}],[\"period\",{\"1\":{\"32\":2}}],[\"prehandle\",{\"1\":{\"175\":3}}],[\"predestroy\",{\"1\":{\"145\":1}}],[\"prefix=\",{\"1\":{\"76\":1}}],[\"prefixoverrides属性\",{\"1\":{\"76\":1}}],[\"prefix属性\",{\"1\":{\"76\":1}}],[\"projectname\",{\"1\":{\"173\":1}}],[\"product\",{\"1\":{\"158\":10}}],[\"productcontroller\",{\"1\":{\"158\":2}}],[\"propagation\",{\"1\":{\"152\":3}}],[\"properties\",{\"1\":{\"137\":2,\"145\":2}}],[\"propertysource\",{\"1\":{\"145\":2}}],[\"property\",{\"1\":{\"137\":1}}],[\"property>\",{\"1\":{\"137\":16,\"139\":1}}],[\"property=\",{\"1\":{\"67\":3,\"81\":12,\"82\":8}}],[\"property属性用于指定java实体类属性名\",{\"1\":{\"67\":1}}],[\"proceed\",{\"1\":{\"149\":4}}],[\"proceedingjoinpoint是joinpoint的实现类\",{\"1\":{\"149\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"149\":4}}],[\"processor<\",{\"1\":{\"176\":1}}],[\"process\",{\"1\":{\"139\":1}}],[\"proxy\",{\"1\":{\"146\":1}}],[\"programming\",{\"1\":{\"146\":1}}],[\"prototype\",{\"1\":{\"138\":2,\"139\":1,\"145\":1}}],[\"protected\",{\"1\":{\"156\":3}}],[\"protect\",{\"1\":{\"35\":1}}],[\"primary\",{\"1\":{\"119\":2}}],[\"printstacktrace\",{\"1\":{\"59\":1}}],[\"println\",{\"1\":{\"18\":1,\"24\":3,\"32\":1,\"42\":2,\"49\":1,\"52\":5,\"58\":1,\"59\":1,\"87\":1,\"136\":1,\"137\":3,\"139\":2,\"140\":1,\"145\":3,\"147\":1,\"149\":16,\"156\":1,\"158\":2,\"161\":5,\"162\":1,\"166\":1,\"173\":10,\"176\":2}}],[\"private\",{\"1\":{\"35\":1,\"40\":2,\"52\":7,\"53\":3,\"59\":1,\"81\":5,\"82\":5,\"145\":5,\"147\":1,\"149\":1,\"163\":3,\"173\":3,\"176\":2}}],[\"pi\",{\"1\":{\"31\":1}}],[\"viewresovler\",{\"1\":{\"155\":1}}],[\"varchar\",{\"1\":{\"95\":1,\"99\":1,\"119\":1}}],[\"validated\",{\"1\":{\"176\":2}}],[\"validation\",{\"1\":{\"176\":2}}],[\"validator<\",{\"1\":{\"176\":3}}],[\"validator\",{\"1\":{\"176\":3}}],[\"val1\",{\"1\":{\"117\":2}}],[\"value>\",{\"1\":{\"137\":6}}],[\"value><\",{\"1\":{\"137\":1}}],[\"value2\",{\"1\":{\"117\":1}}],[\"value1\",{\"1\":{\"117\":1}}],[\"value\",{\"1\":{\"117\":1,\"144\":1,\"145\":4,\"149\":1,\"158\":1,\"159\":1,\"161\":4,\"163\":1,\"176\":9}}],[\"value=\",{\"1\":{\"58\":6,\"70\":1,\"81\":1,\"86\":6,\"137\":13,\"139\":1,\"161\":4}}],[\"values\",{\"1\":{\"53\":1,\"65\":1,\"72\":2,\"78\":1,\"88\":1,\"101\":4}}],[\"valueof\",{\"1\":{\"28\":1,\"53\":1}}],[\"val\",{\"1\":{\"31\":8}}],[\"void\",{\"1\":{\"31\":1,\"32\":1,\"36\":3,\"38\":2,\"40\":2,\"42\":2,\"47\":1,\"49\":1,\"50\":1,\"51\":2,\"52\":12,\"55\":1,\"58\":1,\"59\":2,\"71\":1,\"75\":1,\"87\":1,\"134\":1,\"136\":2,\"137\":3,\"139\":1,\"140\":1,\"141\":1,\"143\":1,\"145\":4,\"147\":3,\"148\":4,\"149\":8,\"152\":3,\"164\":1,\"165\":1,\"173\":3,\"175\":6}}],[\"version=\",{\"1\":{\"58\":2,\"86\":1,\"134\":1,\"137\":3,\"143\":1}}],[\"version>\",{\"1\":{\"58\":2,\"86\":2,\"87\":1,\"134\":1,\"137\":2,\"147\":2,\"156\":4,\"176\":3}}],[\"version\",{\"1\":{\"13\":2,\"91\":1}}],[\"方括号\",{\"1\":{\"98\":1}}],[\"方式三\",{\"1\":{\"28\":1}}],[\"方式二\",{\"1\":{\"28\":2}}],[\"方式一\",{\"1\":{\"28\":2}}],[\"方法之后\",{\"1\":{\"175\":1}}],[\"方法前执行\",{\"1\":{\"175\":1}}],[\"方法和状态码进行通信\",{\"1\":{\"171\":1}}],[\"方法上使用\",{\"1\":{\"170\":1}}],[\"方法特定快捷方式变体\",{\"1\":{\"159\":1}}],[\"方法手动清空缓存\",{\"1\":{\"84\":1}}],[\"方法的简单和轻量级的通信协议\",{\"1\":{\"171\":1}}],[\"方法的参数和sql的参数一致\",{\"1\":{\"58\":1}}],[\"方法的话就可能会导致\",{\"1\":{\"45\":1}}],[\"方法名书写以动词进行精准匹配\",{\"1\":{\"148\":1}}],[\"方法名和sql的id一致\",{\"1\":{\"58\":1}}],[\"方法名\",{\"1\":{\"47\":1,\"58\":1,\"148\":1,\"149\":1}}],[\"方法名或者对象\",{\"1\":{\"47\":1}}],[\"方法名要和父类完全一致\",{\"1\":{\"42\":1}}],[\"方法判断是相等的两个对象\",{\"1\":{\"45\":1}}],[\"方法判断两个对象是相等的\",{\"1\":{\"45\":2}}],[\"方法重写过\",{\"1\":{\"45\":1}}],[\"方法重写\",{\"0\":{\"42\":1}}],[\"方法重载\",{\"1\":{\"36\":1}}],[\"方法\",{\"0\":{\"36\":1},\"1\":{\"27\":1,\"42\":1,\"43\":1,\"45\":1,\"49\":2,\"65\":1,\"149\":2,\"175\":6}}],[\"方法返回值和resulttype一致\",{\"1\":{\"58\":1}}],[\"方法返回\",{\"1\":{\"24\":1}}],[\"方法3\",{\"1\":{\"24\":1}}],[\"方法2\",{\"1\":{\"24\":1}}],[\"方法1\",{\"1\":{\"24\":1}}],[\">=\",{\"1\":{\"126\":1}}],[\">=3\",{\"1\":{\"106\":1}}],[\"><value><\",{\"1\":{\"137\":1}}],[\"><null\",{\"1\":{\"137\":1}}],[\"><\",{\"1\":{\"87\":1,\"134\":1,\"137\":25,\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"143\":1}}],[\">代表使用二级缓存\",{\"1\":{\"85\":1}}],[\">emp\",{\"1\":{\"77\":2}}],[\">\",{\"1\":{\"28\":4,\"58\":27,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"67\":13,\"68\":1,\"69\":1,\"70\":5,\"71\":2,\"72\":5,\"74\":4,\"75\":5,\"76\":7,\"77\":1,\"78\":4,\"79\":4,\"81\":24,\"82\":16,\"86\":34,\"87\":1,\"125\":2,\"126\":6,\"134\":4,\"137\":50,\"138\":2,\"139\":5,\"140\":1,\"141\":1,\"143\":4,\"147\":2,\"156\":2,\"176\":1}}],[\">>>\",{\"1\":{\"14\":1}}],[\">>\",{\"1\":{\"14\":2}}],[\"email\",{\"1\":{\"176\":5}}],[\"empgender\",{\"1\":{\"76\":1}}],[\"empgender==\",{\"1\":{\"76\":1}}],[\"empage\",{\"1\":{\"76\":2}}],[\"empsalarykey\",{\"1\":{\"64\":1}}],[\"empsalary\",{\"1\":{\"62\":1,\"63\":3,\"65\":1,\"67\":1,\"70\":1,\"71\":1,\"72\":1,\"74\":2,\"75\":3,\"76\":2,\"77\":1}}],[\"empname\",{\"1\":{\"62\":1,\"65\":1,\"67\":1,\"70\":1,\"71\":1,\"72\":1,\"74\":2,\"75\":3,\"76\":2,\"77\":2}}],[\"emp\",{\"1\":{\"62\":5,\"63\":3,\"64\":3,\"65\":3,\"67\":8,\"68\":1,\"69\":8,\"70\":5,\"71\":4,\"72\":3,\"74\":6,\"75\":11,\"76\":10,\"77\":4,\"79\":6,\"86\":1,\"114\":1,\"119\":1,\"120\":1,\"122\":6,\"123\":6,\"124\":4,\"125\":4,\"126\":13,\"172\":4}}],[\"empid=2\",{\"1\":{\"172\":2}}],[\"empidkey\",{\"1\":{\"64\":1}}],[\"empid\",{\"1\":{\"62\":3,\"63\":3,\"67\":3,\"70\":3,\"71\":1,\"72\":1,\"75\":1}}],[\"employeelist\",{\"1\":{\"71\":2}}],[\"employeemapper\",{\"1\":{\"71\":4}}],[\"employee\",{\"1\":{\"62\":2,\"65\":2,\"67\":2,\"70\":2,\"71\":5,\"72\":2,\"74\":3,\"75\":2,\"76\":3,\"77\":3,\"86\":1,\"137\":8}}],[\"editemp\",{\"1\":{\"172\":1}}],[\"ee\",{\"1\":{\"133\":1}}],[\"else\",{\"1\":{\"117\":2}}],[\"errormsg\",{\"1\":{\"176\":2}}],[\"errors\",{\"1\":{\"166\":1}}],[\"error\",{\"1\":{\"55\":1}}],[\"eat\",{\"1\":{\"50\":1}}],[\"e\",{\"1\":{\"32\":1,\"55\":1,\"59\":5,\"126\":3,\"148\":1,\"174\":4}}],[\"excludepathpatterns\",{\"1\":{\"175\":2}}],[\"exceptionhandler\",{\"1\":{\"174\":3,\"175\":1}}],[\"exceptionininitializererror\",{\"1\":{\"59\":1}}],[\"exception\",{\"1\":{\"55\":3,\"59\":1,\"87\":1,\"140\":1,\"174\":2,\"175\":4}}],[\"ex\",{\"1\":{\"175\":1}}],[\"execution\",{\"1\":{\"147\":1,\"148\":9,\"149\":1}}],[\"expr\",{\"1\":{\"116\":1,\"117\":1}}],[\"exponent\",{\"1\":{\"31\":1}}],[\"exists\",{\"1\":{\"98\":2,\"99\":1}}],[\"exit\",{\"1\":{\"30\":2}}],[\"extends\",{\"1\":{\"41\":1,\"42\":1,\"44\":1,\"51\":1,\"156\":1}}],[\"equals的区别\",{\"0\":{\"45\":1}}],[\"equalsignorecase\",{\"1\":{\"28\":1}}],[\"equals\",{\"1\":{\"27\":1,\"28\":1,\"45\":7}}],[\"encoding\",{\"1\":{\"165\":4}}],[\"encoding=\",{\"1\":{\"58\":2,\"86\":1,\"134\":1,\"137\":3,\"143\":1}}],[\"enablewebmvc\",{\"1\":{\"156\":1,\"175\":1}}],[\"enablescheduling\",{\"1\":{\"144\":1}}],[\"enablesubpackages\",{\"1\":{\"86\":3}}],[\"enableasync\",{\"1\":{\"144\":1}}],[\"enableaspectjautoproxy\",{\"1\":{\"144\":1,\"147\":2}}],[\"enabletransactionmanagement\",{\"1\":{\"144\":1,\"152\":1}}],[\"entry>\",{\"1\":{\"137\":4}}],[\"entrydate\",{\"1\":{\"126\":3}}],[\"entity\",{\"1\":{\"62\":1,\"67\":1,\"70\":1,\"71\":1,\"76\":1,\"77\":1}}],[\"environments\",{\"1\":{\"58\":1}}],[\"environment>\",{\"1\":{\"58\":1}}],[\"end\",{\"1\":{\"28\":4,\"117\":2}}],[\"endindex\",{\"1\":{\"28\":1}}],[\"enum和普通类一样可以实现接口\",{\"1\":{\"53\":1}}],[\"enum枚举类\",{\"1\":{\"53\":1}}],[\"enum\",{\"1\":{\"17\":1,\"53\":1,\"159\":1}}],[\"en\",{\"1\":{\"11\":1,\"26\":1,\"58\":2,\"86\":1,\"165\":2}}],[\"所以\",{\"1\":{\"155\":1}}],[\"所以封装到map中\",{\"1\":{\"64\":1}}],[\"所以优先级最低\",{\"1\":{\"48\":1}}],[\"所有异常都会触发此方法\",{\"1\":{\"174\":1}}],[\"所有请求都经过它的处理和分发\",{\"1\":{\"155\":1}}],[\"所有权限\",{\"1\":{\"112\":1}}],[\"所有条件都不满足\",{\"1\":{\"75\":1}}],[\"所有条件都满足\",{\"1\":{\"75\":1}}],[\"所有的异常都有一个共同的祖先\",{\"1\":{\"55\":1}}],[\"所有整型包装类对象之间值的比较\",{\"1\":{\"27\":1}}],[\"所解析\",{\"1\":{\"13\":1}}],[\"对user表添加外键emp\",{\"1\":{\"120\":1}}],[\"对一次会话中的重复dql语句会使用缓存\",{\"1\":{\"84\":1}}],[\"对象来操作\",{\"1\":{\"163\":1}}],[\"对象的属性来接收请求参数\",{\"1\":{\"161\":1}}],[\"对象的实例化和初始化\",{\"1\":{\"133\":1}}],[\"对象等\",{\"1\":{\"160\":1}}],[\"对象类型注入\",{\"1\":{\"137\":1}}],[\"对象没有任何区别\",{\"1\":{\"133\":1}}],[\"对象称为\",{\"1\":{\"133\":1}}],[\"对象插入到\",{\"1\":{\"72\":1}}],[\"对象映射到数据库表中⼀⾏记录\",{\"1\":{\"57\":1}}],[\"对象关系映射\",{\"1\":{\"57\":1}}],[\"对象关系映射orm\",{\"1\":{\"57\":1}}],[\"对象\",{\"1\":{\"57\":3,\"163\":2}}],[\"对象强转为不是子类对象实例抛出的异常\",{\"1\":{\"55\":1}}],[\"对象名\",{\"1\":{\"53\":1}}],[\"对象表示的毫秒数\",{\"1\":{\"32\":1}}],[\"对象属性中很少会使用基本类型来定义变量\",{\"1\":{\"27\":1}}],[\"对于字符串类型的属性进行校验\",{\"1\":{\"176\":1}}],[\"对于\",{\"1\":{\"176\":1}}],[\"对于异常的处理\",{\"1\":{\"174\":1}}],[\"对于包装数据类型来说\",{\"1\":{\"27\":1}}],[\"对于基本数据类型\",{\"1\":{\"27\":1}}],[\"虚拟机\",{\"1\":{\"55\":1}}],[\"虚拟机的堆中\",{\"1\":{\"27\":1}}],[\"虚拟机栈中的局部变量表中\",{\"1\":{\"27\":1}}],[\"存储过程以及高级映射\",{\"1\":{\"57\":1}}],[\"存储方式\",{\"1\":{\"27\":1}}],[\"存放在\",{\"1\":{\"27\":1}}],[\"未被\",{\"1\":{\"27\":1}}],[\"我们可以使用集合进行接收\",{\"1\":{\"161\":1}}],[\"我们可以选择不同的参数类型\",{\"1\":{\"160\":1}}],[\"我们可以方便地插入\",{\"1\":{\"72\":1}}],[\"我们需要进行ioc配置使其加入ioc容器方可生效\",{\"1\":{\"155\":3}}],[\"我们需要使用web\",{\"1\":{\"155\":1}}],[\"我们需要做的是\",{\"1\":{\"66\":1}}],[\"我们直接使用对象中的\",{\"1\":{\"72\":1}}],[\"我们将由\",{\"1\":{\"133\":1}}],[\"我们将\",{\"1\":{\"72\":1}}],[\"我们使用\",{\"1\":{\"72\":1}}],[\"我们在其他地方比如方法参数\",{\"1\":{\"27\":1}}],[\"我的随笔\",{\"0\":{\"1\":1}}],[\"除非需要特别指定\",{\"1\":{\"145\":1}}],[\"除非它自己本身也是抽象类\",{\"1\":{\"50\":1}}],[\"除了基本的增删改查之外还有复杂的增删改查\",{\"1\":{\"86\":1}}],[\"除了定义一些常量和局部变量之外\",{\"1\":{\"27\":1}}],[\"除法运算\",{\"1\":{\"31\":1}}],[\"除以\",{\"1\":{\"14\":1}}],[\"常见的做法是\",{\"1\":{\"160\":1}}],[\"常见命令\",{\"0\":{\"91\":1}}],[\"常用注解\",{\"0\":{\"144\":1}}],[\"常用操作符\",{\"1\":{\"126\":4}}],[\"常用约束\",{\"0\":{\"119\":1}}],[\"常用math方法\",{\"1\":{\"31\":1}}],[\"常用方法\",{\"1\":{\"29\":1,\"30\":1,\"31\":3,\"32\":2,\"53\":1}}],[\"常用类\",{\"0\":{\"25\":1,\"26\":1}}],[\"常量2\",{\"1\":{\"17\":1}}],[\"常量1\",{\"1\":{\"17\":1}}],[\"tinytext\",{\"1\":{\"95\":1}}],[\"tinyblob\",{\"1\":{\"95\":1}}],[\"tineint\",{\"1\":{\"94\":1}}],[\"timeout=\",{\"1\":{\"152\":1}}],[\"timeout\",{\"1\":{\"152\":1}}],[\"timestamp\",{\"1\":{\"96\":1}}],[\"time\",{\"1\":{\"96\":1}}],[\"timetest\",{\"1\":{\"32\":1}}],[\"time类\",{\"1\":{\"32\":1}}],[\"tb\",{\"1\":{\"88\":1}}],[\"table\",{\"1\":{\"99\":10,\"119\":1,\"120\":7}}],[\"tables\",{\"1\":{\"99\":1}}],[\"tablename=\",{\"1\":{\"86\":1}}],[\"targetproject=\",{\"1\":{\"86\":3}}],[\"targetpackage=\",{\"1\":{\"86\":3}}],[\"targetruntime=\",{\"1\":{\"86\":1}}],[\"targetruntime有两个值\",{\"1\":{\"86\":1}}],[\"tan\",{\"1\":{\"31\":1}}],[\"type\",{\"1\":{\"116\":1}}],[\"typealiases>\",{\"1\":{\"67\":2}}],[\"type=\",{\"1\":{\"58\":2,\"67\":3,\"81\":3,\"82\":2,\"86\":2}}],[\"txt\",{\"1\":{\"55\":1}}],[\"then\",{\"1\":{\"117\":2}}],[\"throw\",{\"1\":{\"59\":2}}],[\"throws后面也可以是异常列表\",{\"1\":{\"55\":1}}],[\"throws\",{\"1\":{\"55\":2,\"58\":1,\"59\":1,\"87\":1,\"137\":1,\"139\":2,\"140\":1,\"149\":4,\"174\":1,\"175\":3}}],[\"throwable\",{\"1\":{\"55\":2,\"149\":4}}],[\"this访问本类的属性和方法\",{\"1\":{\"38\":1}}],[\"this就代表哪个对象\",{\"1\":{\"38\":1}}],[\"this代表当前对象\",{\"1\":{\"38\":1}}],[\"this不能在类定义的外部使用\",{\"1\":{\"38\":1}}],[\"this可以用来访问本类的属性\",{\"1\":{\"38\":1}}],[\"this关键字\",{\"0\":{\"38\":1}}],[\"this\",{\"1\":{\"37\":2,\"38\":1,\"40\":2,\"41\":1,\"45\":1,\"50\":1,\"52\":3,\"53\":2,\"173\":3}}],[\"t2\",{\"1\":{\"32\":2,\"126\":1}}],[\"t1\",{\"1\":{\"32\":2,\"126\":1}}],[\"teachertwo\",{\"1\":{\"137\":1}}],[\"teacherone\",{\"1\":{\"137\":1}}],[\"teachermap\",{\"1\":{\"137\":5}}],[\"testautowirebyxml\",{\"1\":{\"141\":1}}],[\"testuserfactorybean\",{\"1\":{\"140\":1}}],[\"testlife\",{\"1\":{\"139\":1}}],[\"testdatasource\",{\"1\":{\"137\":1}}],[\"testpagehelper\",{\"1\":{\"87\":1}}],[\"test=\",{\"1\":{\"74\":2,\"75\":2,\"76\":4,\"77\":2}}],[\"testselectall\",{\"1\":{\"71\":1}}],[\"test\",{\"1\":{\"38\":1,\"40\":1,\"45\":1,\"48\":1,\"52\":5,\"71\":1,\"74\":2,\"87\":1,\"134\":1,\"137\":1,\"139\":1,\"140\":1,\"141\":1}}],[\"text\",{\"1\":{\"32\":1,\"95\":1,\"165\":1}}],[\"temporalamount\",{\"1\":{\"32\":1}}],[\"t\",{\"1\":{\"32\":2,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"67\":1,\"68\":1,\"69\":3,\"70\":1,\"71\":1,\"72\":1,\"74\":1,\"75\":2,\"76\":1,\"77\":1,\"78\":2,\"79\":1,\"81\":8,\"82\":6,\"86\":1,\"87\":1,\"88\":3,\"117\":1}}],[\"trace\",{\"1\":{\"159\":1}}],[\"transfer\",{\"1\":{\"152\":2,\"171\":1}}],[\"transactional给方法开启事务\",{\"1\":{\"152\":1}}],[\"transactional\",{\"1\":{\"152\":3,\"153\":5}}],[\"transactional标识的类上\",{\"1\":{\"152\":1}}],[\"transactional标识在方法上\",{\"1\":{\"152\":1}}],[\"transaction\",{\"1\":{\"129\":1,\"131\":2,\"151\":2}}],[\"truncate\",{\"1\":{\"99\":1}}],[\"true放行\",{\"1\":{\"175\":1}}],[\"true\",{\"1\":{\"15\":1,\"45\":1,\"58\":2,\"70\":1,\"72\":1,\"74\":1,\"81\":1,\"86\":6,\"175\":2,\"176\":1}}],[\"try\",{\"1\":{\"55\":6,\"59\":2,\"174\":1}}],[\"trimstrings\",{\"1\":{\"86\":1}}],[\"trim>\",{\"1\":{\"76\":1}}],[\"trim标签\",{\"0\":{\"76\":1}}],[\"trim\",{\"1\":{\"28\":1,\"114\":1}}],[\"tow\",{\"1\":{\"175\":3}}],[\"tomcat\",{\"1\":{\"156\":1}}],[\"tom\",{\"1\":{\"126\":5}}],[\"to\",{\"1\":{\"99\":1,\"112\":1}}],[\"touppercase\",{\"1\":{\"28\":1}}],[\"tolowercase\",{\"1\":{\"28\":1}}],[\"tochararray\",{\"1\":{\"28\":2}}],[\"tostring\",{\"1\":{\"24\":2,\"28\":1,\"29\":1,\"149\":2,\"173\":1,\"176\":1}}],[\"不为null\",{\"1\":{\"176\":1}}],[\"不需要额外的协议和中间件\",{\"1\":{\"171\":1}}],[\"不使用任何通配符\",{\"1\":{\"158\":1}}],[\"不找视图解析器\",{\"1\":{\"156\":1}}],[\"不返回页面\",{\"1\":{\"155\":1}}],[\"不描述实现类\",{\"1\":{\"148\":1}}],[\"不在指定的集合范围之内\",{\"1\":{\"126\":1}}],[\"不足的前面补0\",{\"1\":{\"114\":1}}],[\"不满足where条件的不参与分组\",{\"1\":{\"106\":1}}],[\"不等于\",{\"1\":{\"104\":1}}],[\"不超过255字符的二进制数据\",{\"1\":{\"95\":1}}],[\"不管是对哪张表的操作都会清空缓存\",{\"1\":{\"83\":1}}],[\"不再查询数据库\",{\"1\":{\"83\":1}}],[\"不可以\",{\"1\":{\"158\":1}}],[\"不可以访问数据库表的字段\",{\"1\":{\"74\":1}}],[\"不可重复读\",{\"1\":{\"130\":1,\"131\":1,\"153\":1}}],[\"不可加\",{\"1\":{\"36\":1}}],[\"不是必须的\",{\"1\":{\"55\":1}}],[\"不推荐使用\",{\"1\":{\"54\":1}}],[\"不会被认为是空字符串\",{\"1\":{\"176\":1}}],[\"不会触发handlerexception方法\",{\"1\":{\"174\":1}}],[\"不会结束在中间某个环节\",{\"1\":{\"151\":1}}],[\"不会进入\",{\"1\":{\"55\":1}}],[\"不会进行类加载就可以直接访问num\",{\"1\":{\"49\":1}}],[\"不会导致类加载\",{\"1\":{\"49\":1}}],[\"不能防止sql注入\",{\"1\":{\"61\":1}}],[\"不能通过接口类型获取对象实例\",{\"1\":{\"136\":1}}],[\"不能通过\",{\"1\":{\"55\":1}}],[\"不能直接访问非静态成员\",{\"1\":{\"52\":1}}],[\"不能添加访问修饰符\",{\"1\":{\"52\":1}}],[\"不能修饰构造器\",{\"1\":{\"49\":1}}],[\"不能在构造器中赋值\",{\"1\":{\"49\":1}}],[\"不能强转父类对象\",{\"1\":{\"44\":1}}],[\"不能改变数组的值\",{\"1\":{\"24\":1}}],[\"不同隔离级别对应不同的干扰程度\",{\"1\":{\"153\":1}}],[\"不同作用域的全局变量和局部变量可以重名\",{\"1\":{\"36\":1}}],[\"不同包\",{\"1\":{\"35\":1}}],[\"不包含\",{\"1\":{\"28\":1}}],[\"不区分大小写\",{\"1\":{\"28\":1}}],[\"不溢出的情况下\",{\"1\":{\"14\":1}}],[\"只不过异常处理handler方法要映射异常\",{\"1\":{\"174\":1}}],[\"只要形参数名和类型与传递参数相同\",{\"1\":{\"161\":2}}],[\"只要有一个满足就返回true\",{\"1\":{\"14\":1}}],[\"只要有一个不满足就是false\",{\"1\":{\"14\":1}}],[\"只读事务\",{\"1\":{\"152\":1}}],[\"只有基本的增删改查\",{\"1\":{\"86\":1}}],[\"只需要在对于的mapper\",{\"1\":{\"85\":1}}],[\"只使用类的静态成员时\",{\"1\":{\"48\":1}}],[\"只能在类定义中的方法中使用\",{\"1\":{\"38\":1}}],[\"只能在本类对应的方法中使用\",{\"1\":{\"36\":1}}],[\"只能遍历数组\",{\"1\":{\"24\":1}}],[\"通知类\",{\"1\":{\"149\":1}}],[\"通知类型\",{\"0\":{\"149\":1}}],[\"通配快速描述\",{\"1\":{\"148\":1}}],[\"通配符\",{\"1\":{\"148\":1}}],[\"通过在\",{\"1\":{\"176\":1}}],[\"通过配置等方式进行统一的管理和处理\",{\"1\":{\"174\":1}}],[\"通过遵循\",{\"1\":{\"171\":1}}],[\"通过返回值可以实现快速转发\",{\"1\":{\"169\":1}}],[\"通过return即可返回数据\",{\"1\":{\"168\":1}}],[\"通过resulttype来指定返回值类型\",{\"1\":{\"68\":1}}],[\"通过使用通配符\",{\"1\":{\"158\":1}}],[\"通过外部properties注入简单类型\",{\"1\":{\"145\":1}}],[\"通过外键来关联\",{\"1\":{\"121\":1}}],[\"通过\",{\"1\":{\"72\":1,\"133\":1,\"161\":1}}],[\"通过给数据库表字段加别名\",{\"1\":{\"70\":1}}],[\"通过反射在实体类对象中调用这个方法\",{\"1\":{\"65\":1}}],[\"通过java程序动态生成数据库表\",{\"1\":{\"61\":1}}],[\"通过下标获取\",{\"1\":{\"24\":1}}],[\"通常不适用异常作为匹配规则\",{\"1\":{\"148\":1}}],[\"通常不会采用$\",{\"1\":{\"61\":1}}],[\"通常\",{\"1\":{\"148\":1}}],[\"通常还是使用和接口方法参数同名\",{\"1\":{\"62\":1}}],[\"通常用于整合第三方bean\",{\"1\":{\"140\":1}}],[\"通常用于释放资源代码\",{\"1\":{\"55\":1}}],[\"通常用于生成\",{\"1\":{\"13\":1}}],[\"通常用于解释一段代码的作用\",{\"1\":{\"13\":1}}],[\"通常用于解释方法内某单行代码的作用\",{\"1\":{\"13\":1}}],[\"norollbackforclassname\",{\"1\":{\"152\":1}}],[\"norollbackfor=\",{\"1\":{\"152\":1}}],[\"norollbackfor\",{\"1\":{\"152\":1}}],[\"no\",{\"1\":{\"120\":1}}],[\"notblank\",{\"1\":{\"176\":5}}],[\"notempty\",{\"1\":{\"176\":5}}],[\"notnull\",{\"1\":{\"176\":5}}],[\"not\",{\"1\":{\"98\":1,\"104\":1,\"119\":2,\"126\":3}}],[\"now\",{\"1\":{\"32\":5,\"116\":1}}],[\"native\",{\"1\":{\"111\":1}}],[\"navigatepages\",{\"1\":{\"87\":2}}],[\"name不为空\",{\"1\":{\"119\":1}}],[\"namespace=\",{\"1\":{\"58\":1,\"81\":4,\"82\":3}}],[\"namespace等于mapper接口类的全限定名\",{\"1\":{\"58\":1}}],[\"name=xx\",{\"1\":{\"161\":2}}],[\"name=john\",{\"1\":{\"160\":2}}],[\"name=\",{\"1\":{\"58\":6,\"67\":1,\"70\":1,\"74\":1,\"75\":3,\"76\":1,\"77\":1,\"81\":1,\"86\":6,\"137\":23,\"139\":1,\"173\":1}}],[\"name+age\",{\"1\":{\"161\":2}}],[\"name+\",{\"1\":{\"52\":1}}],[\"name\",{\"1\":{\"30\":1,\"37\":4,\"40\":5,\"50\":4,\"52\":3,\"53\":5,\"62\":1,\"65\":1,\"67\":2,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"74\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"99\":1,\"101\":1,\"104\":1,\"119\":1,\"122\":4,\"123\":1,\"124\":4,\"126\":9,\"137\":8,\"145\":4,\"161\":12,\"162\":2,\"163\":2,\"173\":11,\"176\":1}}],[\"n1\",{\"1\":{\"52\":2}}],[\"n\",{\"1\":{\"31\":2,\"114\":2}}],[\"nextlong\",{\"1\":{\"31\":1}}],[\"nextfloat\",{\"1\":{\"31\":1}}],[\"nextbytes\",{\"1\":{\"31\":1}}],[\"nextboolean\",{\"1\":{\"30\":1,\"31\":1}}],[\"nextdouble\",{\"1\":{\"30\":1,\"31\":1}}],[\"nextint\",{\"1\":{\"30\":1,\"31\":2}}],[\"next\",{\"1\":{\"30\":2}}],[\"new\",{\"1\":{\"23\":5,\"28\":3,\"29\":1,\"30\":1,\"32\":2,\"44\":1,\"48\":1,\"52\":5,\"55\":1,\"58\":1,\"59\":2,\"87\":1,\"133\":1,\"134\":1,\"136\":2,\"137\":3,\"139\":1,\"140\":2,\"141\":1,\"143\":1,\"145\":4,\"152\":1,\"156\":3,\"175\":4}}],[\"num=\",{\"1\":{\"88\":1}}],[\"num\",{\"1\":{\"49\":7,\"78\":1}}],[\"numberformatexception\",{\"1\":{\"55\":1}}],[\"numbers\",{\"1\":{\"36\":1}}],[\"number\",{\"1\":{\"24\":2}}],[\"null值处理用null标签\",{\"1\":{\"137\":1}}],[\"null值不参加所有聚合函数运算\",{\"1\":{\"105\":1}}],[\"nullpointerexception\",{\"1\":{\"55\":1,\"174\":2}}],[\"null\",{\"1\":{\"23\":1,\"27\":2,\"59\":2,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"88\":1,\"104\":1,\"119\":2,\"120\":4,\"166\":1,\"174\":2,\"176\":6}}],[\"包名书写尽量不适用\",{\"1\":{\"148\":1}}],[\"包名\",{\"1\":{\"148\":1}}],[\"包中的\",{\"1\":{\"55\":1}}],[\"包含私有的\",{\"1\":{\"52\":1}}],[\"包括多部分文件\",{\"1\":{\"166\":1}}],[\"包括上面四种通知对应的所有位置\",{\"1\":{\"149\":1}}],[\"包括私有的\",{\"1\":{\"52\":1}}],[\"包括基本类型和引用类型\",{\"1\":{\"23\":1}}],[\"包装类型不为null\",{\"1\":{\"176\":1}}],[\"包装类型占用空间较大\",{\"1\":{\"27\":1}}],[\"包装类型属于对象类型\",{\"1\":{\"27\":1}}],[\"包装类型可用于泛型\",{\"1\":{\"27\":1}}],[\"包装类\",{\"0\":{\"27\":1},\"1\":{\"15\":1,\"27\":1,\"28\":2}}],[\"一定执行\",{\"1\":{\"175\":1}}],[\"一名多值\",{\"1\":{\"161\":2}}],[\"一致性\",{\"1\":{\"128\":1,\"151\":1}}],[\"一对一\",{\"1\":{\"121\":1}}],[\"一对多\",{\"0\":{\"82\":1},\"1\":{\"121\":1}}],[\"一级缓存的数据才会被写到二级缓存中\",{\"1\":{\"85\":1}}],[\"一级缓存\",{\"0\":{\"84\":1}}],[\"一级缓存和二级缓存都清空\",{\"1\":{\"83\":1}}],[\"一般分为两种方式\",{\"1\":{\"174\":1}}],[\"一般不写\",{\"1\":{\"145\":1}}],[\"一般中小型和大型网站的开发都选择\",{\"1\":{\"90\":1}}],[\"一般设置全局懒加载\",{\"1\":{\"81\":1}}],[\"一般会选择线程终止\",{\"1\":{\"55\":1}}],[\"一般用xx\",{\"1\":{\"49\":1}}],[\"一个事务与其他事务隔离的程度称为隔离级别\",{\"1\":{\"153\":1}}],[\"一个事务\",{\"1\":{\"151\":1}}],[\"一个事务查询数据时没有数据\",{\"1\":{\"130\":1}}],[\"一个事务先后读取同一条数据\",{\"1\":{\"130\":1}}],[\"一个事务读到另外一个事务还没有提交的数据\",{\"1\":{\"130\":1}}],[\"一个特定的适用场景是\",{\"1\":{\"61\":1}}],[\"一个类可以同时实现多个接口\",{\"1\":{\"51\":1}}],[\"一个类可以有多个构造器\",{\"1\":{\"37\":1}}],[\"一个普通类实现接口\",{\"1\":{\"51\":1}}],[\"一个对象的编译类型和运行类型可以不一致\",{\"1\":{\"44\":1}}],[\"一个形参列表只能放一个可变参数\",{\"1\":{\"36\":1}}],[\"一个零零后\",{\"1\":{\"0\":1}}],[\"一维数组\",{\"1\":{\"23\":1}}],[\"数值函数\",{\"0\":{\"115\":1}}],[\"数值类型和布尔类型等简单数据类型\",{\"1\":{\"160\":1}}],[\"数值类型\",{\"0\":{\"94\":1},\"1\":{\"94\":1}}],[\"数据合法性校验提供的标准框架\",{\"1\":{\"176\":1}}],[\"数据结构\",{\"1\":{\"173\":1}}],[\"数据中包含的属性\",{\"1\":{\"163\":1}}],[\"数据\",{\"1\":{\"163\":1}}],[\"数据的\",{\"1\":{\"163\":1}}],[\"数据的示例\",{\"1\":{\"163\":1}}],[\"数据转换为\",{\"1\":{\"163\":1}}],[\"数据时\",{\"1\":{\"163\":1}}],[\"数据一致性就越好\",{\"1\":{\"153\":1}}],[\"数据所处的状态要么是另一事务修改它之前的状态\",{\"1\":{\"151\":1}}],[\"数据层\",{\"1\":{\"143\":1}}],[\"数据源\",{\"1\":{\"137\":1}}],[\"数据已经存在\",{\"1\":{\"130\":1}}],[\"数据控制语言\",{\"1\":{\"92\":1}}],[\"数据查询语言\",{\"1\":{\"92\":1}}],[\"数据操作语言\",{\"1\":{\"92\":1}}],[\"数据库系统必须具有隔离并发运行各个事务的能力\",{\"1\":{\"153\":1}}],[\"数据库系统提供的隔离机制\",{\"1\":{\"128\":1}}],[\"数据库还能恢复到事务成功结束时的状态\",{\"1\":{\"151\":1}}],[\"数据库事务\",{\"1\":{\"151\":1}}],[\"数据库名\",{\"1\":{\"98\":1}}],[\"数据库名称\",{\"1\":{\"98\":3}}],[\"数据库\",{\"1\":{\"92\":1,\"112\":2}}],[\"数据定义语言\",{\"1\":{\"92\":1}}],[\"数据输出总体上有两种形式\",{\"1\":{\"66\":1}}],[\"数据类型\",{\"0\":{\"15\":1,\"93\":1},\"1\":{\"160\":1}}],[\"数字格式不正常异常\",{\"1\":{\"55\":1}}],[\"数学运算异常\",{\"1\":{\"55\":1}}],[\"数组类型注入\",{\"1\":{\"137\":1}}],[\"数组越界异常\",{\"1\":{\"55\":1}}],[\"数组中\",{\"1\":{\"31\":1}}],[\"数组中的元素可以是任何数据类型\",{\"1\":{\"23\":1}}],[\"数组复制\",{\"1\":{\"29\":1,\"30\":1}}],[\"数组的遍历\",{\"0\":{\"24\":1}}],[\"数组的定义\",{\"0\":{\"23\":1}}],[\"数组型数据属于对象\",{\"1\":{\"23\":1}}],[\"数组属于引用类型\",{\"1\":{\"23\":1}}],[\"数组创建后没有赋值的会自动赋默认值\",{\"1\":{\"23\":1}}],[\"数组\",{\"0\":{\"22\":1}}],[\"表现层\",{\"1\":{\"143\":1}}],[\"表子查询\",{\"1\":{\"126\":2}}],[\"表b\",{\"1\":{\"125\":1}}],[\"表a\",{\"1\":{\"124\":2,\"125\":1}}],[\"表2\",{\"1\":{\"122\":2,\"123\":2}}],[\"表1\",{\"1\":{\"122\":2,\"123\":2}}],[\"表\",{\"1\":{\"92\":1,\"112\":2}}],[\"表名列表\",{\"1\":{\"109\":1}}],[\"表名\",{\"1\":{\"99\":10,\"101\":6,\"103\":4,\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"112\":2,\"120\":3}}],[\"表名和对应的实体类名\",{\"1\":{\"86\":1}}],[\"表名部分需要java程序通过参数传入\",{\"1\":{\"61\":1}}],[\"表中时\",{\"1\":{\"72\":1}}],[\"表示方法的返回值是要直接返回给客户端的数据\",{\"1\":{\"170\":1}}],[\"表示对原始操作的调用\",{\"1\":{\"149\":3}}],[\"表示添加aop\",{\"1\":{\"147\":1}}],[\"表示当前返回值是一个bean\",{\"1\":{\"145\":1}}],[\"表示可变参数\",{\"1\":{\"36\":1}}],[\"表示退出程序\",{\"1\":{\"21\":1}}],[\"表达式类型应与常量类型保持一致\",{\"1\":{\"17\":1}}],[\"表达式\",{\"1\":{\"17\":1}}],[\"50\",{\"1\":{\"99\":1,\"125\":2}}],[\"500毫秒\",{\"1\":{\"32\":1}}],[\"59\",{\"1\":{\"96\":6}}],[\"5\",{\"0\":{\"21\":1,\"31\":1,\"44\":1,\"50\":1,\"65\":1,\"66\":1,\"71\":1,\"78\":1,\"97\":1,\"107\":1,\"126\":1,\"140\":1,\"146\":1,\"162\":1,\"171\":1},\"1\":{\"23\":9,\"29\":1,\"58\":1,\"87\":1,\"98\":1,\"99\":1,\"101\":1,\"109\":1,\"114\":1,\"149\":1}}],[\"用字符串pad对str左边进行填充\",{\"1\":{\"114\":2}}],[\"用户保存业务\",{\"1\":{\"173\":1}}],[\"用户模块的控制器\",{\"1\":{\"173\":1}}],[\"用户controller\",{\"1\":{\"173\":1}}],[\"用户实体类\",{\"1\":{\"173\":1}}],[\"用户删除\",{\"1\":{\"173\":1}}],[\"用户更新业务\",{\"1\":{\"173\":1}}],[\"用户更新\",{\"1\":{\"173\":1}}],[\"用户详情业务\",{\"1\":{\"173\":1}}],[\"用户详情\",{\"1\":{\"173\":1}}],[\"用户添加\",{\"1\":{\"173\":1}}],[\"用户数据分页展示功能\",{\"1\":{\"173\":1}}],[\"用户名\",{\"1\":{\"111\":4,\"112\":3}}],[\"用户管理\",{\"0\":{\"111\":1}}],[\"用户表\",{\"1\":{\"99\":1}}],[\"用户定义了构造方法后\",{\"1\":{\"37\":1}}],[\"用来接收参数\",{\"1\":{\"155\":1}}],[\"用来做aop\",{\"1\":{\"147\":1}}],[\"用来让两张表的数据之间建立连接\",{\"1\":{\"119\":1}}],[\"用来创建数据库用户\",{\"1\":{\"92\":1}}],[\"用来查询数据库中表的记录\",{\"1\":{\"92\":1}}],[\"用来对数据库表中的数据进行增删改\",{\"1\":{\"92\":1}}],[\"用来定义数据库对象\",{\"1\":{\"92\":1}}],[\"用逗号分割\",{\"1\":{\"55\":1}}],[\"用逗号隔开\",{\"1\":{\"18\":2}}],[\"用\",{\"1\":{\"48\":1}}],[\"用于设计网络应用程序和服务之间的通信\",{\"1\":{\"171\":1}}],[\"用于访问cookie\",{\"1\":{\"166\":1}}],[\"用于访问请求标头\",{\"1\":{\"166\":1}}],[\"用于访问\",{\"1\":{\"166\":2}}],[\"用于访问由\",{\"1\":{\"166\":2}}],[\"用于更细粒度地映射请求路径和处理方法\",{\"1\":{\"158\":1}}],[\"用于映射整个控制器的通用请求路径\",{\"1\":{\"158\":1}}],[\"用于查找路径对应的handler\",{\"1\":{\"155\":1}}],[\"用于简化包名与参数的书写\",{\"1\":{\"148\":1}}],[\"用于将方法返回的对象序列化为\",{\"1\":{\"170\":1}}],[\"用于将控制层的类标识为\",{\"1\":{\"144\":1}}],[\"用于将业务层的类标识为\",{\"1\":{\"144\":1}}],[\"用于表示被标记的数据已经过时\",{\"1\":{\"54\":1}}],[\"用于检测被标记的方法为有效的重写方法\",{\"1\":{\"54\":1}}],[\"用于比较值是否相等\",{\"1\":{\"45\":1}}],[\"用于判断引用类型\",{\"1\":{\"45\":1}}],[\"用于终止某个语句块的执行\",{\"1\":{\"19\":1}}],[\"用途\",{\"1\":{\"27\":1}}],[\"循环初始值可以有多个\",{\"1\":{\"18\":1}}],[\"循环条件\",{\"1\":{\"18\":1}}],[\"但它通常被称为\",{\"1\":{\"155\":1}}],[\"但性能十分低下\",{\"1\":{\"153\":1}}],[\"但并发性越弱\",{\"1\":{\"153\":1}}],[\"但不常用\",{\"1\":{\"138\":1}}],[\"但不能调用子类的特有成员\",{\"1\":{\"44\":1}}],[\"但不能访问私有属性和方法\",{\"1\":{\"43\":1}}],[\"但不能混用\",{\"1\":{\"23\":1}}],[\"但插入数据时\",{\"1\":{\"130\":1}}],[\"但两次读取的数据不同\",{\"1\":{\"130\":1}}],[\"但两边都会执行\",{\"1\":{\"14\":1}}],[\"但是其校验规则和用法有所不同\",{\"1\":{\"176\":1}}],[\"但是对于其他类型的属性\",{\"1\":{\"176\":1}}],[\"但是它们的用法和校验规则有所不同\",{\"1\":{\"176\":1}}],[\"但是如果有具体的异常处理handler\",{\"1\":{\"174\":1}}],[\"但是需要使用\",{\"1\":{\"161\":1}}],[\"但是需要注意\",{\"1\":{\"155\":1}}],[\"但是\",{\"1\":{\"160\":3}}],[\"但是没有对应的实体类类型可以使用\",{\"1\":{\"64\":1}}],[\"但是没有必要\",{\"1\":{\"62\":1}}],[\"但是含有\",{\"1\":{\"49\":1}}],[\"但形参列表不同\",{\"1\":{\"36\":1}}],[\"但类型要一样\",{\"1\":{\"18\":1}}],[\"但分号不能省略\",{\"1\":{\"18\":1}}],[\"+ret\",{\"1\":{\"149\":1}}],[\"+age\",{\"1\":{\"52\":1}}],[\"+0800\",{\"1\":{\"32\":1}}],[\"+\",{\"1\":{\"18\":1,\"28\":1,\"52\":1,\"71\":1,\"148\":1,\"161\":12,\"162\":3,\"166\":1,\"173\":19,\"174\":1}}],[\"++i\",{\"1\":{\"14\":1}}],[\"ok\",{\"1\":{\"173\":5}}],[\"options\",{\"1\":{\"159\":1}}],[\"open=\",{\"1\":{\"78\":1}}],[\"open\",{\"1\":{\"78\":1}}],[\"opensession\",{\"1\":{\"58\":1,\"59\":3}}],[\"overwrite>\",{\"1\":{\"86\":1}}],[\"override\",{\"1\":{\"29\":1,\"42\":1,\"45\":2,\"52\":2,\"54\":1,\"139\":2,\"140\":2,\"173\":1,\"175\":7}}],[\"of\",{\"1\":{\"133\":1}}],[\"oftype=\",{\"1\":{\"82\":1}}],[\"ofpattern\",{\"1\":{\"32\":2}}],[\"one\",{\"1\":{\"175\":2}}],[\"on\",{\"1\":{\"81\":2,\"112\":2,\"120\":4,\"122\":2,\"123\":4,\"124\":2,\"126\":1}}],[\"otherwise>\",{\"1\":{\"77\":1}}],[\"otherwise标签\",{\"0\":{\"77\":1}}],[\"old\",{\"1\":{\"57\":1}}],[\"oriented\",{\"1\":{\"146\":1}}],[\"or\",{\"1\":{\"74\":3,\"76\":1,\"104\":1,\"126\":2}}],[\"order\",{\"1\":{\"107\":3,\"109\":1}}],[\"order=\",{\"1\":{\"72\":1}}],[\"ordinal\",{\"1\":{\"53\":1}}],[\"org\",{\"1\":{\"58\":4,\"59\":4,\"86\":3,\"134\":4,\"137\":22,\"143\":7,\"166\":2,\"176\":1}}],[\"orm\",{\"1\":{\"57\":1}}],[\"orm是通过使用描述对象和数据库之间映射的元数据\",{\"1\":{\"57\":1}}],[\"oracle\",{\"1\":{\"11\":2,\"26\":2,\"153\":1}}],[\"o\",{\"1\":{\"45\":4,\"57\":1}}],[\"o2\",{\"1\":{\"29\":2}}],[\"o1\",{\"1\":{\"29\":2}}],[\"obj\",{\"1\":{\"28\":2,\"170\":1}}],[\"object>\",{\"1\":{\"64\":1,\"69\":1}}],[\"objects\",{\"1\":{\"45\":1,\"57\":1}}],[\"object类的方法\",{\"1\":{\"45\":1}}],[\"object\",{\"1\":{\"23\":1,\"28\":2,\"29\":2,\"45\":1,\"57\":2,\"139\":4,\"149\":11,\"161\":3,\"168\":1,\"170\":1,\"173\":5,\"174\":2,\"175\":3,\"176\":1}}],[\"outputstream\",{\"1\":{\"166\":1}}],[\"outer01\",{\"1\":{\"52\":2}}],[\"outer\",{\"1\":{\"52\":3,\"123\":2}}],[\"out\",{\"1\":{\"18\":1,\"24\":3,\"32\":1,\"42\":2,\"49\":1,\"52\":5,\"58\":1,\"59\":1,\"87\":1,\"136\":1,\"137\":3,\"139\":2,\"140\":1,\"145\":3,\"147\":1,\"149\":16,\"152\":3,\"156\":1,\"158\":2,\"161\":5,\"162\":1,\"166\":1,\"173\":10,\"176\":2}}],[\"<util\",{\"1\":{\"137\":2}}],[\"<update\",{\"1\":{\"63\":1,\"64\":1,\"75\":1}}],[\"<key>\",{\"1\":{\"137\":4}}],[\"<entry>\",{\"1\":{\"137\":4}}],[\"<environment\",{\"1\":{\"58\":1}}],[\"<environments\",{\"1\":{\"58\":1}}],[\"<map>\",{\"1\":{\"137\":1}}],[\"<mapper\",{\"1\":{\"58\":2,\"81\":4,\"82\":3}}],[\"<mappers>\",{\"1\":{\"58\":1}}],[\"<ref\",{\"1\":{\"137\":10}}],[\"<result\",{\"1\":{\"67\":2,\"81\":5,\"82\":3}}],[\"<resultmap\",{\"1\":{\"67\":1,\"81\":3,\"82\":2}}],[\"<list>\",{\"1\":{\"137\":1}}],[\"<value>10086<\",{\"1\":{\"137\":2}}],[\"<value>10010<\",{\"1\":{\"137\":2}}],[\"<value>睡<\",{\"1\":{\"137\":1}}],[\"<value>吃<\",{\"1\":{\"137\":1}}],[\"<version>9\",{\"1\":{\"176\":1}}],[\"<version>2\",{\"1\":{\"156\":2}}],[\"<version>6\",{\"1\":{\"134\":1,\"147\":2}}],[\"<version>5\",{\"1\":{\"87\":1,\"156\":1}}],[\"<version>1\",{\"1\":{\"86\":1,\"137\":1}}],[\"<version>8\",{\"1\":{\"58\":1,\"86\":1,\"137\":1,\"176\":2}}],[\"<version>3\",{\"1\":{\"58\":1,\"156\":1}}],[\"<bean\",{\"1\":{\"134\":1,\"137\":13,\"138\":1,\"139\":2,\"140\":1,\"141\":1}}],[\"<beans\",{\"1\":{\"134\":1,\"137\":3,\"143\":1}}],[\"<build>\",{\"1\":{\"86\":1,\"156\":1}}],[\"<=\",{\"1\":{\"126\":1}}],[\"<5000\",{\"1\":{\"125\":2}}],[\"<>尖括号处理需要转义\",{\"1\":{\"137\":1}}],[\"<>\",{\"1\":{\"104\":1}}],[\"<javaclientgenerator\",{\"1\":{\"86\":1}}],[\"<javamodelgenerator\",{\"1\":{\"86\":1}}],[\"<jdbcconnection\",{\"1\":{\"86\":1}}],[\"<generatorconfiguration>\",{\"1\":{\"86\":1}}],[\"<groupid>jakarta\",{\"1\":{\"176\":1}}],[\"<groupid>javax\",{\"1\":{\"156\":1}}],[\"<groupid>com\",{\"1\":{\"87\":1,\"137\":1,\"156\":1}}],[\"<groupid>mysql<\",{\"1\":{\"58\":1,\"86\":1,\"137\":1}}],[\"<groupid>org\",{\"1\":{\"58\":1,\"86\":1,\"134\":1,\"147\":2,\"156\":2,\"176\":2}}],[\"<overwrite>true<\",{\"1\":{\"86\":1}}],[\"<otherwise>1=1<\",{\"1\":{\"77\":1}}],[\"<array>\",{\"1\":{\"137\":1}}],[\"<artifactid>hibernate\",{\"1\":{\"176\":2}}],[\"<artifactid>tomcat7\",{\"1\":{\"156\":1}}],[\"<artifactid>jakarta\",{\"1\":{\"176\":1}}],[\"<artifactid>jackson\",{\"1\":{\"156\":1}}],[\"<artifactid>javax\",{\"1\":{\"156\":1}}],[\"<artifactid>druid<\",{\"1\":{\"137\":1}}],[\"<artifactid>spring\",{\"1\":{\"134\":1,\"147\":2,\"156\":1}}],[\"<artifactid>pagehelper<\",{\"1\":{\"87\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"86\":1}}],[\"<artifactid>mybatis<\",{\"1\":{\"58\":1}}],[\"<artifactid>mysql\",{\"1\":{\"58\":1,\"86\":1,\"137\":1}}],[\"<association\",{\"1\":{\"81\":2}}],[\"<scope>provided<\",{\"1\":{\"156\":1,\"176\":1}}],[\"<sqlmapgenerator\",{\"1\":{\"86\":1}}],[\"<sql\",{\"1\":{\"79\":1}}],[\"<set>\",{\"1\":{\"75\":1}}],[\"<setting\",{\"1\":{\"58\":2,\"70\":1,\"81\":1}}],[\"<settings>\",{\"1\":{\"58\":1,\"70\":1}}],[\"<selectkey\",{\"1\":{\"72\":1}}],[\"<select\",{\"1\":{\"58\":1,\"62\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"74\":1,\"76\":1,\"77\":1,\"81\":4,\"82\":3,\"87\":1}}],[\"<foreach\",{\"1\":{\"78\":2}}],[\"<when\",{\"1\":{\"77\":2}}],[\"<where>\",{\"1\":{\"74\":1}}],[\"<commentgenerator>\",{\"1\":{\"86\":1}}],[\"<constructor\",{\"1\":{\"137\":2}}],[\"<context\",{\"1\":{\"86\":1,\"137\":1,\"143\":1}}],[\"<configuration>\",{\"1\":{\"58\":1,\"86\":1,\"156\":1}}],[\"<collection\",{\"1\":{\"82\":2}}],[\"<choose>\",{\"1\":{\"77\":1}}],[\"<include\",{\"1\":{\"79\":1}}],[\"<insert\",{\"1\":{\"65\":1,\"72\":2,\"78\":1}}],[\"<if\",{\"1\":{\"74\":2,\"75\":2,\"76\":4}}],[\"<id\",{\"1\":{\"67\":1,\"81\":5,\"82\":3}}],[\"<path>\",{\"1\":{\"156\":1}}],[\"<package\",{\"1\":{\"67\":1}}],[\"<port>80<\",{\"1\":{\"156\":1}}],[\"<plugin\",{\"1\":{\"86\":1,\"87\":1}}],[\"<plugin>\",{\"1\":{\"86\":1,\"156\":1}}],[\"<plugins>\",{\"1\":{\"86\":1,\"87\":1,\"156\":1}}],[\"<property\",{\"1\":{\"58\":4,\"86\":6,\"137\":20,\"139\":1}}],[\"<table\",{\"1\":{\"86\":1}}],[\"<trim\",{\"1\":{\"76\":1}}],[\"<transactionmanager\",{\"1\":{\"58\":1}}],[\"<typealias\",{\"1\":{\"67\":2}}],[\"<typealiases>\",{\"1\":{\"67\":2}}],[\"<dependencies>\",{\"1\":{\"86\":1,\"156\":1}}],[\"<dependency>\",{\"1\":{\"58\":2,\"86\":1,\"87\":1,\"134\":1,\"137\":2,\"147\":2,\"156\":3,\"176\":3}}],[\"<delete\",{\"1\":{\"78\":1}}],[\"<datasource\",{\"1\":{\"58\":1}}],[\"<\",{\"1\":{\"18\":2,\"58\":24,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"67\":9,\"68\":1,\"69\":1,\"70\":5,\"71\":2,\"72\":5,\"74\":5,\"75\":6,\"76\":7,\"77\":3,\"78\":4,\"79\":3,\"81\":12,\"82\":9,\"86\":34,\"87\":3,\"126\":2,\"134\":5,\"137\":55,\"138\":2,\"139\":4,\"141\":1,\"143\":4,\"147\":4,\"156\":9,\"176\":4}}],[\"<<\",{\"1\":{\"14\":2}}],[\"keepalive\",{\"1\":{\"165\":1}}],[\"keep\",{\"1\":{\"165\":3}}],[\"keywork=关键字\",{\"1\":{\"173\":1}}],[\"keyword\",{\"1\":{\"173\":5}}],[\"key>\",{\"1\":{\"137\":4}}],[\"key\",{\"1\":{\"119\":2,\"120\":7}}],[\"keyproperty\",{\"1\":{\"72\":1}}],[\"keyproperty=\",{\"1\":{\"72\":2}}],[\"keyproperty属性可以指定主键在实体类对象中对应的属性名\",{\"1\":{\"72\":1}}],[\"k++\",{\"1\":{\"18\":1}}],[\"k\",{\"1\":{\"18\":3}}],[\"语法规则\",{\"1\":{\"92\":1}}],[\"语法规则及分类\",{\"0\":{\"92\":1}}],[\"语言是用于访问数据库的最常用标准化语言\",{\"1\":{\"90\":1}}],[\"语言的软件开发工具包\",{\"1\":{\"10\":1}}],[\"语句中只支持一个\",{\"1\":{\"72\":1}}],[\"语句中都有\",{\"1\":{\"55\":1}}],[\"语句会被忽略\",{\"1\":{\"55\":1}}],[\"语句块中的\",{\"1\":{\"55\":1}}],[\"语句块中不要使用\",{\"1\":{\"55\":1}}],[\"语句时\",{\"1\":{\"55\":1}}],[\"语句和\",{\"1\":{\"55\":1}}],[\"语句\",{\"1\":{\"17\":3,\"48\":2}}],[\"lpad\",{\"1\":{\"114\":2}}],[\"lifecycle\",{\"1\":{\"139\":1}}],[\"list\",{\"1\":{\"137\":1}}],[\"list集合类型的bean\",{\"1\":{\"137\":1}}],[\"list>\",{\"1\":{\"137\":2}}],[\"list或set\",{\"1\":{\"137\":1}}],[\"list<string>\",{\"1\":{\"161\":1}}],[\"list<student>\",{\"1\":{\"82\":2}}],[\"list<car>\",{\"1\":{\"78\":1,\"87\":2}}],[\"list<employee>\",{\"1\":{\"71\":3,\"74\":1,\"76\":1,\"77\":1}}],[\"list<user>\",{\"1\":{\"58\":2}}],[\"limit\",{\"1\":{\"108\":4,\"109\":1}}],[\"likes\",{\"1\":{\"137\":1}}],[\"like\",{\"1\":{\"104\":3}}],[\"linux版本\",{\"1\":{\"91\":1}}],[\"lt\",{\"1\":{\"75\":1,\"76\":1,\"77\":2,\"137\":1}}],[\"level\",{\"1\":{\"131\":1}}],[\"len\",{\"1\":{\"114\":1}}],[\"length\",{\"1\":{\"24\":1,\"29\":1,\"30\":1,\"176\":3}}],[\"left\",{\"1\":{\"81\":2,\"82\":1,\"123\":2,\"124\":1,\"126\":1}}],[\"learn\",{\"1\":{\"58\":2,\"145\":2,\"147\":1,\"148\":3,\"149\":1}}],[\"lazyloadingenabled\",{\"1\":{\"58\":1,\"81\":1}}],[\"language\",{\"1\":{\"165\":1}}],[\"lang\",{\"1\":{\"55\":1,\"68\":1,\"72\":2}}],[\"label2\",{\"1\":{\"19\":2,\"20\":3}}],[\"label1\",{\"1\":{\"19\":1,\"20\":1}}],[\"l\",{\"1\":{\"15\":1}}],[\"location=\",{\"1\":{\"137\":1}}],[\"localhost\",{\"1\":{\"86\":1,\"91\":1,\"137\":1,\"156\":1,\"161\":3,\"162\":1,\"165\":1}}],[\"localtime\",{\"1\":{\"32\":1}}],[\"localdatetime\",{\"1\":{\"32\":3}}],[\"localdate\",{\"1\":{\"32\":1}}],[\"lower\",{\"1\":{\"114\":1}}],[\"low+1\",{\"1\":{\"29\":1}}],[\"login\",{\"1\":{\"158\":9,\"159\":3}}],[\"logservice\",{\"1\":{\"152\":1}}],[\"log\",{\"1\":{\"71\":1,\"152\":1}}],[\"logo\",{\"1\":{\"8\":1,\"56\":1,\"89\":1}}],[\"longtext\",{\"1\":{\"95\":1}}],[\"longblob\",{\"1\":{\"95\":1}}],[\"long类型需添加\",{\"1\":{\"15\":1}}],[\"long\",{\"1\":{\"15\":2,\"27\":2,\"31\":3,\"32\":1,\"66\":1,\"78\":1,\"88\":1,\"162\":1,\"165\":1}}],[\"future\",{\"1\":{\"176\":1}}],[\"fun\",{\"1\":{\"36\":3}}],[\"fratction\",{\"1\":{\"176\":1}}],[\"framework\",{\"1\":{\"155\":1,\"166\":1}}],[\"fr\",{\"1\":{\"165\":1}}],[\"from之后\",{\"1\":{\"126\":1}}],[\"from\",{\"1\":{\"58\":1,\"62\":1,\"67\":1,\"68\":1,\"69\":3,\"70\":1,\"71\":1,\"74\":1,\"76\":1,\"77\":1,\"79\":1,\"81\":4,\"82\":3,\"87\":1,\"88\":2,\"101\":2,\"103\":6,\"104\":7,\"105\":3,\"106\":3,\"107\":3,\"108\":4,\"109\":1,\"111\":1,\"112\":1,\"122\":4,\"123\":4,\"124\":3,\"125\":6,\"126\":19}}],[\"fasterxml\",{\"1\":{\"156\":1}}],[\"factorybean<user>\",{\"1\":{\"140\":1}}],[\"factorybean\",{\"0\":{\"140\":1},\"1\":{\"140\":1}}],[\"false不放行\",{\"1\":{\"175\":1}}],[\"false\",{\"1\":{\"15\":2,\"23\":1,\"45\":1,\"74\":1,\"161\":1,\"173\":5,\"176\":1}}],[\"fis\",{\"1\":{\"55\":1}}],[\"fileinputstream\",{\"1\":{\"55\":2}}],[\"final<\",{\"1\":{\"176\":2}}],[\"finally结构围绕整个被代理的目标方法\",{\"1\":{\"149\":1}}],[\"finally\",{\"1\":{\"55\":5,\"59\":1,\"174\":1}}],[\"final和static修饰\",{\"1\":{\"50\":1}}],[\"final类\",{\"1\":{\"49\":1}}],[\"final的\",{\"1\":{\"51\":1}}],[\"final的特点\",{\"1\":{\"49\":1}}],[\"final的使用\",{\"1\":{\"49\":1}}],[\"final修饰局部变量\",{\"1\":{\"49\":1}}],[\"final修饰属性\",{\"1\":{\"49\":1}}],[\"final修饰方法\",{\"1\":{\"49\":1}}],[\"final修饰类\",{\"1\":{\"49\":1}}],[\"final关键字\",{\"0\":{\"49\":1}}],[\"final\",{\"1\":{\"31\":1,\"49\":12,\"51\":1,\"52\":1,\"59\":1}}],[\"f2\",{\"1\":{\"38\":1}}],[\"f1方法\",{\"1\":{\"52\":1}}],[\"f1\",{\"1\":{\"38\":3,\"42\":2,\"52\":4,\"55\":1}}],[\"floor\",{\"1\":{\"31\":1,\"115\":1}}],[\"float类型必须添加\",{\"1\":{\"15\":1}}],[\"float\",{\"1\":{\"15\":2,\"27\":2,\"31\":2,\"94\":1}}],[\"forwarddemo\",{\"1\":{\"169\":1}}],[\"forward\",{\"1\":{\"169\":3}}],[\"foreign\",{\"1\":{\"119\":1,\"120\":7}}],[\"foreach>\",{\"1\":{\"78\":2}}],[\"foreach标签的属性\",{\"1\":{\"78\":1}}],[\"foreach标签\",{\"0\":{\"78\":1}}],[\"form\",{\"1\":{\"78\":1,\"101\":1,\"126\":1}}],[\"format\",{\"1\":{\"32\":4}}],[\"for\",{\"1\":{\"18\":1,\"24\":2,\"71\":1,\"112\":1}}],[\"for循环的变量初始化和循环变量迭代可以写到其他地方\",{\"1\":{\"18\":1}}],[\"for循环\",{\"0\":{\"18\":1}}],[\"f\",{\"1\":{\"15\":1,\"47\":1,\"117\":1}}],[\"book\",{\"1\":{\"145\":1}}],[\"bookservice\",{\"1\":{\"143\":1,\"145\":2,\"148\":3}}],[\"bookserviceimpl\",{\"1\":{\"143\":1}}],[\"bookdaoimpl\",{\"1\":{\"143\":1,\"145\":2}}],[\"bookdao\",{\"1\":{\"143\":7,\"145\":8,\"147\":1,\"149\":1}}],[\"boolean\",{\"1\":{\"15\":2,\"23\":1,\"27\":2,\"28\":3,\"30\":1,\"31\":1,\"45\":1,\"175\":1}}],[\"basepackages\",{\"1\":{\"175\":1}}],[\"base\",{\"1\":{\"143\":1}}],[\"byname\",{\"1\":{\"141\":1}}],[\"bytype\",{\"1\":{\"141\":2}}],[\"bytes\",{\"1\":{\"31\":1,\"95\":1}}],[\"byte\",{\"1\":{\"15\":2,\"27\":2,\"31\":2,\"94\":7}}],[\"by\",{\"1\":{\"106\":3,\"107\":3,\"109\":2,\"111\":3}}],[\"blob\",{\"1\":{\"95\":1}}],[\"blog\",{\"1\":{\"67\":10}}],[\"brand=\",{\"1\":{\"88\":1}}],[\"brand\",{\"1\":{\"88\":2}}],[\"break语句出现在多层嵌套循环中\",{\"1\":{\"19\":1}}],[\"break\",{\"0\":{\"19\":1},\"1\":{\"17\":3,\"19\":1}}],[\"build>\",{\"1\":{\"86\":1,\"156\":1}}],[\"build\",{\"1\":{\"58\":1,\"59\":1}}],[\"b类的f1\",{\"1\":{\"42\":1}}],[\"begin\",{\"1\":{\"129\":1}}],[\"beginindex\",{\"1\":{\"28\":1}}],[\"before注解标识\",{\"1\":{\"149\":1}}],[\"before\",{\"1\":{\"72\":1,\"147\":1,\"149\":10}}],[\"beanname\",{\"1\":{\"139\":2}}],[\"beanpostprocessor\",{\"1\":{\"139\":1}}],[\"bean对象在关闭前会销毁\",{\"1\":{\"139\":1}}],[\"bean对象销毁\",{\"1\":{\"139\":1}}],[\"bean对象初始化\",{\"1\":{\"139\":1}}],[\"bean对象设置属性\",{\"1\":{\"139\":1}}],[\"bean对象创建完成\",{\"1\":{\"139\":1}}],[\"bean对象创建\",{\"1\":{\"139\":1}}],[\"bean在ioc容器中可以有多个实例\",{\"1\":{\"138\":1}}],[\"bean在ioc容器中只有一个实例\",{\"1\":{\"138\":1}}],[\"bean的后置处理器要放入ioc容器才能生效\",{\"1\":{\"139\":1}}],[\"bean的后置处理器\",{\"1\":{\"139\":2}}],[\"bean的生命周期\",{\"0\":{\"139\":1}}],[\"bean的作用域\",{\"0\":{\"138\":1}}],[\"bean的获取\",{\"0\":{\"136\":1}}],[\"bean=\",{\"1\":{\"137\":10}}],[\"bean>\",{\"1\":{\"134\":1,\"137\":13,\"138\":1,\"139\":1,\"140\":1,\"141\":1}}],[\"beansexception\",{\"1\":{\"139\":2}}],[\"beans>\",{\"1\":{\"134\":1,\"137\":1,\"143\":1}}],[\"beans\",{\"1\":{\"134\":4,\"137\":12,\"143\":4}}],[\"bean\",{\"1\":{\"67\":3,\"133\":1,\"134\":1,\"136\":2,\"137\":3,\"138\":1,\"139\":6,\"140\":1,\"144\":6,\"145\":4,\"176\":2}}],[\"between\",{\"1\":{\"32\":2,\"104\":2}}],[\"bindingresult可以接受错误信息\",{\"1\":{\"176\":1}}],[\"bindingresult\",{\"1\":{\"166\":1,\"176\":2}}],[\"binarysearch\",{\"1\":{\"29\":3}}],[\"bigint\",{\"1\":{\"94\":1}}],[\"biginteger\",{\"1\":{\"31\":16}}],[\"biginteger类\",{\"1\":{\"31\":1}}],[\"bigdecimal\",{\"1\":{\"31\":9}}],[\"bigdecimal类\",{\"1\":{\"31\":1}}],[\"b\",{\"1\":{\"23\":4,\"28\":1,\"31\":2,\"36\":1,\"42\":1,\"45\":4,\"49\":2,\"51\":1,\"124\":6}}],[\"4294967295\",{\"1\":{\"95\":2}}],[\"4028235e38\",{\"1\":{\"15\":1}}],[\"45\",{\"1\":{\"15\":1}}],[\"4e\",{\"1\":{\"15\":1}}],[\"4\",{\"0\":{\"20\":1,\"30\":1,\"38\":1,\"43\":1,\"49\":1,\"60\":1,\"64\":1,\"70\":1,\"77\":1,\"93\":1,\"106\":1,\"117\":1,\"125\":1,\"131\":1,\"139\":1,\"142\":1,\"161\":1,\"167\":1},\"1\":{\"15\":3,\"18\":1,\"23\":2,\"29\":1,\"58\":1,\"86\":1,\"94\":2,\"96\":1,\"98\":1,\"99\":1,\"101\":1,\"109\":1,\"111\":1,\"119\":1,\"126\":1,\"149\":1}}],[\"基础笔记\",{\"0\":{\"89\":1}}],[\"基础语法\",{\"0\":{\"8\":1,\"12\":1}}],[\"基于注解的声明式事务\",{\"0\":{\"152\":1}}],[\"基于注解管理\",{\"0\":{\"143\":1}}],[\"基于注解管理bean\",{\"0\":{\"142\":1}}],[\"基于xml的自动装配\",{\"0\":{\"141\":1}}],[\"基于xml管理bean\",{\"0\":{\"135\":1}}],[\"基于类的匿名内部类\",{\"1\":{\"52\":1}}],[\"基于接口的匿名内部类\",{\"1\":{\"52\":1}}],[\"基本查询\",{\"0\":{\"103\":1}}],[\"基本类型与包装类的区别\",{\"1\":{\"27\":1}}],[\"基本数据类型占用空间较小\",{\"1\":{\"27\":1}}],[\"基本数据类型的成员变量\",{\"1\":{\"27\":1}}],[\"基本数据类型的局部变量存放在\",{\"1\":{\"27\":1}}],[\"基本数据类型\",{\"1\":{\"15\":1,\"27\":1}}],[\"补齐\",{\"1\":{\"14\":1}}],[\"补码为\",{\"1\":{\"14\":2}}],[\"忽略符号位\",{\"1\":{\"14\":1}}],[\"负数高位补\",{\"1\":{\"14\":1}}],[\"低位丢弃\",{\"1\":{\"14\":1}}],[\"低位补零\",{\"1\":{\"14\":1}}],[\"高位补符号位\",{\"1\":{\"14\":1}}],[\"高位丢弃\",{\"1\":{\"14\":1}}],[\"带符号右移\",{\"1\":{\"14\":1}}],[\"xhtml+xml\",{\"1\":{\"165\":1}}],[\"x以后\",{\"1\":{\"149\":1}}],[\"x以前\",{\"1\":{\"149\":1}}],[\"xsd\",{\"1\":{\"134\":1,\"137\":6,\"143\":2}}],[\"xsi\",{\"1\":{\"134\":1,\"137\":3,\"143\":1}}],[\"xsi=\",{\"1\":{\"134\":1,\"137\":3,\"143\":1}}],[\"xml配置使其生效\",{\"1\":{\"155\":1}}],[\"xmlschema\",{\"1\":{\"134\":1,\"137\":3,\"143\":1}}],[\"xmlns\",{\"1\":{\"134\":1,\"137\":7,\"143\":2}}],[\"xmlns=\",{\"1\":{\"134\":1,\"137\":3,\"143\":1}}],[\"xml中添加配置\",{\"1\":{\"87\":1}}],[\"xmlmapper\",{\"1\":{\"86\":1}}],[\"xml文件中添加标签<cache\",{\"1\":{\"85\":1}}],[\"xml文件中的setting标签里设置\",{\"1\":{\"81\":1}}],[\"xml放在resources根目录下\",{\"1\":{\"58\":1}}],[\"xml\",{\"1\":{\"57\":1,\"58\":5,\"59\":1,\"67\":1,\"86\":2,\"134\":2,\"136\":2,\"137\":6,\"139\":1,\"140\":1,\"141\":2,\"143\":1,\"165\":1,\"170\":1}}],[\"xx命名\",{\"1\":{\"49\":1}}],[\"xx\",{\"1\":{\"49\":1}}],[\"x\",{\"1\":{\"14\":4,\"115\":4}}],[\"移位运算符\",{\"1\":{\"14\":1}}],[\"逻辑或\",{\"1\":{\"14\":1}}],[\"逻辑与\",{\"1\":{\"14\":1}}],[\"逻辑运算符\",{\"1\":{\"14\":1}}],[\"两个对象有相同的\",{\"1\":{\"45\":1}}],[\"两个相等的对象的\",{\"1\":{\"45\":1}}],[\"两边均满足\",{\"1\":{\"14\":2}}],[\"两位不同则结果为1\",{\"1\":{\"14\":1}}],[\"两位有1则结果为1\",{\"1\":{\"14\":1}}],[\"两位全为1是结果为1\",{\"1\":{\"14\":1}}],[\"303\",{\"1\":{\"176\":4}}],[\"30<\",{\"1\":{\"137\":1}}],[\"3000<\",{\"1\":{\"77\":1}}],[\"3000\",{\"1\":{\"75\":1,\"76\":1,\"77\":1}}],[\"300\",{\"1\":{\"49\":1,\"165\":1}}],[\"31\",{\"1\":{\"96\":2}}],[\"3306\",{\"1\":{\"86\":1,\"91\":1,\"137\":1}}],[\"33<\",{\"1\":{\"58\":1,\"86\":1}}],[\"324\",{\"1\":{\"15\":1}}],[\"3\",{\"0\":{\"15\":1,\"19\":1,\"29\":1,\"37\":1,\"42\":1,\"59\":1,\"63\":1,\"69\":1,\"76\":1,\"92\":1,\"96\":1,\"105\":1,\"116\":1,\"124\":1,\"130\":1,\"135\":1,\"138\":1,\"145\":1,\"149\":1,\"153\":1,\"157\":1,\"160\":1,\"170\":1},\"1\":{\"14\":2,\"15\":1,\"18\":1,\"23\":4,\"28\":1,\"29\":2,\"49\":1,\"57\":1,\"58\":5,\"87\":2,\"94\":1,\"96\":2,\"98\":1,\"99\":1,\"101\":1,\"103\":1,\"109\":1,\"111\":1,\"112\":1,\"119\":1,\"126\":1,\"136\":1,\"137\":3,\"143\":1,\"149\":4,\"165\":1,\"176\":1}}],[\"~\",{\"1\":{\"14\":1,\"15\":7}}],[\"^\",{\"1\":{\"14\":1}}],[\"||\",{\"1\":{\"14\":1,\"104\":1}}],[\"|\",{\"1\":{\"14\":2,\"57\":1,\"76\":2}}],[\"按照请求地址进行精确匹配\",{\"1\":{\"158\":1}}],[\"按照二进制\",{\"1\":{\"14\":1}}],[\"按位取反\",{\"1\":{\"14\":1}}],[\"按位异或\",{\"1\":{\"14\":1}}],[\"按位或\",{\"1\":{\"14\":1}}],[\"按位与运算为\",{\"1\":{\"14\":1}}],[\"按位与\",{\"1\":{\"14\":1}}],[\"item=\",{\"1\":{\"78\":2}}],[\"item\",{\"1\":{\"78\":1}}],[\"ioc容器关闭\",{\"1\":{\"139\":1}}],[\"ioc容器初始化时创建对象\",{\"1\":{\"138\":1}}],[\"ioc容器初始化时\",{\"1\":{\"138\":1}}],[\"ioc\",{\"1\":{\"133\":5}}],[\"io\",{\"1\":{\"59\":3,\"166\":5}}],[\"ioexception\",{\"1\":{\"58\":1,\"59\":3,\"152\":1}}],[\"import\",{\"1\":{\"59\":6,\"145\":1,\"176\":3}}],[\"implements\",{\"1\":{\"51\":1,\"139\":1,\"140\":1,\"143\":2,\"145\":3,\"175\":2}}],[\"implement\",{\"1\":{\"51\":1}}],[\"id名称\",{\"1\":{\"143\":1}}],[\"id外键\",{\"1\":{\"120\":1}}],[\"id为主键\",{\"1\":{\"119\":1}}],[\"identified\",{\"1\":{\"111\":3}}],[\"ids\",{\"1\":{\"78\":3}}],[\"id\",{\"1\":{\"58\":1,\"62\":1,\"67\":2,\"70\":1,\"71\":1,\"72\":8,\"74\":1,\"76\":1,\"77\":1,\"78\":3,\"79\":1,\"81\":6,\"82\":5,\"88\":4,\"99\":1,\"101\":2,\"119\":1,\"120\":11,\"122\":4,\"123\":4,\"124\":2,\"126\":10,\"139\":1,\"162\":4,\"170\":1,\"173\":10}}],[\"id=\",{\"1\":{\"58\":2,\"62\":2,\"63\":2,\"64\":2,\"65\":1,\"67\":3,\"68\":1,\"69\":1,\"70\":2,\"71\":1,\"72\":2,\"74\":1,\"75\":3,\"76\":1,\"77\":1,\"78\":2,\"79\":1,\"81\":7,\"82\":5,\"86\":1,\"87\":1,\"134\":1,\"137\":16,\"139\":1,\"140\":1,\"141\":1,\"173\":1}}],[\"ic\",{\"1\":{\"51\":1}}],[\"ic接口继承ia\",{\"1\":{\"51\":1}}],[\"ibatis\",{\"1\":{\"59\":4}}],[\"ib\",{\"1\":{\"51\":3}}],[\"ia\",{\"1\":{\"51\":5,\"52\":4}}],[\"ifnull\",{\"1\":{\"117\":1}}],[\"if>\",{\"1\":{\"74\":2,\"75\":2,\"76\":4}}],[\"if\",{\"0\":{\"74\":1},\"1\":{\"45\":2,\"59\":1,\"74\":2,\"98\":2,\"99\":1,\"117\":1,\"176\":1}}],[\"iso\",{\"1\":{\"165\":1}}],[\"isolation\",{\"1\":{\"131\":2,\"151\":1,\"153\":10}}],[\"is\",{\"1\":{\"104\":1}}],[\"isleapyear\",{\"1\":{\"32\":1}}],[\"isafter\",{\"1\":{\"32\":1}}],[\"isbefore\",{\"1\":{\"32\":1}}],[\"issingle\",{\"1\":{\"30\":1}}],[\"i1则为降序\",{\"1\":{\"29\":1}}],[\"i1\",{\"1\":{\"29\":2,\"52\":2}}],[\"i3\",{\"1\":{\"28\":1}}],[\"i2则为升序\",{\"1\":{\"29\":1}}],[\"i2\",{\"1\":{\"28\":1,\"29\":2}}],[\"i<arr1\",{\"1\":{\"24\":1}}],[\"i=0\",{\"1\":{\"24\":1}}],[\"i\",{\"1\":{\"18\":3,\"24\":1,\"28\":4,\"151\":1}}],[\"initmethod\",{\"1\":{\"139\":1}}],[\"init\",{\"1\":{\"139\":1,\"145\":2}}],[\"inversion\",{\"1\":{\"133\":1}}],[\"increment\",{\"1\":{\"119\":1}}],[\"include标签\",{\"0\":{\"79\":1}}],[\"info\",{\"1\":{\"71\":1}}],[\"inputstream\",{\"1\":{\"58\":3,\"166\":1}}],[\"inner01\",{\"1\":{\"52\":10}}],[\"inner\",{\"1\":{\"52\":3,\"122\":1}}],[\"instance\",{\"1\":{\"134\":1,\"137\":3,\"143\":1}}],[\"instanceof\",{\"1\":{\"44\":1,\"45\":1}}],[\"insertbatch\",{\"1\":{\"78\":2}}],[\"insertuser\",{\"1\":{\"72\":1}}],[\"insert>\",{\"1\":{\"65\":1,\"72\":2,\"78\":1}}],[\"insertemployee\",{\"1\":{\"65\":2,\"72\":2}}],[\"insert\",{\"1\":{\"28\":1,\"65\":1,\"72\":3,\"78\":1,\"88\":3,\"101\":4,\"112\":1,\"126\":1}}],[\"in默认代表键盘输入\",{\"1\":{\"30\":1}}],[\"in\",{\"1\":{\"30\":1,\"78\":1,\"104\":2,\"126\":9,\"152\":3}}],[\"int或integer\",{\"1\":{\"94\":1}}],[\"into\",{\"1\":{\"65\":1,\"72\":2,\"78\":1,\"88\":1,\"101\":4}}],[\"interceptorregistry\",{\"1\":{\"175\":4}}],[\"interceptor=\",{\"1\":{\"87\":1}}],[\"interval\",{\"1\":{\"116\":1}}],[\"interface\",{\"1\":{\"51\":6,\"52\":1,\"58\":1,\"152\":3}}],[\"integer\",{\"1\":{\"15\":1,\"27\":1,\"28\":5,\"29\":6,\"62\":1,\"63\":1,\"67\":1,\"68\":4,\"70\":1,\"78\":2,\"81\":6,\"82\":5,\"88\":1,\"173\":7,\"176\":1}}],[\"int\",{\"1\":{\"15\":2,\"17\":1,\"18\":1,\"23\":14,\"24\":2,\"27\":1,\"28\":9,\"29\":1,\"30\":1,\"31\":8,\"36\":6,\"37\":2,\"40\":3,\"45\":2,\"47\":1,\"49\":4,\"51\":2,\"52\":4,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"68\":6,\"72\":1,\"87\":3,\"88\":3,\"99\":2,\"119\":2,\"161\":3,\"163\":1,\"173\":4}}],[\"index\",{\"1\":{\"11\":1,\"26\":1,\"28\":7,\"78\":1}}],[\"i++\",{\"1\":{\"14\":1,\"18\":1,\"24\":1}}],[\"==0\",{\"1\":{\"176\":1}}],[\"==\",{\"0\":{\"45\":1},\"1\":{\"27\":2,\"45\":4}}],[\"=\",{\"1\":{\"14\":4,\"18\":2,\"20\":1,\"23\":8,\"28\":11,\"29\":6,\"30\":6,\"32\":5,\"37\":2,\"40\":2,\"44\":4,\"45\":1,\"49\":4,\"50\":1,\"51\":2,\"52\":11,\"53\":2,\"55\":1,\"58\":8,\"59\":6,\"67\":1,\"71\":3,\"74\":1,\"75\":1,\"76\":2,\"77\":1,\"81\":6,\"82\":3,\"87\":5,\"88\":1,\"101\":4,\"104\":1,\"114\":1,\"122\":2,\"123\":2,\"124\":2,\"126\":18,\"129\":1,\"134\":2,\"136\":3,\"137\":7,\"139\":2,\"140\":2,\"141\":2,\"143\":2,\"145\":5,\"149\":9,\"152\":1,\"153\":5,\"158\":1,\"159\":2,\"161\":13,\"162\":2,\"166\":2,\"173\":24,\"174\":1,\"175\":1,\"176\":3}}],[\"运行\",{\"1\":{\"156\":1}}],[\"运行类型是匿名内部类\",{\"1\":{\"52\":1}}],[\"运行环境\",{\"1\":{\"10\":1}}],[\"运算符\",{\"0\":{\"14\":1}}],[\"hibernate\",{\"1\":{\"176\":4}}],[\"host\",{\"1\":{\"165\":1}}],[\"hbs\",{\"1\":{\"161\":4}}],[\"hbs=喝\",{\"1\":{\"161\":1}}],[\"hbs=吃\",{\"1\":{\"161\":1}}],[\"head\",{\"1\":{\"159\":1}}],[\"helloworld\",{\"1\":{\"13\":1}}],[\"h\",{\"1\":{\"91\":1}}],[\"haserrors\",{\"1\":{\"176\":1}}],[\"hash\",{\"1\":{\"45\":1}}],[\"hashcode\",{\"1\":{\"45\":8}}],[\"handle\",{\"1\":{\"164\":1,\"165\":1,\"170\":1}}],[\"handler标记和绑定错误收集\",{\"1\":{\"176\":1}}],[\"handler报错不执行\",{\"1\":{\"175\":1}}],[\"handlerinterceptor\",{\"1\":{\"175\":1}}],[\"handlerexception\",{\"1\":{\"174\":1}}],[\"handlernullexception\",{\"1\":{\"174\":1}}],[\"handler方法\",{\"1\":{\"158\":1}}],[\"handler又称处理器\",{\"1\":{\"155\":1}}],[\"handler\",{\"1\":{\"155\":1,\"168\":1,\"175\":5}}],[\"handleradapter\",{\"1\":{\"155\":1}}],[\"handlermapping\",{\"1\":{\"155\":1}}],[\"having可以\",{\"1\":{\"106\":1}}],[\"having是对分组之后的结果进行过滤\",{\"1\":{\"106\":1}}],[\"having\",{\"1\":{\"106\":2,\"109\":1}}],[\"half\",{\"1\":{\"31\":1}}],[\"hh\",{\"1\":{\"32\":2,\"96\":3}}],[\"hh时mm分ss秒\",{\"1\":{\"32\":1}}],[\"http协议请求方式要求\",{\"1\":{\"172\":1}}],[\"httpmessageconverter\",{\"1\":{\"166\":1}}],[\"http请求方式\",{\"0\":{\"159\":1}}],[\"http\",{\"1\":{\"58\":2,\"86\":1,\"134\":4,\"137\":22,\"143\":7,\"159\":2,\"160\":1,\"161\":3,\"162\":1,\"164\":1,\"166\":2,\"171\":2}}],[\"httpservletresponse\",{\"1\":{\"166\":1,\"175\":3}}],[\"httpservletrequest\",{\"1\":{\"166\":1,\"175\":3}}],[\"httpsession\",{\"1\":{\"166\":2}}],[\"https\",{\"1\":{\"11\":2,\"26\":2,\"166\":1}}],[\"html\",{\"1\":{\"11\":1,\"26\":1,\"165\":1,\"166\":1}}],[\"durability\",{\"1\":{\"151\":1}}],[\"duration\",{\"1\":{\"32\":1}}],[\"ds\",{\"1\":{\"145\":9}}],[\"dao\",{\"1\":{\"144\":2,\"145\":1,\"147\":1,\"149\":1}}],[\"day\",{\"1\":{\"116\":1}}],[\"data\",{\"1\":{\"161\":3}}],[\"databind<\",{\"1\":{\"156\":1}}],[\"database\",{\"1\":{\"98\":4}}],[\"databases\",{\"1\":{\"98\":1}}],[\"datasource\",{\"1\":{\"137\":5,\"145\":7}}],[\"datasource>\",{\"1\":{\"58\":1}}],[\"datesource\",{\"1\":{\"145\":2}}],[\"date2\",{\"1\":{\"116\":1}}],[\"date1\",{\"1\":{\"116\":1}}],[\"datediff\",{\"1\":{\"116\":1}}],[\"datetime\",{\"1\":{\"96\":1}}],[\"datetimeformatter\",{\"1\":{\"32\":5}}],[\"date\",{\"1\":{\"32\":5,\"96\":1,\"103\":2,\"107\":1,\"116\":5}}],[\"date类\",{\"1\":{\"32\":1}}],[\"digits\",{\"1\":{\"176\":1}}],[\"dispatcherservlet\",{\"1\":{\"155\":1}}],[\"distinct\",{\"1\":{\"103\":2}}],[\"divisor是除数\",{\"1\":{\"31\":1}}],[\"divisor\",{\"1\":{\"31\":1}}],[\"divideandremainder\",{\"1\":{\"31\":1}}],[\"divide\",{\"1\":{\"31\":2}}],[\"druid\",{\"1\":{\"137\":1}}],[\"druiddatasource\",{\"1\":{\"137\":2,\"145\":6}}],[\"drop\",{\"1\":{\"98\":1,\"99\":2,\"111\":1,\"112\":1,\"120\":2}}],[\"driverclassname\",{\"1\":{\"137\":1}}],[\"driverclass=\",{\"1\":{\"86\":1}}],[\"driver=com\",{\"1\":{\"137\":1}}],[\"driver\",{\"1\":{\"58\":2,\"86\":1,\"137\":2,\"145\":7}}],[\"d代表标度即小数点后面有几位\",{\"1\":{\"94\":1}}],[\"dcl数据控制语言\",{\"0\":{\"110\":1}}],[\"dcl\",{\"1\":{\"92\":1}}],[\"dql数据查询语言\",{\"0\":{\"102\":1}}],[\"dql\",{\"1\":{\"92\":1}}],[\"dml数据操作\",{\"0\":{\"101\":1}}],[\"dml数据操作语言\",{\"0\":{\"100\":1}}],[\"dml\",{\"1\":{\"92\":1}}],[\"db2tables\",{\"1\":{\"86\":1}}],[\"dtd\",{\"1\":{\"58\":6,\"86\":3}}],[\"ddl表操作\",{\"0\":{\"99\":1}}],[\"ddl数据库操作\",{\"0\":{\"98\":1}}],[\"ddl数据定义语言\",{\"0\":{\"97\":1}}],[\"ddl\",{\"1\":{\"92\":1}}],[\"dd\",{\"1\":{\"32\":2,\"96\":3}}],[\"d1\",{\"1\":{\"32\":2}}],[\"detailuser\",{\"1\":{\"173\":1}}],[\"deflate\",{\"1\":{\"165\":1}}],[\"defaultvalue\",{\"1\":{\"161\":2,\"173\":4}}],[\"default=\",{\"1\":{\"58\":1}}],[\"default\",{\"1\":{\"17\":1,\"98\":1,\"117\":2,\"119\":2,\"120\":1,\"153\":1}}],[\"demo\",{\"1\":{\"164\":1,\"165\":1,\"169\":6}}],[\"destroymethod\",{\"1\":{\"139\":1}}],[\"destroy\",{\"1\":{\"139\":1,\"145\":2}}],[\"description\",{\"1\":{\"166\":1,\"173\":1}}],[\"desc\",{\"1\":{\"53\":5,\"99\":1,\"107\":2}}],[\"decimalmax\",{\"1\":{\"176\":1}}],[\"decimalmin\",{\"1\":{\"176\":1}}],[\"decimal\",{\"1\":{\"94\":1}}],[\"development\",{\"1\":{\"58\":2}}],[\"dept\",{\"1\":{\"120\":12,\"122\":8,\"123\":8,\"126\":10,\"137\":12}}],[\"dependencies>\",{\"1\":{\"86\":1,\"156\":1}}],[\"dependency>\",{\"1\":{\"58\":2,\"86\":1,\"87\":1,\"134\":1,\"137\":2,\"147\":2,\"156\":3,\"176\":3}}],[\"deprecated\",{\"1\":{\"54\":1}}],[\"deletemapping\",{\"1\":{\"159\":1}}],[\"deletebyid\",{\"1\":{\"88\":1}}],[\"deletebyids\",{\"1\":{\"78\":2}}],[\"delete>\",{\"1\":{\"78\":1}}],[\"deletecharat\",{\"1\":{\"28\":1}}],[\"delete\",{\"1\":{\"28\":1,\"78\":1,\"88\":2,\"101\":3,\"112\":1,\"120\":2,\"126\":1,\"159\":1,\"172\":2,\"173\":1}}],[\"doe\",{\"1\":{\"160\":1}}],[\"domainobjectname=\",{\"1\":{\"86\":1}}],[\"domain\",{\"1\":{\"67\":6}}],[\"doctype\",{\"1\":{\"58\":2,\"86\":1}}],[\"docs\",{\"1\":{\"11\":4,\"26\":4,\"166\":1}}],[\"dog的编译类型是接口类型即\",{\"1\":{\"52\":1}}],[\"dog\",{\"1\":{\"52\":2}}],[\"down\",{\"1\":{\"31\":1}}],[\"double\",{\"1\":{\"15\":3,\"23\":1,\"30\":1,\"31\":17,\"36\":1,\"45\":2,\"63\":1,\"94\":2,\"152\":3}}],[\"d\",{\"1\":{\"13\":1,\"23\":1,\"36\":1,\"55\":1,\"94\":1,\"126\":3,\"151\":1}}],[\"cglib\",{\"1\":{\"146\":1}}],[\"ctx\",{\"1\":{\"143\":2,\"145\":2}}],[\"cdata\",{\"1\":{\"137\":1}}],[\"curtime\",{\"1\":{\"116\":1}}],[\"curdate\",{\"1\":{\"116\":1}}],[\"currenttimemillis\",{\"1\":{\"30\":1,\"147\":1}}],[\"ceo\",{\"1\":{\"155\":1}}],[\"celt\",{\"1\":{\"115\":1}}],[\"ceil\",{\"1\":{\"31\":1}}],[\"crud\",{\"1\":{\"172\":8}}],[\"create\",{\"1\":{\"98\":2,\"99\":3,\"111\":2,\"112\":1,\"119\":1,\"120\":1}}],[\"cry\",{\"1\":{\"52\":1}}],[\"cname\",{\"1\":{\"81\":8,\"82\":7}}],[\"cid\",{\"1\":{\"81\":16,\"82\":14}}],[\"check\",{\"1\":{\"119\":2}}],[\"change\",{\"1\":{\"99\":1}}],[\"charat\",{\"1\":{\"28\":2,\"30\":1}}],[\"chararray\",{\"1\":{\"28\":1}}],[\"character\",{\"1\":{\"15\":1,\"27\":1}}],[\"charset\",{\"1\":{\"98\":1,\"165\":1}}],[\"charsequence\",{\"1\":{\"32\":1,\"176\":1}}],[\"chars\",{\"1\":{\"28\":3}}],[\"char\",{\"1\":{\"15\":1,\"17\":1,\"23\":1,\"27\":1,\"28\":5,\"30\":1,\"95\":1,\"119\":2}}],[\"choose>\",{\"1\":{\"77\":1}}],[\"choose\",{\"0\":{\"77\":1}}],[\"cj\",{\"1\":{\"58\":1,\"86\":1,\"137\":1}}],[\"cascade\",{\"1\":{\"120\":3}}],[\"case子句中的值必须为常量不能是变量\",{\"1\":{\"17\":1}}],[\"case\",{\"1\":{\"17\":2,\"117\":2}}],[\"calzz\",{\"1\":{\"82\":2}}],[\"carnum\",{\"1\":{\"88\":2}}],[\"cars\",{\"1\":{\"78\":2,\"87\":2}}],[\"car\",{\"1\":{\"78\":5,\"87\":2,\"88\":8}}],[\"catch\",{\"1\":{\"55\":7,\"59\":2,\"149\":1,\"174\":2}}],[\"clearcache\",{\"1\":{\"84\":1}}],[\"clazzone\",{\"1\":{\"137\":1}}],[\"clazzresultmapstep1\",{\"1\":{\"82\":2}}],[\"clazzresultmap\",{\"1\":{\"82\":2}}],[\"clazzmapper\",{\"1\":{\"81\":2,\"82\":2}}],[\"clazz\",{\"1\":{\"81\":14,\"82\":6,\"137\":1}}],[\"class<\",{\"1\":{\"140\":1,\"156\":2}}],[\"classpath\",{\"1\":{\"137\":1,\"145\":2}}],[\"classpathxmlapplicationcontext\",{\"1\":{\"134\":1,\"136\":2,\"137\":3,\"139\":2,\"140\":1,\"141\":1}}],[\"class=\",{\"1\":{\"134\":1,\"137\":13,\"138\":1,\"139\":2,\"140\":1,\"141\":1}}],[\"classcastexception\",{\"1\":{\"55\":1}}],[\"class\",{\"1\":{\"37\":3,\"38\":1,\"40\":1,\"41\":2,\"42\":2,\"44\":2,\"45\":1,\"47\":2,\"48\":1,\"49\":2,\"50\":1,\"51\":1,\"52\":9,\"58\":2,\"59\":1,\"67\":1,\"71\":1,\"81\":2,\"82\":2,\"136\":3,\"137\":1,\"139\":2,\"140\":2,\"141\":1,\"143\":5,\"145\":13,\"147\":2,\"149\":1,\"152\":4,\"156\":7,\"158\":4,\"159\":1,\"161\":2,\"163\":1,\"170\":1,\"173\":2,\"174\":3,\"175\":2,\"176\":2}}],[\"close=\",{\"1\":{\"78\":1}}],[\"closesession\",{\"1\":{\"59\":2}}],[\"close\",{\"1\":{\"30\":1,\"58\":1,\"59\":1,\"78\":1,\"139\":1}}],[\"c\",{\"1\":{\"23\":3,\"28\":1,\"49\":2,\"81\":8,\"82\":4,\"151\":1}}],[\"cookie\",{\"1\":{\"164\":4,\"166\":1}}],[\"cookievalue\",{\"1\":{\"164\":2,\"166\":1}}],[\"cookie数据接收\",{\"0\":{\"164\":1}}],[\"core<\",{\"1\":{\"156\":1}}],[\"collate\",{\"1\":{\"98\":1}}],[\"collection>\",{\"1\":{\"82\":1}}],[\"collection=\",{\"1\":{\"78\":2}}],[\"collection\",{\"1\":{\"78\":1,\"82\":1,\"176\":1}}],[\"column=\",{\"1\":{\"67\":3,\"81\":11,\"82\":7}}],[\"column属性用于指定字段名\",{\"1\":{\"67\":1}}],[\"count\",{\"1\":{\"68\":1,\"105\":1,\"106\":3}}],[\"cos\",{\"1\":{\"31\":1}}],[\"copyof\",{\"1\":{\"29\":1}}],[\"consistency\",{\"1\":{\"151\":1}}],[\"constructor\",{\"1\":{\"137\":2}}],[\"constraints\",{\"1\":{\"176\":3}}],[\"constraint\",{\"1\":{\"120\":5}}],[\"conlumn1\",{\"1\":{\"126\":2}}],[\"connectionurl=\",{\"1\":{\"86\":1}}],[\"connection\",{\"1\":{\"59\":3,\"137\":3}}],[\"connector\",{\"1\":{\"58\":1,\"86\":1,\"137\":1}}],[\"configuration>\",{\"1\":{\"58\":1,\"86\":1,\"156\":1}}],[\"configuration\",{\"1\":{\"58\":1,\"86\":1,\"143\":1,\"144\":1,\"145\":3,\"147\":1,\"152\":1,\"156\":1,\"175\":1}}],[\"config\",{\"1\":{\"58\":4,\"59\":1,\"86\":1,\"87\":1}}],[\"context=\",{\"1\":{\"137\":1,\"143\":1}}],[\"context\",{\"1\":{\"134\":2,\"136\":6,\"137\":8,\"143\":5}}],[\"context<\",{\"1\":{\"134\":1}}],[\"context基础依赖\",{\"1\":{\"134\":1}}],[\"context>\",{\"1\":{\"86\":1}}],[\"controlleradvice\",{\"1\":{\"174\":2}}],[\"controller方法\",{\"1\":{\"155\":1}}],[\"controller\",{\"1\":{\"141\":1,\"143\":1,\"144\":2,\"156\":2,\"158\":4,\"159\":1,\"161\":2,\"166\":2,\"170\":2,\"173\":1,\"175\":1}}],[\"control\",{\"1\":{\"133\":1}}],[\"contains\",{\"1\":{\"28\":1}}],[\"continue语句出现在多层嵌套循环中\",{\"1\":{\"20\":1}}],[\"continue\",{\"0\":{\"20\":1},\"1\":{\"20\":3}}],[\"concat\",{\"1\":{\"28\":1,\"114\":1}}],[\"componentscan\",{\"1\":{\"143\":1,\"144\":1,\"145\":2,\"147\":1,\"152\":1,\"156\":1,\"175\":1}}],[\"component\",{\"1\":{\"143\":4,\"144\":4,\"145\":1,\"147\":1,\"149\":1}}],[\"compareto\",{\"1\":{\"53\":1}}],[\"compare\",{\"1\":{\"29\":1,\"45\":1}}],[\"comparator\",{\"1\":{\"29\":1}}],[\"common\",{\"1\":{\"175\":5}}],[\"committed\",{\"1\":{\"131\":1,\"153\":4}}],[\"commit\",{\"1\":{\"129\":2}}],[\"comment\",{\"1\":{\"99\":10,\"119\":5}}],[\"commentgenerator>\",{\"1\":{\"86\":1}}],[\"com\",{\"1\":{\"11\":2,\"26\":2,\"58\":4,\"59\":1,\"62\":1,\"67\":1,\"70\":1,\"71\":1,\"76\":1,\"77\":1,\"81\":5,\"82\":4,\"86\":4,\"87\":1,\"134\":1,\"137\":13,\"138\":1,\"139\":2,\"140\":1,\"141\":1,\"143\":2,\"145\":5,\"147\":2,\"148\":4,\"149\":1,\"152\":1,\"156\":1,\"173\":2,\"175\":2}}],[\"cmd\",{\"1\":{\"13\":1}}],[\"0<\",{\"1\":{\"156\":2,\"176\":1}}],[\"0代表手动\",{\"1\":{\"129\":1}}],[\"07\",{\"1\":{\"96\":1}}],[\"03\",{\"1\":{\"96\":1}}],[\"00\",{\"1\":{\"32\":3,\"96\":5}}],[\"00000011\",{\"1\":{\"14\":1}}],[\"00000010\",{\"1\":{\"14\":2}}],[\"00000000\",{\"1\":{\"14\":9}}],[\"01之后的员工信息\",{\"1\":{\"126\":1}}],[\"01到现在的时间毫秒值\",{\"1\":{\"30\":1}}],[\"01\",{\"1\":{\"30\":1,\"96\":8,\"126\":3}}],[\"0+1\",{\"1\":{\"29\":1}}],[\"0d\",{\"1\":{\"15\":1}}],[\"0f\",{\"1\":{\"15\":1}}],[\"0l\",{\"1\":{\"15\":1}}],[\"0与1互换\",{\"1\":{\"14\":1}}],[\"0\",{\"1\":{\"13\":1,\"14\":2,\"15\":4,\"23\":3,\"28\":1,\"29\":1,\"30\":5,\"31\":8,\"45\":1,\"58\":5,\"86\":4,\"95\":10,\"108\":1,\"114\":1,\"129\":1,\"134\":2,\"137\":4,\"143\":2,\"147\":2,\"176\":5}}],[\"aftercompletion\",{\"1\":{\"175\":3}}],[\"afterthrowing\",{\"1\":{\"149\":3}}],[\"afterthrowing注解标识\",{\"1\":{\"149\":1}}],[\"afterreturning获取返回值\",{\"1\":{\"149\":1}}],[\"afterreturning\",{\"1\":{\"149\":6}}],[\"afterreturning注解标识\",{\"1\":{\"149\":1}}],[\"after\",{\"1\":{\"149\":7}}],[\"after注解标识\",{\"1\":{\"149\":1}}],[\"aop通知获取数据\",{\"1\":{\"149\":1}}],[\"aop通知类型\",{\"1\":{\"149\":1}}],[\"aop<\",{\"1\":{\"147\":1}}],[\"aop依赖\",{\"1\":{\"147\":1}}],[\"aop\",{\"1\":{\"146\":4}}],[\"aop面向切面编程\",{\"0\":{\"146\":1}}],[\"atomicity\",{\"1\":{\"151\":1}}],[\"atguigu\",{\"1\":{\"140\":1,\"141\":1,\"173\":2,\"175\":2}}],[\"atan\",{\"1\":{\"31\":1}}],[\"accounts\",{\"1\":{\"170\":1}}],[\"accountservice\",{\"1\":{\"152\":2}}],[\"accept\",{\"1\":{\"165\":6}}],[\"ac\",{\"1\":{\"137\":2,\"139\":3,\"140\":2,\"141\":2}}],[\"action\",{\"1\":{\"120\":1}}],[\"acos\",{\"1\":{\"31\":1}}],[\"alive\",{\"1\":{\"165\":3}}],[\"alibaba\",{\"1\":{\"137\":1}}],[\"alibaba<\",{\"1\":{\"137\":1}}],[\"alias\",{\"1\":{\"67\":1}}],[\"alias=\",{\"1\":{\"67\":2}}],[\"all\",{\"1\":{\"112\":1,\"125\":2,\"126\":3}}],[\"alter\",{\"1\":{\"99\":5,\"111\":1,\"112\":1,\"120\":6}}],[\"annotation\",{\"1\":{\"176\":1}}],[\"annotationconfigapplicationcontext\",{\"1\":{\"143\":1,\"145\":2}}],[\"ann\",{\"1\":{\"166\":1}}],[\"any\",{\"1\":{\"126\":3}}],[\"and|or\",{\"1\":{\"76\":1}}],[\"and\",{\"1\":{\"74\":1,\"76\":2,\"104\":4}}],[\"animal\",{\"1\":{\"50\":2}}],[\"assertfalse\",{\"1\":{\"176\":1}}],[\"asserttrue\",{\"1\":{\"176\":1}}],[\"association标签下的fetchtype可以指定懒加载\",{\"1\":{\"81\":1}}],[\"association>\",{\"1\":{\"81\":1}}],[\"association\",{\"1\":{\"81\":1}}],[\"aspects<\",{\"1\":{\"147\":1}}],[\"aspects依赖\",{\"1\":{\"147\":1}}],[\"aspect\",{\"1\":{\"146\":1,\"147\":1,\"149\":1}}],[\"ascii\",{\"1\":{\"160\":1}}],[\"asc可省略\",{\"1\":{\"107\":1}}],[\"asc\",{\"1\":{\"107\":3}}],[\"as\",{\"1\":{\"72\":1,\"103\":5}}],[\"asin\",{\"1\":{\"31\":1}}],[\"avg\",{\"1\":{\"69\":1,\"105\":2}}],[\"aaa\",{\"1\":{\"158\":2}}],[\"aa\",{\"1\":{\"55\":1}}],[\"ab公司开发\",{\"1\":{\"90\":1}}],[\"abc\",{\"1\":{\"52\":2}}],[\"abstractannotationconfigdispatcherservletinitializer\",{\"1\":{\"156\":1}}],[\"abstract只能修饰类和方法\",{\"1\":{\"50\":1}}],[\"abstract\",{\"1\":{\"50\":3}}],[\"abs\",{\"1\":{\"31\":2}}],[\"around获取返回值\",{\"1\":{\"149\":1}}],[\"around\",{\"1\":{\"149\":16}}],[\"around注解标识\",{\"1\":{\"149\":1}}],[\"argument\",{\"1\":{\"166\":1}}],[\"arguments\",{\"1\":{\"166\":1}}],[\"arg>\",{\"1\":{\"137\":2}}],[\"arg\",{\"1\":{\"137\":2}}],[\"args参数可以修改后传入proceed\",{\"1\":{\"149\":1}}],[\"args\",{\"1\":{\"49\":1,\"58\":1,\"59\":1,\"136\":2,\"137\":2,\"143\":1,\"145\":1,\"149\":5}}],[\"artifactid>\",{\"1\":{\"58\":2,\"86\":2,\"87\":1,\"134\":1,\"137\":2,\"147\":2,\"156\":4,\"176\":3}}],[\"arithmeticexception\",{\"1\":{\"55\":1}}],[\"array>\",{\"1\":{\"137\":1}}],[\"arrayindexoutofboundsexception\",{\"1\":{\"55\":1}}],[\"arraycopy\",{\"1\":{\"30\":2}}],[\"arrays\",{\"1\":{\"29\":7,\"149\":2}}],[\"arrays类\",{\"0\":{\"29\":1}}],[\"arr数组必须是排好序的\",{\"1\":{\"29\":1}}],[\"arr\",{\"1\":{\"29\":9,\"30\":1}}],[\"arr3\",{\"1\":{\"24\":1}}],[\"arr2\",{\"1\":{\"24\":1,\"29\":1,\"30\":2}}],[\"arr1\",{\"1\":{\"24\":1}}],[\"a1\",{\"1\":{\"45\":3,\"52\":2}}],[\"a类的f1\",{\"1\":{\"42\":1}}],[\"autowired\",{\"1\":{\"144\":1,\"145\":1}}],[\"autowire=\",{\"1\":{\"141\":1}}],[\"autowire\",{\"1\":{\"141\":2}}],[\"autocommit\",{\"1\":{\"129\":2}}],[\"auto\",{\"1\":{\"119\":1}}],[\"autumn\",{\"1\":{\"53\":1}}],[\"author\",{\"1\":{\"13\":2,\"67\":6}}],[\"augend\",{\"1\":{\"31\":1}}],[\"addpathpatterns\",{\"1\":{\"175\":2}}],[\"addperson\",{\"1\":{\"163\":1}}],[\"addinterceptor\",{\"1\":{\"175\":4}}],[\"addinterceptors\",{\"1\":{\"175\":4}}],[\"adduser\",{\"1\":{\"161\":1}}],[\"add\",{\"1\":{\"31\":2,\"99\":1,\"116\":1,\"120\":4,\"134\":1}}],[\"age>0\",{\"1\":{\"119\":1}}],[\"age>=15\",{\"1\":{\"104\":2}}],[\"age大于0且小于等于120\",{\"1\":{\"119\":1}}],[\"age<120\",{\"1\":{\"119\":1}}],[\"age<25\",{\"1\":{\"106\":1}}],[\"age<=\",{\"1\":{\"104\":2}}],[\"age=18\",{\"1\":{\"161\":1}}],[\"age=\",{\"1\":{\"76\":1,\"173\":1}}],[\"age\",{\"1\":{\"30\":1,\"37\":4,\"40\":5,\"52\":1,\"76\":1,\"79\":1,\"99\":1,\"101\":1,\"104\":3,\"105\":2,\"107\":2,\"119\":1,\"125\":2,\"137\":3,\"161\":10,\"163\":2,\"173\":6}}],[\"application\",{\"1\":{\"165\":2}}],[\"applicationcontext\",{\"1\":{\"134\":1,\"136\":2,\"137\":3,\"140\":1,\"141\":1,\"143\":1}}],[\"app\",{\"1\":{\"143\":1,\"145\":1}}],[\"append\",{\"1\":{\"28\":1}}],[\"apache\",{\"1\":{\"59\":4,\"156\":1}}],[\"api<\",{\"1\":{\"156\":1,\"176\":1}}],[\"api构建的原始web框架\",{\"1\":{\"155\":1}}],[\"api\",{\"1\":{\"11\":2,\"26\":2,\"166\":5,\"171\":1}}],[\"a\",{\"1\":{\"14\":2,\"23\":2,\"28\":1,\"31\":8,\"36\":2,\"42\":2,\"45\":7,\"47\":5,\"49\":5,\"51\":4,\"124\":6,\"151\":1,\"158\":6}}],[\"文档注释可以被\",{\"1\":{\"13\":1}}],[\"文档注释\",{\"1\":{\"13\":2}}],[\"8859\",{\"1\":{\"165\":1}}],[\"8080\",{\"1\":{\"161\":3,\"162\":1,\"165\":1}}],[\"838\",{\"1\":{\"96\":2}}],[\"8\",{\"0\":{\"53\":1,\"83\":1,\"110\":1,\"165\":1,\"176\":1},\"1\":{\"11\":1,\"15\":2,\"26\":1,\"58\":2,\"86\":1,\"94\":2,\"96\":1,\"99\":1,\"104\":1,\"134\":1,\"137\":3,\"143\":1,\"160\":1,\"165\":1}}],[\"2<\",{\"1\":{\"134\":1,\"147\":2}}],[\"25\",{\"1\":{\"104\":1}}],[\"255\",{\"1\":{\"95\":3}}],[\"23\",{\"1\":{\"96\":1}}],[\"2155\",{\"1\":{\"96\":1}}],[\"20doe\",{\"1\":{\"160\":1}}],[\"20的人员\",{\"1\":{\"104\":1}}],[\"2038\",{\"1\":{\"96\":1}}],[\"20\",{\"1\":{\"76\":1,\"104\":4}}],[\"2001\",{\"1\":{\"134\":1,\"137\":3,\"143\":1}}],[\"2006\",{\"1\":{\"126\":1}}],[\"2000\",{\"1\":{\"74\":1}}],[\"200\",{\"1\":{\"49\":1}}],[\"2023年07月16日\",{\"1\":{\"32\":1}}],[\"2^63\",{\"1\":{\"15\":2}}],[\"2^31\",{\"1\":{\"15\":2}}],[\"2^15\",{\"1\":{\"15\":2}}],[\"2\",{\"0\":{\"11\":1,\"14\":1,\"18\":1,\"24\":1,\"28\":1,\"36\":1,\"41\":1,\"48\":1,\"58\":1,\"62\":1,\"68\":1,\"75\":1,\"82\":1,\"85\":1,\"91\":1,\"95\":1,\"99\":1,\"104\":1,\"112\":1,\"115\":1,\"120\":1,\"123\":1,\"129\":1,\"134\":1,\"137\":1,\"144\":1,\"148\":1,\"152\":1,\"156\":1,\"159\":1,\"169\":1,\"173\":1},\"1\":{\"14\":4,\"15\":2,\"18\":1,\"23\":7,\"29\":2,\"49\":1,\"58\":1,\"87\":1,\"94\":1,\"98\":1,\"99\":1,\"101\":1,\"103\":1,\"109\":1,\"111\":1,\"112\":1,\"119\":1,\"122\":1,\"126\":1,\"136\":1,\"137\":4,\"145\":1,\"149\":3,\"156\":1,\"172\":2}}],[\"指的是只要事务成功结束\",{\"1\":{\"151\":1}}],[\"指的是在并发环境中\",{\"1\":{\"151\":1}}],[\"指定请求方式\",{\"1\":{\"159\":1}}],[\"指定记载某个bean\",{\"1\":{\"145\":1}}],[\"指定整个循环把字符串拼好后\",{\"1\":{\"78\":2}}],[\"指定当foreach标签的标签体重复拼接字符串时\",{\"1\":{\"78\":1}}],[\"指定要动态去掉的后缀\",{\"1\":{\"76\":1}}],[\"指定要动态去掉的前缀\",{\"1\":{\"76\":1}}],[\"指定要动态添加的后缀\",{\"1\":{\"76\":1}}],[\"指定要动态添加的前缀\",{\"1\":{\"76\":1}}],[\"指定查询的输出数据类型即可\",{\"1\":{\"66\":1}}],[\"指定时区的对象\",{\"1\":{\"32\":1}}],[\"指\",{\"1\":{\"10\":1}}],[\"scope>\",{\"1\":{\"156\":1,\"176\":1}}],[\"scope\",{\"1\":{\"145\":1}}],[\"scope=\",{\"1\":{\"138\":1,\"139\":1}}],[\"scope属性\",{\"1\":{\"138\":2}}],[\"schemalocation=\",{\"1\":{\"134\":1,\"137\":3,\"143\":1}}],[\"schema\",{\"1\":{\"134\":3,\"137\":19,\"143\":6}}],[\"scan>\",{\"1\":{\"143\":1}}],[\"scan\",{\"1\":{\"143\":1}}],[\"scanner\",{\"1\":{\"30\":9}}],[\"scanner键盘输入\",{\"1\":{\"30\":1}}],[\"scale指明保留几位小数\",{\"1\":{\"31\":1}}],[\"scale\",{\"1\":{\"31\":1}}],[\"some\",{\"1\":{\"126\":2}}],[\"sort\",{\"1\":{\"29\":2}}],[\"sn拼接成一个字符串\",{\"1\":{\"114\":1}}],[\"sn\",{\"1\":{\"114\":1}}],[\"sname\",{\"1\":{\"81\":10,\"82\":5}}],[\"s2\",{\"1\":{\"114\":2}}],[\"show\",{\"1\":{\"98\":1,\"99\":2,\"112\":1,\"158\":5}}],[\"short\",{\"1\":{\"15\":2,\"17\":1,\"27\":2}}],[\"smallint\",{\"1\":{\"94\":1}}],[\"src\",{\"1\":{\"86\":3}}],[\"s\",{\"1\":{\"81\":10,\"82\":3,\"148\":1}}],[\"saveemp\",{\"1\":{\"172\":1}}],[\"save发送相应的请求即可\",{\"1\":{\"156\":1}}],[\"save\",{\"1\":{\"143\":1,\"145\":4,\"148\":5,\"156\":3,\"176\":2}}],[\"saveuser\",{\"1\":{\"141\":1,\"173\":1}}],[\"salary>\",{\"1\":{\"74\":1,\"76\":1}}],[\"salary=\",{\"1\":{\"63\":1,\"64\":1,\"69\":1,\"75\":4}}],[\"salary\",{\"1\":{\"62\":1,\"65\":1,\"67\":2,\"69\":3,\"70\":1,\"71\":1,\"72\":1,\"74\":1,\"76\":1,\"77\":2,\"79\":1,\"125\":2,\"126\":8}}],[\"say方法\",{\"1\":{\"52\":1}}],[\"say\",{\"1\":{\"52\":4}}],[\"sql标准中规定了多种事务隔离级别\",{\"1\":{\"153\":1}}],[\"sqlexception\",{\"1\":{\"137\":1}}],[\"sqlmapgenerator>\",{\"1\":{\"86\":1}}],[\"sql>\",{\"1\":{\"79\":1}}],[\"sql语句可以使用空格\",{\"1\":{\"92\":1}}],[\"sql语句可以单行或多行书写\",{\"1\":{\"92\":1}}],[\"sql语句\",{\"1\":{\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1}}],[\"sql传参\",{\"0\":{\"60\":1,\"66\":1}}],[\"sqlsession对象关闭或提交后\",{\"1\":{\"85\":1}}],[\"sqlsession\",{\"1\":{\"58\":4,\"59\":11}}],[\"sqlsessionfactory工具类\",{\"0\":{\"59\":1}}],[\"sqlsessionfactorybuilder\",{\"1\":{\"58\":1,\"59\":2}}],[\"sqlsessionfactory\",{\"1\":{\"58\":3,\"59\":5}}],[\"sql\",{\"0\":{\"79\":1},\"1\":{\"57\":1,\"74\":1,\"90\":1}}],[\"sqrt\",{\"1\":{\"31\":1}}],[\"springmvcconfig\",{\"1\":{\"156\":2,\"175\":1}}],[\"springmvc提供\",{\"1\":{\"155\":4}}],[\"springmvc涉及组件理解\",{\"1\":{\"155\":1}}],[\"springmvc处理请求流程\",{\"1\":{\"155\":1}}],[\"springmvc\",{\"0\":{\"154\":1,\"181\":1},\"1\":{\"156\":1,\"158\":1,\"159\":1,\"168\":1,\"175\":3}}],[\"spring版本5\",{\"1\":{\"149\":2}}],[\"springconfig类里面添加\",{\"1\":{\"147\":1}}],[\"springconfig\",{\"1\":{\"143\":2,\"145\":4,\"147\":1,\"152\":1,\"156\":1}}],[\"spring6\",{\"1\":{\"140\":1,\"141\":1}}],[\"springframework\",{\"1\":{\"134\":3,\"137\":19,\"143\":6,\"166\":2}}],[\"springframework<\",{\"1\":{\"134\":1,\"147\":2,\"156\":1}}],[\"spring的用途不仅限于服务器端的开发\",{\"1\":{\"133\":1}}],[\"spring简介\",{\"0\":{\"133\":1}}],[\"spring\",{\"0\":{\"132\":1,\"180\":1},\"1\":{\"53\":1,\"133\":9,\"134\":2,\"137\":19,\"138\":1,\"139\":3,\"140\":1,\"143\":4,\"144\":5,\"146\":3,\"147\":2,\"152\":1,\"155\":5,\"163\":1,\"166\":2,\"169\":1}}],[\"success\",{\"1\":{\"158\":3,\"159\":1,\"161\":1,\"162\":1,\"163\":1}}],[\"suffixoverrides=\",{\"1\":{\"76\":1}}],[\"suffixoverrides属性\",{\"1\":{\"76\":1}}],[\"suffix属性\",{\"1\":{\"76\":1}}],[\"suppressallcomments\",{\"1\":{\"86\":1}}],[\"suppressdate\",{\"1\":{\"86\":1}}],[\"suppresswarnings\",{\"1\":{\"54\":1}}],[\"super访问不限于直接父类\",{\"1\":{\"43\":1}}],[\"super关键字\",{\"0\":{\"43\":1}}],[\"super\",{\"1\":{\"41\":1,\"43\":2}}],[\"summer\",{\"1\":{\"53\":1}}],[\"sum\",{\"1\":{\"36\":1,\"105\":2}}],[\"subtrahend\",{\"1\":{\"31\":1}}],[\"subtract\",{\"1\":{\"31\":2}}],[\"substring\",{\"1\":{\"28\":1,\"114\":1}}],[\"ssm\",{\"1\":{\"137\":1}}],[\"ss\",{\"1\":{\"32\":2,\"96\":3}}],[\"sss毫秒\",{\"1\":{\"32\":1}}],[\"sdf\",{\"1\":{\"32\":2}}],[\"sdk\",{\"1\":{\"10\":1}}],[\"size=10\",{\"1\":{\"173\":2}}],[\"size\",{\"1\":{\"173\":10,\"176\":2}}],[\"signature\",{\"1\":{\"149\":4}}],[\"sid\",{\"1\":{\"81\":16,\"82\":5}}],[\"simpledateformat\",{\"1\":{\"32\":2}}],[\"singleton\",{\"1\":{\"138\":1,\"145\":1}}],[\"sin\",{\"1\":{\"31\":1}}],[\"s1\",{\"1\":{\"28\":3,\"36\":1,\"44\":1,\"114\":1}}],[\"stuage\",{\"1\":{\"161\":2}}],[\"stuage=18\",{\"1\":{\"161\":1}}],[\"stu\",{\"1\":{\"81\":4,\"82\":3}}],[\"studentthree\",{\"1\":{\"137\":2}}],[\"studenttwo\",{\"1\":{\"137\":2}}],[\"studentone\",{\"1\":{\"137\":2}}],[\"studentsix\",{\"1\":{\"137\":1}}],[\"students\",{\"1\":{\"82\":3,\"137\":2}}],[\"studentresultmapstep1\",{\"1\":{\"81\":2}}],[\"studentresultmap\",{\"1\":{\"81\":4}}],[\"studentmapper\",{\"1\":{\"81\":3,\"82\":2}}],[\"student\",{\"1\":{\"41\":1,\"44\":4,\"81\":7,\"82\":3,\"137\":1}}],[\"state\",{\"1\":{\"171\":1}}],[\"status\",{\"1\":{\"119\":1,\"173\":5}}],[\"status默认为1\",{\"1\":{\"119\":1}}],[\"static修饰的是静态代码块\",{\"1\":{\"48\":1}}],[\"static关键字\",{\"0\":{\"47\":1}}],[\"static\",{\"1\":{\"27\":1,\"31\":8,\"47\":4,\"48\":1,\"49\":3,\"51\":2,\"52\":3,\"58\":1,\"59\":5,\"136\":2,\"137\":2,\"143\":1,\"145\":1}}],[\"startpage\",{\"1\":{\"87\":1}}],[\"start\",{\"1\":{\"28\":4,\"114\":1,\"129\":1}}],[\"str4\",{\"1\":{\"28\":3}}],[\"str3\",{\"1\":{\"28\":1}}],[\"str2\",{\"1\":{\"28\":1}}],[\"str1\",{\"1\":{\"28\":1}}],[\"str\",{\"1\":{\"24\":1,\"28\":5,\"114\":6}}],[\"str=arrays\",{\"1\":{\"24\":1}}],[\"stringbuilder线程不安全\",{\"1\":{\"28\":1}}],[\"stringbuilder常用方法\",{\"1\":{\"28\":1}}],[\"stringbuffer线程安全\",{\"1\":{\"28\":1}}],[\"stringbuffer与stringbuilder方法相同\",{\"1\":{\"28\":1}}],[\"stringbuffer\",{\"1\":{\"28\":7}}],[\"string常用方法\",{\"1\":{\"28\":1}}],[\"string类型的equals\",{\"1\":{\"45\":1}}],[\"string类\",{\"0\":{\"28\":1}}],[\"string\",{\"1\":{\"17\":1,\"23\":1,\"24\":1,\"28\":17,\"30\":1,\"31\":2,\"32\":1,\"36\":1,\"37\":2,\"40\":3,\"49\":1,\"50\":2,\"52\":2,\"53\":6,\"58\":2,\"59\":1,\"72\":2,\"81\":2,\"82\":2,\"136\":2,\"137\":2,\"139\":2,\"143\":1,\"145\":5,\"152\":8,\"156\":3,\"158\":4,\"159\":1,\"161\":5,\"162\":2,\"163\":3,\"164\":1,\"165\":1,\"166\":2,\"169\":2,\"173\":5,\"176\":3}}],[\"system类\",{\"0\":{\"30\":1}}],[\"system\",{\"1\":{\"18\":1,\"24\":3,\"30\":5,\"32\":1,\"42\":2,\"49\":1,\"52\":5,\"58\":1,\"59\":1,\"87\":1,\"136\":1,\"137\":3,\"139\":2,\"140\":1,\"145\":3,\"147\":2,\"149\":16,\"156\":1,\"158\":2,\"161\":5,\"162\":1,\"166\":1,\"173\":10,\"176\":2}}],[\"switch表达式的类型只能是byte\",{\"1\":{\"17\":1}}],[\"switch\",{\"1\":{\"17\":1}}],[\"switch分支控制\",{\"0\":{\"17\":1}}],[\"search\",{\"1\":{\"173\":2}}],[\"season\",{\"1\":{\"53\":2}}],[\"servletresponse\",{\"1\":{\"166\":1}}],[\"servletrequest\",{\"1\":{\"166\":1}}],[\"servletconfig\",{\"1\":{\"156\":1}}],[\"servlet\",{\"1\":{\"156\":1,\"161\":1,\"166\":6}}],[\"servlet<\",{\"1\":{\"156\":1}}],[\"service\",{\"1\":{\"143\":1,\"144\":3,\"145\":1,\"148\":4}}],[\"servertimezone=utc\",{\"1\":{\"137\":1}}],[\"serializable\",{\"1\":{\"131\":1,\"153\":4}}],[\"separator=\",{\"1\":{\"78\":2}}],[\"separator\",{\"1\":{\"78\":1}}],[\"session|global\",{\"1\":{\"131\":1}}],[\"session\",{\"1\":{\"59\":3,\"71\":1,\"138\":1,\"166\":1}}],[\"select之后\",{\"1\":{\"126\":1}}],[\"select=\",{\"1\":{\"81\":1,\"82\":1}}],[\"selectbyidstep2\",{\"1\":{\"81\":3,\"82\":3}}],[\"selectbyidstep1\",{\"1\":{\"81\":2,\"82\":2}}],[\"selectbyid\",{\"1\":{\"81\":4,\"82\":2}}],[\"selectkey>\",{\"1\":{\"72\":1}}],[\"selectkey\",{\"1\":{\"72\":6}}],[\"selectempnameandmaxsalary\",{\"1\":{\"69\":2}}],[\"selectempcount\",{\"1\":{\"68\":2}}],[\"selectemployeebyconditionbychoose\",{\"1\":{\"77\":2}}],[\"selectemployeebyconditionbytrim\",{\"1\":{\"76\":2}}],[\"selectemployeebycondition\",{\"1\":{\"74\":2}}],[\"selectemployeebyrm\",{\"1\":{\"67\":2}}],[\"selectemployeebyrmresultmap\",{\"1\":{\"67\":2}}],[\"selectemployee\",{\"1\":{\"62\":2,\"70\":2}}],[\"select>\",{\"1\":{\"58\":1,\"62\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"74\":1,\"76\":1,\"77\":1,\"81\":4,\"82\":3,\"87\":1}}],[\"select\",{\"1\":{\"58\":1,\"62\":1,\"67\":1,\"68\":1,\"69\":3,\"70\":1,\"71\":1,\"72\":3,\"74\":1,\"76\":1,\"77\":1,\"79\":1,\"81\":4,\"82\":3,\"87\":1,\"88\":2,\"98\":1,\"103\":6,\"104\":7,\"105\":3,\"106\":3,\"107\":3,\"108\":4,\"109\":1,\"111\":1,\"112\":1,\"122\":4,\"123\":4,\"124\":3,\"125\":6,\"126\":21,\"129\":1,\"131\":1}}],[\"selectall书写不变\",{\"1\":{\"148\":1}}],[\"selectall\",{\"1\":{\"58\":3,\"71\":4,\"87\":3,\"88\":1}}],[\"setid\",{\"1\":{\"173\":1}}],[\"setupform\",{\"1\":{\"161\":1}}],[\"setdriverclassname\",{\"1\":{\"145\":3}}],[\"setter\",{\"1\":{\"163\":1}}],[\"setter注入\",{\"1\":{\"137\":1}}],[\"settings>\",{\"1\":{\"58\":1,\"70\":1}}],[\"set>\",{\"1\":{\"75\":1}}],[\"set标签动态管理set子句\",{\"1\":{\"75\":1}}],[\"set标签\",{\"0\":{\"75\":1}}],[\"set\",{\"1\":{\"63\":1,\"64\":1,\"75\":3,\"88\":1,\"101\":3,\"114\":1,\"120\":4,\"129\":1,\"131\":1}}],[\"setage\",{\"1\":{\"40\":1,\"173\":1}}],[\"setname\",{\"1\":{\"40\":1,\"173\":1}}],[\"se\",{\"0\":{\"8\":1,\"25\":1,\"33\":1}}],[\"是指在代码中显式地编写处理异常的逻辑\",{\"1\":{\"174\":1}}],[\"是由我们自己定义\",{\"1\":{\"155\":1}}],[\"是访问并可能操作各种数据项的一个数据库操作序列\",{\"1\":{\"151\":1}}],[\"是面向对象编程的一种补充和完善\",{\"1\":{\"146\":1}}],[\"是一种软件架构风格\",{\"1\":{\"171\":1}}],[\"是一个不可分割的工作单位\",{\"1\":{\"151\":1}}],[\"是一个重要的面向对象编程法则\",{\"1\":{\"133\":1}}],[\"是一款主流的\",{\"1\":{\"133\":1}}],[\"是一款优秀的持久层框架\",{\"1\":{\"57\":1}}],[\"是null\",{\"1\":{\"104\":1}}],[\"是否加入事务\",{\"1\":{\"152\":1}}],[\"是否开启⼦包\",{\"1\":{\"86\":2}}],[\"是否去除字段名的前后空⽩\",{\"1\":{\"86\":1}}],[\"是否去除注释\",{\"1\":{\"86\":1}}],[\"是否去掉⽣成⽇期\",{\"1\":{\"86\":1}}],[\"是否包含str\",{\"1\":{\"28\":1}}],[\"是该类所有对象共享的变量\",{\"1\":{\"47\":1}}],[\"是先自增再赋值\",{\"1\":{\"14\":1}}],[\"是先赋值再自增\",{\"1\":{\"14\":1}}],[\"是java虚拟机\",{\"1\":{\"10\":1}}],[\"是\",{\"1\":{\"10\":1,\"133\":1,\"176\":1}}],[\"jsr\",{\"1\":{\"176\":4}}],[\"jsessionid\",{\"1\":{\"164\":1}}],[\"jsessionid=415a4ac178c59dace0b2c9ca727cdd84\",{\"1\":{\"164\":1}}],[\"json数据处理\",{\"1\":{\"175\":1}}],[\"json参数接收\",{\"0\":{\"163\":1}}],[\"json\",{\"1\":{\"160\":10,\"163\":6,\"168\":1,\"170\":1}}],[\"jp\",{\"1\":{\"149\":2}}],[\"johnson\",{\"1\":{\"133\":1}}],[\"job\",{\"1\":{\"126\":1}}],[\"joinpoint\",{\"1\":{\"149\":1}}],[\"join\",{\"1\":{\"81\":2,\"82\":1,\"122\":2,\"123\":4,\"124\":2,\"126\":1}}],[\"jakartaee\",{\"1\":{\"176\":1}}],[\"jakarta\",{\"1\":{\"166\":3,\"176\":2}}],[\"jackson\",{\"1\":{\"156\":1}}],[\"jack\",{\"1\":{\"126\":2}}],[\"javaee\",{\"1\":{\"176\":1}}],[\"javaclientgenerator>\",{\"1\":{\"86\":1}}],[\"javamodelgenerator>\",{\"1\":{\"86\":1}}],[\"javatype=\",{\"1\":{\"81\":1}}],[\"java<\",{\"1\":{\"58\":1,\"86\":1,\"137\":1}}],[\"java虚拟机中的\",{\"1\":{\"57\":1}}],[\"java允许将同一类的中多个同名同功能但参数个数不同的方法封装成一个方法\",{\"1\":{\"36\":1}}],[\"java允许同一个类中同名方法的存在\",{\"1\":{\"36\":1}}],[\"javadoc\",{\"1\":{\"13\":1}}],[\"javaapi文档\",{\"0\":{\"11\":1}}],[\"java简介\",{\"0\":{\"9\":1}}],[\"java\",{\"0\":{\"8\":1,\"25\":1,\"33\":1,\"177\":1},\"1\":{\"8\":1,\"10\":2,\"11\":1,\"13\":2,\"26\":1,\"27\":2,\"55\":2,\"57\":6,\"59\":2,\"67\":3,\"68\":1,\"72\":2,\"86\":2,\"133\":5,\"163\":3,\"166\":5,\"176\":1}}],[\"javase\",{\"1\":{\"3\":1,\"11\":2,\"26\":2}}],[\"jdbcconfig\",{\"1\":{\"145\":4}}],[\"jdbcconnection>\",{\"1\":{\"86\":1}}],[\"jdbc\",{\"1\":{\"57\":1,\"58\":3,\"86\":2,\"137\":11,\"145\":5}}],[\"jdk17在线文档\",{\"1\":{\"11\":1,\"26\":1}}],[\"jdk8在线文档\",{\"1\":{\"11\":1,\"26\":1}}],[\"jdk\",{\"1\":{\"10\":1,\"13\":1,\"146\":1}}],[\"jdk结构\",{\"0\":{\"10\":1}}],[\"jcven\",{\"1\":{\"13\":1,\"58\":1,\"59\":1,\"62\":1,\"67\":1,\"70\":1,\"71\":1,\"76\":1,\"77\":1,\"81\":5,\"82\":4,\"86\":3,\"101\":1,\"134\":1,\"137\":12,\"138\":1,\"139\":2,\"143\":2,\"147\":1,\"152\":1,\"156\":1}}],[\"jvm\",{\"1\":{\"10\":1,\"55\":1}}],[\"jre\",{\"1\":{\"10\":1}}],[\"1代表自动\",{\"1\":{\"129\":1}}],[\"15<\",{\"1\":{\"137\":1}}],[\"15\",{\"1\":{\"104\":2}}],[\"18\",{\"1\":{\"101\":1,\"137\":2,\"161\":1,\"163\":1}}],[\"14\",{\"1\":{\"96\":1}}],[\"19\",{\"1\":{\"96\":1}}],[\"1901\",{\"1\":{\"96\":1}}],[\"1970\",{\"1\":{\"32\":1,\"96\":1}}],[\"16777215\",{\"1\":{\"95\":2}}],[\"11\",{\"0\":{\"88\":1,\"121\":1},\"1\":{\"99\":1}}],[\"11时10分53秒\",{\"1\":{\"32\":1}}],[\"1<\",{\"1\":{\"86\":1,\"87\":1,\"156\":1}}],[\"10<\",{\"1\":{\"58\":1}}],[\"10\",{\"0\":{\"55\":1,\"87\":1,\"118\":1},\"1\":{\"99\":1,\"108\":4,\"119\":1,\"156\":1,\"173\":4,\"176\":1}}],[\"1001\",{\"1\":{\"139\":1}}],[\"10086\",{\"1\":{\"137\":1}}],[\"1000\",{\"1\":{\"96\":2}}],[\"100\",{\"1\":{\"28\":1,\"49\":2,\"52\":4}}],[\"12\",{\"0\":{\"127\":1},\"1\":{\"96\":2}}],[\"123456\",{\"1\":{\"58\":1,\"86\":1}}],[\"12345\",{\"1\":{\"28\":1}}],[\"127\",{\"1\":{\"15\":1}}],[\"128\",{\"1\":{\"15\":1}}],[\"1相当于\",{\"1\":{\"14\":2}}],[\"17\",{\"1\":{\"11\":1,\"26\":1}}],[\"1\",{\"0\":{\"10\":1,\"13\":1,\"17\":1,\"23\":1,\"27\":1,\"35\":1,\"40\":1,\"47\":1,\"57\":1,\"61\":1,\"67\":1,\"74\":1,\"81\":1,\"84\":1,\"90\":1,\"94\":1,\"98\":1,\"101\":1,\"103\":1,\"111\":1,\"114\":1,\"119\":1,\"122\":1,\"128\":1,\"133\":1,\"136\":1,\"143\":1,\"147\":1,\"151\":1,\"155\":1,\"158\":1,\"168\":1,\"172\":1},\"1\":{\"13\":1,\"14\":1,\"15\":7,\"18\":1,\"23\":6,\"29\":2,\"31\":3,\"32\":2,\"49\":1,\"51\":2,\"58\":3,\"86\":3,\"94\":1,\"96\":1,\"98\":1,\"99\":1,\"101\":3,\"103\":1,\"104\":1,\"108\":1,\"109\":1,\"111\":1,\"112\":1,\"119\":4,\"122\":1,\"126\":1,\"134\":1,\"136\":1,\"137\":6,\"143\":1,\"145\":1,\"149\":3,\"152\":2,\"156\":1,\"162\":1,\"165\":1,\"173\":4,\"176\":1}}],[\"暂无链接\",{\"0\":{\"7\":1}}],[\"暂无项目\",{\"0\":{\"5\":1}}],[\"暂时还未添加内容\",{\"1\":{\"1\":1}}],[\"笔记\",{\"0\":{\"56\":1,\"132\":1,\"154\":1},\"1\":{\"3\":2}}],[\"个人笔记目录\",{\"0\":{\"2\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
